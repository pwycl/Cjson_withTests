        -:    0:Source:D:/CLionProjects/Cjson_withTests/Google_tests/lib/googletest/src/gtest-filepath.cc
        -:    0:Graph:D:\CLionProjects\Cjson_withTests\cmake-build-debug\Google_tests\lib\googletest\CMakeFiles\gtest.dir\src\gtest-all.cc.gcno
        -:    0:Data:D:\CLionProjects\Cjson_withTests\cmake-build-debug\Google_tests\lib\googletest\CMakeFiles\gtest.dir\src\gtest-all.cc.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:// Copyright 2008, Google Inc.
        -:    2:// All rights reserved.
        -:    3://
        -:    4:// Redistribution and use in source and binary forms, with or without
        -:    5:// modification, are permitted provided that the following conditions are
        -:    6:// met:
        -:    7://
        -:    8://     * Redistributions of source code must retain the above copyright
        -:    9:// notice, this list of conditions and the following disclaimer.
        -:   10://     * Redistributions in binary form must reproduce the above
        -:   11:// copyright notice, this list of conditions and the following disclaimer
        -:   12:// in the documentation and/or other materials provided with the
        -:   13:// distribution.
        -:   14://     * Neither the name of Google Inc. nor the names of its
        -:   15:// contributors may be used to endorse or promote products derived from
        -:   16:// this software without specific prior written permission.
        -:   17://
        -:   18:// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
        -:   19:// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
        -:   20:// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
        -:   21:// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
        -:   22:// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
        -:   23:// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
        -:   24:// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
        -:   25:// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
        -:   26:// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
        -:   27:// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
        -:   28:// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
        -:   29:
        -:   30:#include "gtest/internal/gtest-filepath.h"
        -:   31:
        -:   32:#include <stdlib.h>
        -:   33:#include "gtest/internal/gtest-port.h"
        -:   34:#include "gtest/gtest-message.h"
        -:   35:
        -:   36:#if GTEST_OS_WINDOWS_MOBILE
        -:   37:# include <windows.h>
        -:   38:#elif GTEST_OS_WINDOWS
        -:   39:# include <direct.h>
        -:   40:# include <io.h>
        -:   41:#else
        -:   42:# include <limits.h>
        -:   43:# include <climits>  // Some Linux distributions define PATH_MAX here.
        -:   44:#endif  // GTEST_OS_WINDOWS_MOBILE
        -:   45:
        -:   46:#include "gtest/internal/gtest-string.h"
        -:   47:
        -:   48:#if GTEST_OS_WINDOWS
        -:   49:# define GTEST_PATH_MAX_ _MAX_PATH
        -:   50:#elif defined(PATH_MAX)
        -:   51:# define GTEST_PATH_MAX_ PATH_MAX
        -:   52:#elif defined(_XOPEN_PATH_MAX)
        -:   53:# define GTEST_PATH_MAX_ _XOPEN_PATH_MAX
        -:   54:#else
        -:   55:# define GTEST_PATH_MAX_ _POSIX_PATH_MAX
        -:   56:#endif  // GTEST_OS_WINDOWS
        -:   57:
        -:   58:namespace testing {
        -:   59:namespace internal {
        -:   60:
        -:   61:#if GTEST_OS_WINDOWS
        -:   62:// On Windows, '\\' is the standard path separator, but many tools and the
        -:   63:// Windows API also accept '/' as an alternate path separator. Unless otherwise
        -:   64:// noted, a file path can contain either kind of path separators, or a mixture
        -:   65:// of them.
        -:   66:const char kPathSeparator = '\\';
        -:   67:const char kAlternatePathSeparator = '/';
        -:   68:const char kAlternatePathSeparatorString[] = "/";
        -:   69:# if GTEST_OS_WINDOWS_MOBILE
        -:   70:// Windows CE doesn't have a current directory. You should not use
        -:   71:// the current directory in tests on Windows CE, but this at least
        -:   72:// provides a reasonable fallback.
        -:   73:const char kCurrentDirectoryString[] = "\\";
        -:   74:// Windows CE doesn't define INVALID_FILE_ATTRIBUTES
        -:   75:const DWORD kInvalidFileAttributes = 0xffffffff;
        -:   76:# else
        -:   77:const char kCurrentDirectoryString[] = ".\\";
        -:   78:# endif  // GTEST_OS_WINDOWS_MOBILE
        -:   79:#else
        -:   80:const char kPathSeparator = '/';
        -:   81:const char kCurrentDirectoryString[] = "./";
        -:   82:#endif  // GTEST_OS_WINDOWS
        -:   83:
        -:   84:// Returns whether the given character is a valid path separator.
       71:   85:static bool IsPathSeparator(char c) {
        -:   86:#if GTEST_HAS_ALT_PATH_SEP_
       71:   87:  return (c == kPathSeparator) || (c == kAlternatePathSeparator);
       71:   87-block  0
       63:   87-block  1
        8:   87-block  2
       63:   87-block  3
       71:   87-block  4
        -:   88:#else
        -:   89:  return c == kPathSeparator;
        -:   90:#endif
        -:   91:}
        -:   92:
        -:   93:// Returns the current working directory, or "" if unsuccessful.
        1:   94:FilePath FilePath::GetCurrentDir() {
        -:   95:#if GTEST_OS_WINDOWS_MOBILE || GTEST_OS_WINDOWS_PHONE || \
        -:   96:    GTEST_OS_WINDOWS_RT || ARDUINO
        -:   97:  // Windows CE and Arduino don't have a current directory, so we just return
        -:   98:  // something reasonable.
        -:   99:  return FilePath(kCurrentDirectoryString);
        -:  100:#elif GTEST_OS_WINDOWS
        1:  101:  char cwd[GTEST_PATH_MAX_ + 1] = { '\0' };
       1*:  102:  return FilePath(_getcwd(cwd, sizeof(cwd)) == nullptr ? "" : cwd);
        1:  102-block  0
        1:  102-block  1
        1:  102-block  2
    %%%%%:  102-block  3
        1:  102-block  4
        1:  102-block  5
        1:  102-block  6
        1:  102-block  7
    $$$$$:  102-block  8
    $$$$$:  102-block  9
    $$$$$:  102-block 10
    $$$$$:  102-block 11
        -:  103:#else
        -:  104:  char cwd[GTEST_PATH_MAX_ + 1] = { '\0' };
        -:  105:  char* result = getcwd(cwd, sizeof(cwd));
        -:  106:# if GTEST_OS_NACL
        -:  107:  // getcwd will likely fail in NaCl due to the sandbox, so return something
        -:  108:  // reasonable. The user may have provided a shim implementation for getcwd,
        -:  109:  // however, so fallback only when failure is detected.
        -:  110:  return FilePath(result == nullptr ? kCurrentDirectoryString : cwd);
        -:  111:# endif  // GTEST_OS_NACL
        -:  112:  return FilePath(result == nullptr ? "" : cwd);
        -:  113:#endif  // GTEST_OS_WINDOWS_MOBILE
        -:  114:}
        -:  115:
        -:  116:// Returns a copy of the FilePath with the case-insensitive extension removed.
        -:  117:// Example: FilePath("dir/file.exe").RemoveExtension("EXE") returns
        -:  118:// FilePath("dir/file"). If a case-insensitive extension is not
        -:  119:// found, returns a copy of the original FilePath.
    #####:  120:FilePath FilePath::RemoveExtension(const char* extension) const {
    #####:  121:  const std::string dot_extension = std::string(".") + extension;
    %%%%%:  121-block  0
    %%%%%:  121-block  1
    %%%%%:  121-block  2
    $$$$$:  121-block  3
    $$$$$:  121-block  4
    $$$$$:  121-block  5
    #####:  122:  if (String::EndsWithCaseInsensitive(pathname_, dot_extension)) {
    %%%%%:  122-block  0
    #####:  123:    return FilePath(pathname_.substr(
    %%%%%:  123-block  0
    $$$$$:  123-block  1
    $$$$$:  123-block  2
    #####:  124:        0, pathname_.length() - dot_extension.length()));
    %%%%%:  124-block  0
    %%%%%:  124-block  1
    %%%%%:  124-block  2
        -:  125:  }
    #####:  126:  return *this;
    %%%%%:  126-block  0
    %%%%%:  126-block  1
        -:  127:}
        -:  128:
        -:  129:// Returns a pointer to the last occurrence of a valid path separator in
        -:  130:// the FilePath. On Windows, for example, both '/' and '\' are valid path
        -:  131:// separators. Returns NULL if no path separator was found.
    #####:  132:const char* FilePath::FindLastPathSeparator() const {
    #####:  133:  const char* const last_sep = strrchr(c_str(), kPathSeparator);
    %%%%%:  133-block  0
        -:  134:#if GTEST_HAS_ALT_PATH_SEP_
    #####:  135:  const char* const last_alt_sep = strrchr(c_str(), kAlternatePathSeparator);
        -:  136:  // Comparing two pointers of which only one is NULL is undefined.
    #####:  137:  if (last_alt_sep != nullptr &&
    %%%%%:  137-block  0
    #####:  138:      (last_sep == nullptr || last_alt_sep > last_sep)) {
    %%%%%:  138-block  0
    #####:  139:    return last_alt_sep;
    %%%%%:  139-block  0
        -:  140:  }
        -:  141:#endif
    #####:  142:  return last_sep;
    %%%%%:  142-block  0
        -:  143:}
        -:  144:
        -:  145:// Returns a copy of the FilePath with the directory part removed.
        -:  146:// Example: FilePath("path/to/file").RemoveDirectoryName() returns
        -:  147:// FilePath("file"). If there is no directory part ("just_a_file"), it returns
        -:  148:// the FilePath unmodified. If there is no file part ("just_a_dir/") it
        -:  149:// returns an empty FilePath ("").
        -:  150:// On Windows platform, '\' is the path separator, otherwise it is '/'.
    #####:  151:FilePath FilePath::RemoveDirectoryName() const {
    #####:  152:  const char* const last_sep = FindLastPathSeparator();
    %%%%%:  152-block  0
    #####:  153:  return last_sep ? FilePath(last_sep + 1) : *this;
    %%%%%:  153-block  0
    %%%%%:  153-block  1
    %%%%%:  153-block  2
    %%%%%:  153-block  3
    %%%%%:  153-block  4
    %%%%%:  153-block  5
    %%%%%:  153-block  6
    %%%%%:  153-block  7
    %%%%%:  153-block  8
    $$$$$:  153-block  9
    $$$$$:  153-block 10
    $$$$$:  153-block 11
    $$$$$:  153-block 12
    $$$$$:  153-block 13
        -:  154:}
        -:  155:
        -:  156:// RemoveFileName returns the directory path with the filename removed.
        -:  157:// Example: FilePath("path/to/file").RemoveFileName() returns "path/to/".
        -:  158:// If the FilePath is "a_file" or "/a_file", RemoveFileName returns
        -:  159:// FilePath("./") or, on Windows, FilePath(".\\"). If the filepath does
        -:  160:// not have a file, like "just/a/dir/", it returns the FilePath unmodified.
        -:  161:// On Windows platform, '\' is the path separator, otherwise it is '/'.
    #####:  162:FilePath FilePath::RemoveFileName() const {
    #####:  163:  const char* const last_sep = FindLastPathSeparator();
    %%%%%:  163-block  0
    #####:  164:  std::string dir;
    %%%%%:  164-block  0
    $$$$$:  164-block  1
    #####:  165:  if (last_sep) {
    #####:  166:    dir = std::string(c_str(), static_cast<size_t>(last_sep + 1 - c_str()));
    %%%%%:  166-block  0
    %%%%%:  166-block  1
    $$$$$:  166-block  2
    $$$$$:  166-block  3
        -:  167:  } else {
    #####:  168:    dir = kCurrentDirectoryString;
    %%%%%:  168-block  0
        -:  169:  }
    #####:  170:  return FilePath(dir);
    %%%%%:  170-block  0
    %%%%%:  170-block  1
    %%%%%:  170-block  2
        -:  171:}
        -:  172:
        -:  173:// Helper functions for naming files in a directory for xml output.
        -:  174:
        -:  175:// Given directory = "dir", base_name = "test", number = 0,
        -:  176:// extension = "xml", returns "dir/test.xml". If number is greater
        -:  177:// than zero (e.g., 12), returns "dir/test_12.xml".
        -:  178:// On Windows platform, uses \ as the separator rather than /.
    #####:  179:FilePath FilePath::MakeFileName(const FilePath& directory,
        -:  180:                                const FilePath& base_name,
        -:  181:                                int number,
        -:  182:                                const char* extension) {
    #####:  183:  std::string file;
    %%%%%:  183-block  0
    $$$$$:  183-block  1
    #####:  184:  if (number == 0) {
    #####:  185:    file = base_name.string() + "." + extension;
    %%%%%:  185-block  0
    %%%%%:  185-block  1
    %%%%%:  185-block  2
    $$$$$:  185-block  3
    $$$$$:  185-block  4
        -:  186:  } else {
    #####:  187:    file = base_name.string() + "_" + StreamableToString(number)
    %%%%%:  187-block  0
    %%%%%:  187-block  1
    %%%%%:  187-block  2
    $$$$$:  187-block  3
    $$$$$:  187-block  4
    $$$$$:  187-block  5
    $$$$$:  187-block  6
    $$$$$:  187-block  7
    $$$$$:  187-block  8
    #####:  188:        + "." + extension;
    %%%%%:  188-block  0
    %%%%%:  188-block  1
    %%%%%:  188-block  2
    $$$$$:  188-block  3
    $$$$$:  188-block  4
        -:  189:  }
    #####:  190:  return ConcatPaths(directory, FilePath(file));
    %%%%%:  190-block  0
    %%%%%:  190-block  1
    %%%%%:  190-block  2
    %%%%%:  190-block  3
    %%%%%:  190-block  4
    $$$$$:  190-block  5
    $$$$$:  190-block  6
        -:  191:}
        -:  192:
        -:  193:// Given directory = "dir", relative_path = "test.xml", returns "dir/test.xml".
        -:  194:// On Windows, uses \ as the separator rather than /.
    #####:  195:FilePath FilePath::ConcatPaths(const FilePath& directory,
        -:  196:                               const FilePath& relative_path) {
    #####:  197:  if (directory.IsEmpty())
    %%%%%:  197-block  0
    #####:  198:    return relative_path;
    %%%%%:  198-block  0
    %%%%%:  198-block  1
    #####:  199:  const FilePath dir(directory.RemoveTrailingPathSeparator());
    %%%%%:  199-block  0
    $$$$$:  199-block  1
    #####:  200:  return FilePath(dir.string() + kPathSeparator + relative_path.string());
    %%%%%:  200-block  0
    %%%%%:  200-block  1
    %%%%%:  200-block  2
    %%%%%:  200-block  3
    %%%%%:  200-block  4
    $$$$$:  200-block  5
    $$$$$:  200-block  6
    $$$$$:  200-block  7
    $$$$$:  200-block  8
        -:  201:}
        -:  202:
        -:  203:// Returns true if pathname describes something findable in the file-system,
        -:  204:// either a file, directory, or whatever.
    #####:  205:bool FilePath::FileOrDirectoryExists() const {
        -:  206:#if GTEST_OS_WINDOWS_MOBILE
        -:  207:  LPCWSTR unicode = String::AnsiToUtf16(pathname_.c_str());
        -:  208:  const DWORD attributes = GetFileAttributes(unicode);
        -:  209:  delete [] unicode;
        -:  210:  return attributes != kInvalidFileAttributes;
        -:  211:#else
        -:  212:  posix::StatStruct file_stat;
    #####:  213:  return posix::Stat(pathname_.c_str(), &file_stat) == 0;
    %%%%%:  213-block  0
    %%%%%:  213-block  1
    %%%%%:  213-block  2
        -:  214:#endif  // GTEST_OS_WINDOWS_MOBILE
        -:  215:}
        -:  216:
        -:  217:// Returns true if pathname describes a directory in the file-system
        -:  218:// that exists.
    #####:  219:bool FilePath::DirectoryExists() const {
    #####:  220:  bool result = false;
        -:  221:#if GTEST_OS_WINDOWS
        -:  222:  // Don't strip off trailing separator if path is a root directory on
        -:  223:  // Windows (like "C:\\").
    #####:  224:  const FilePath& path(IsRootDirectory() ? *this :
    %%%%%:  224-block  0
    #####:  225:                                           RemoveTrailingPathSeparator());
    %%%%%:  225-block  0
    %%%%%:  225-block  1
    %%%%%:  225-block  2
    $$$$$:  225-block  3
        -:  226:#else
        -:  227:  const FilePath& path(*this);
        -:  228:#endif
        -:  229:
        -:  230:#if GTEST_OS_WINDOWS_MOBILE
        -:  231:  LPCWSTR unicode = String::AnsiToUtf16(path.c_str());
        -:  232:  const DWORD attributes = GetFileAttributes(unicode);
        -:  233:  delete [] unicode;
        -:  234:  if ((attributes != kInvalidFileAttributes) &&
        -:  235:      (attributes & FILE_ATTRIBUTE_DIRECTORY)) {
        -:  236:    result = true;
        -:  237:  }
        -:  238:#else
        -:  239:  posix::StatStruct file_stat;
    #####:  240:  result = posix::Stat(path.c_str(), &file_stat) == 0 &&
    %%%%%:  240-block  0
    %%%%%:  240-block  1
    %%%%%:  240-block  2
    %%%%%:  240-block  3
    #####:  241:      posix::IsDir(file_stat);
    %%%%%:  241-block  0
        -:  242:#endif  // GTEST_OS_WINDOWS_MOBILE
        -:  243:
    #####:  244:  return result;
    %%%%%:  244-block  0
    %%%%%:  244-block  1
        -:  245:}
        -:  246:
        -:  247:// Returns true if pathname describes a root directory. (Windows has one
        -:  248:// root directory per disk drive.)
    #####:  249:bool FilePath::IsRootDirectory() const {
        -:  250:#if GTEST_OS_WINDOWS
    #####:  251:  return pathname_.length() == 3 && IsAbsolutePath();
    %%%%%:  251-block  0
    %%%%%:  251-block  1
    %%%%%:  251-block  2
    %%%%%:  251-block  3
    %%%%%:  251-block  4
        -:  252:#else
        -:  253:  return pathname_.length() == 1 && IsPathSeparator(pathname_.c_str()[0]);
        -:  254:#endif
        -:  255:}
        -:  256:
        -:  257:// Returns true if pathname describes an absolute path.
    #####:  258:bool FilePath::IsAbsolutePath() const {
    #####:  259:  const char* const name = pathname_.c_str();
    %%%%%:  259-block  0
        -:  260:#if GTEST_OS_WINDOWS
    #####:  261:  return pathname_.length() >= 3 &&
    #####:  262:     ((name[0] >= 'a' && name[0] <= 'z') ||
    %%%%%:  262-block  0
    %%%%%:  262-block  1
    #####:  263:      (name[0] >= 'A' && name[0] <= 'Z')) &&
    %%%%%:  263-block  0
    %%%%%:  263-block  1
    #####:  264:     name[1] == ':' &&
    %%%%%:  264-block  0
    %%%%%:  264-block  1
    %%%%%:  264-block  2
    #####:  265:     IsPathSeparator(name[2]);
    %%%%%:  265-block  0
    %%%%%:  265-block  1
        -:  266:#else
        -:  267:  return IsPathSeparator(name[0]);
        -:  268:#endif
        -:  269:}
        -:  270:
        -:  271:// Returns a pathname for a file that does not currently exist. The pathname
        -:  272:// will be directory/base_name.extension or
        -:  273:// directory/base_name_<number>.extension if directory/base_name.extension
        -:  274:// already exists. The number will be incremented until a pathname is found
        -:  275:// that does not already exist.
        -:  276:// Examples: 'dir/foo_test.xml' or 'dir/foo_test_1.xml'.
        -:  277:// There could be a race condition if two or more processes are calling this
        -:  278:// function at the same time -- they could both pick the same filename.
    #####:  279:FilePath FilePath::GenerateUniqueFileName(const FilePath& directory,
        -:  280:                                          const FilePath& base_name,
        -:  281:                                          const char* extension) {
    #####:  282:  FilePath full_pathname;
    %%%%%:  282-block  0
    #####:  283:  int number = 0;
    #####:  284:  do {
    %%%%%:  284-block  0
    #####:  285:    full_pathname.Set(MakeFileName(directory, base_name, number++, extension));
    %%%%%:  285-block  0
    %%%%%:  285-block  1
    %%%%%:  285-block  2
    $$$$$:  285-block  3
    $$$$$:  285-block  4
    #####:  286:  } while (full_pathname.FileOrDirectoryExists());
    %%%%%:  286-block  0
    #####:  287:  return full_pathname;
    %%%%%:  287-block  0
    %%%%%:  287-block  1
        -:  288:}
        -:  289:
        -:  290:// Returns true if FilePath ends with a path separator, which indicates that
        -:  291:// it is intended to represent a directory. Returns false otherwise.
        -:  292:// This does NOT check that a directory (or file) actually exists.
    #####:  293:bool FilePath::IsDirectory() const {
    #####:  294:  return !pathname_.empty() &&
    %%%%%:  294-block  0
    %%%%%:  294-block  1
    %%%%%:  294-block  2
    #####:  295:         IsPathSeparator(pathname_.c_str()[pathname_.length() - 1]);
    %%%%%:  295-block  0
    %%%%%:  295-block  1
        -:  296:}
        -:  297:
        -:  298:// Create directories so that path exists. Returns true if successful or if
        -:  299:// the directories already exist; returns false if unable to create directories
        -:  300:// for any reason.
    #####:  301:bool FilePath::CreateDirectoriesRecursively() const {
    #####:  302:  if (!this->IsDirectory()) {
    %%%%%:  302-block  0
    #####:  303:    return false;
    %%%%%:  303-block  0
        -:  304:  }
        -:  305:
    #####:  306:  if (pathname_.length() == 0 || this->DirectoryExists()) {
    %%%%%:  306-block  0
    %%%%%:  306-block  1
    %%%%%:  306-block  2
    %%%%%:  306-block  3
    %%%%%:  306-block  4
    %%%%%:  306-block  5
    #####:  307:    return true;
    %%%%%:  307-block  0
        -:  308:  }
        -:  309:
    #####:  310:  const FilePath parent(this->RemoveTrailingPathSeparator().RemoveFileName());
    %%%%%:  310-block  0
    %%%%%:  310-block  1
    $$$$$:  310-block  2
    $$$$$:  310-block  3
    #####:  311:  return parent.CreateDirectoriesRecursively() && this->CreateFolder();
    %%%%%:  311-block  0
    %%%%%:  311-block  1
    %%%%%:  311-block  2
    %%%%%:  311-block  3
    %%%%%:  311-block  4
    %%%%%:  311-block  5
        -:  312:}
        -:  313:
        -:  314:// Create the directory so that path exists. Returns true if successful or
        -:  315:// if the directory already exists; returns false if unable to create the
        -:  316:// directory for any reason, including if the parent directory does not
        -:  317:// exist. Not named "CreateDirectory" because that's a macro on Windows.
    #####:  318:bool FilePath::CreateFolder() const {
        -:  319:#if GTEST_OS_WINDOWS_MOBILE
        -:  320:  FilePath removed_sep(this->RemoveTrailingPathSeparator());
        -:  321:  LPCWSTR unicode = String::AnsiToUtf16(removed_sep.c_str());
        -:  322:  int result = CreateDirectory(unicode, nullptr) ? 0 : -1;
        -:  323:  delete [] unicode;
        -:  324:#elif GTEST_OS_WINDOWS
    #####:  325:  int result = _mkdir(pathname_.c_str());
    %%%%%:  325-block  0
        -:  326:#else
        -:  327:  int result = mkdir(pathname_.c_str(), 0777);
        -:  328:#endif  // GTEST_OS_WINDOWS_MOBILE
        -:  329:
    #####:  330:  if (result == -1) {
    #####:  331:    return this->DirectoryExists();  // An error is OK if the directory exists.
    %%%%%:  331-block  0
        -:  332:  }
    #####:  333:  return true;  // No error.
    %%%%%:  333-block  0
        -:  334:}
        -:  335:
        -:  336:// If input name has a trailing separator character, remove it and return the
        -:  337:// name, otherwise return the name string unmodified.
        -:  338:// On Windows platform, uses \ as the separator, other platforms use /.
    #####:  339:FilePath FilePath::RemoveTrailingPathSeparator() const {
    #####:  340:  return IsDirectory()
    %%%%%:  340-block  0
    #####:  341:      ? FilePath(pathname_.substr(0, pathname_.length() - 1))
    %%%%%:  341-block  0
    %%%%%:  341-block  1
    %%%%%:  341-block  2
    %%%%%:  341-block  3
    $$$$$:  341-block  4
    $$$$$:  341-block  5
    #####:  342:      : *this;
    %%%%%:  342-block  0
    %%%%%:  342-block  1
    %%%%%:  342-block  2
    %%%%%:  342-block  3
        -:  343:}
        -:  344:
        -:  345:// Removes any redundant separators that might be in the pathname.
        -:  346:// For example, "bar///foo" becomes "bar/foo". Does not eliminate other
        -:  347:// redundancies that might be in a pathname involving "." or "..".
        1:  348:void FilePath::Normalize() {
        1:  349:  if (pathname_.c_str() == nullptr) {
        1:  349-block  0
    #####:  350:    pathname_ = "";
    %%%%%:  350-block  0
    #####:  351:    return;
        -:  352:  }
        1:  353:  const char* src = pathname_.c_str();
        1:  353-block  0
        1:  354:  char* const dest = new char[pathname_.length() + 1];
        1:  355:  char* dest_ptr = dest;
        1:  356:  memset(dest_ptr, 0, pathname_.length() + 1);
        -:  357:
       64:  358:  while (*src != '\0') {
       64:  358-block  0
       63:  359:    *dest_ptr = *src;
       63:  360:    if (!IsPathSeparator(*src)) {
       63:  360-block  0
       59:  361:      src++;
       59:  361-block  0
        -:  362:    } else {
        -:  363:#if GTEST_HAS_ALT_PATH_SEP_
        4:  364:      if (*dest_ptr == kAlternatePathSeparator) {
        4:  364-block  0
    #####:  365:        *dest_ptr = kPathSeparator;
    %%%%%:  365-block  0
        -:  366:      }
        -:  367:#endif
        8:  368:      while (IsPathSeparator(*src))
        8:  368-block  0
        4:  369:        src++;
        4:  369-block  0
        -:  370:    }
       63:  371:    dest_ptr++;
       63:  371-block  0
        -:  372:  }
        1:  373:  *dest_ptr = '\0';
        1:  374:  pathname_ = dest;
        1:  374-block  0
        1:  375:  delete[] dest;
        1:  375-block  0
        -:  376:}
        -:  377:
        -:  378:}  // namespace internal
        -:  379:}  // namespace testing
