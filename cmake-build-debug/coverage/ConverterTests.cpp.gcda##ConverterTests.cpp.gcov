        -:    0:Source:D:/CLionProjects/Cjson_withTests/Google_tests/ConverterTests.cpp
        -:    0:Graph:D:\CLionProjects\Cjson_withTests\cmake-build-debug\Google_tests\CMakeFiles\Google_Tests_run.dir\ConverterTests.cpp.gcno
        -:    0:Data:D:\CLionProjects\Cjson_withTests\cmake-build-debug\Google_tests\CMakeFiles\Google_Tests_run.dir\ConverterTests.cpp.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "gtest/gtest.h"
        -:    2:#include "cJSON.h"
        -:    3:#include "../Cjson_lib/cJSON.c"
        -:    4:
        -:    5:static cJSON item[1];
       51:    6:void reset(cJSON *item) {
       51:    7:    if ((item != NULL) && (item->child != NULL))
       51:    7-block  0
       51:    7-block  1
        -:    8:    {
       24:    9:        cJSON_Delete(item->child);
       24:    9-block  0
        -:   10:    }
       51:   11:    if ((item->valuestring != NULL) && !(item->type & cJSON_IsReference))
       51:   11-block  0
        4:   11-block  1
        -:   12:    {
        2:   13:        global_hooks.deallocate(item->valuestring);
        2:   13-block  0
        -:   14:    }
      51*:   15:    if ((item->string != NULL) && !(item->type & cJSON_StringIsConst))
       51:   15-block  0
    %%%%%:   15-block  1
        -:   16:    {
    #####:   17:        global_hooks.deallocate(item->string);
    %%%%%:   17-block  0
        -:   18:    }
        -:   19:
       51:   20:    memset(item, 0, sizeof(cJSON));
       51:   21:}
        -:   22:
        -:   23:
        -:   24:class CjsonFixture : public ::testing::Test {
        -:   25:
        -:   26:protected:
        -:   27:    virtual void SetUp()
        -:   28:    {
        -:   29:        memset(item, 0, sizeof(cJSON));
        -:   30://        gregDate = new GregorianDate();
        -:   31://        julDate = new JulianDate();
        -:   32:    }
        -:   33:
        -:   34:    virtual void TearDown() {
        -:   35://        delete gregDate;
        -:   36://        delete julDate;
        -:   37:        reset(item);
        -:   38:    }
        -:   39:
        -:   40://    GregorianDate * gregDate;
        -:   41://    JulianDate * julDate;
        -:   42:};
        -:   43:
        8:   44:static void assert_not_in_list(cJSON *object_item){
       8*:   45:    ASSERT_TRUE(object_item->next==NULL);
        8:   45-block  0
    %%%%%:   45-block  1
    %%%%%:   45-block  2
    %%%%%:   45-block  3
    %%%%%:   45-block  4
    %%%%%:   45-block  5
    $$$$$:   45-block  6
    $$$$$:   45-block  7
    $$$$$:   45-block  8
    $$$$$:   45-block  9
    $$$$$:   45-block 10
    $$$$$:   45-block 11
    $$$$$:   45-block 12
       8*:   46:    ASSERT_TRUE(object_item->prev==NULL);
        8:   46-block  0
    %%%%%:   46-block  1
    %%%%%:   46-block  2
    %%%%%:   46-block  3
    %%%%%:   46-block  4
    %%%%%:   46-block  5
    $$$$$:   46-block  6
    $$$$$:   46-block  7
    $$$$$:   46-block  8
    $$$$$:   46-block  9
    $$$$$:   46-block 10
    $$$$$:   46-block 11
    $$$$$:   46-block 12
        -:   47:}
       14:   48:static void assert_has_type(cJSON *object_item, int expect_type){    //判断类型
      14*:   49:    ASSERT_TRUE((0xff & (object_item->type))==(0xff & expect_type));
       14:   49-block  0
    %%%%%:   49-block  1
    %%%%%:   49-block  2
    %%%%%:   49-block  3
    %%%%%:   49-block  4
    %%%%%:   49-block  5
    $$$$$:   49-block  6
    $$$$$:   49-block  7
    $$$$$:   49-block  8
    $$$$$:   49-block  9
    $$$$$:   49-block 10
    $$$$$:   49-block 11
    $$$$$:   49-block 12
        -:   50:}
        8:   51:static void assert_has_no_reference(cJSON *object_item){
       8*:   52:    ASSERT_TRUE((cJSON_IsReference & (object_item->type))==(cJSON_IsReference & 0));
        8:   52-block  0
    %%%%%:   52-block  1
    %%%%%:   52-block  2
    %%%%%:   52-block  3
    %%%%%:   52-block  4
    %%%%%:   52-block  5
    $$$$$:   52-block  6
    $$$$$:   52-block  7
    $$$$$:   52-block  8
    $$$$$:   52-block  9
    $$$$$:   52-block 10
    $$$$$:   52-block 11
    $$$$$:   52-block 12
        -:   53:}
        8:   54:static void assert_has_no_const_string(cJSON *object_item){
       8*:   55:    ASSERT_TRUE((cJSON_StringIsConst & (object_item->type))==(cJSON_StringIsConst & 0));
        8:   55-block  0
    %%%%%:   55-block  1
    %%%%%:   55-block  2
    %%%%%:   55-block  3
    %%%%%:   55-block  4
    %%%%%:   55-block  5
    $$$$$:   55-block  6
    $$$$$:   55-block  7
    $$$$$:   55-block  8
    $$$$$:   55-block  9
    $$$$$:   55-block 10
    $$$$$:   55-block 11
    $$$$$:   55-block 12
        -:   56:}
        8:   57:static void assert_is_object(cJSON *object_item)
        -:   58:{
        -:   59://    TEST_ASSERT_NOT_NULL_MESSAGE(object_item, "Item is NULL.");
       8*:   60:    ASSERT_TRUE(object_item!=NULL);
        8:   60-block  0
    %%%%%:   60-block  1
    %%%%%:   60-block  2
    %%%%%:   60-block  3
    %%%%%:   60-block  4
    %%%%%:   60-block  5
    $$$$$:   60-block  6
    $$$$$:   60-block  7
    $$$$$:   60-block  8
    $$$$$:   60-block  9
    $$$$$:   60-block 10
    $$$$$:   60-block 11
    $$$$$:   60-block 12
        -:   61:
        8:   62:    assert_not_in_list(object_item);
        8:   62-block  0
        8:   63:    assert_has_type(object_item, cJSON_Object);
        8:   64:    assert_has_no_reference(object_item);
        8:   65:    assert_has_no_const_string(object_item);
        -:   66://    assert_has_no_valuestring(object_item);
        -:   67://    assert_has_no_string(object_item);
        -:   68:}
        -:   69:
        8:   70:static void assert_parse_object(const char *json)
        -:   71:{
        8:   72:    parse_buffer parsebuffer = { 0, 0, 0, 0, { 0, 0, 0 } };
        8:   73:    parsebuffer.content = (const unsigned char*)json;
        8:   74:    parsebuffer.length = strlen(json) + sizeof("");
        8:   75:    parsebuffer.hooks = global_hooks;
        -:   76:
       8*:   77:    ASSERT_TRUE(parse_object(item, &parsebuffer));
        8:   77-block  0
        8:   77-block  1
    %%%%%:   77-block  2
    %%%%%:   77-block  3
    %%%%%:   77-block  4
    %%%%%:   77-block  5
    %%%%%:   77-block  6
    $$$$$:   77-block  7
    $$$$$:   77-block  8
    $$$$$:   77-block  9
    $$$$$:   77-block 10
    $$$$$:   77-block 11
    $$$$$:   77-block 12
    $$$$$:   77-block 13
        8:   78:    assert_is_object(item);
        8:   78-block  0
        -:   79:}
        -:   80:
        2:   81:TEST(CjsonFixture, parse_empty_objects){
        1:   82:    assert_parse_object("{}");
        1:   83:    assert_parse_object("{\n\t}");
        1:   84:}
------------------
_ZN37CjsonFixture_parse_empty_objects_Test8TestBodyEv:
        1:   81:TEST(CjsonFixture, parse_empty_objects){
        1:   82:    assert_parse_object("{}");
        1:   82-block  0
        1:   83:    assert_parse_object("{\n\t}");
        1:   84:}
------------------
_ZN37CjsonFixture_parse_empty_objects_TestC1Ev:
        1:   81:TEST(CjsonFixture, parse_empty_objects){
        1:   81-block  0
------------------
        -:   85://
        2:   86:TEST(CjsonFixture, parse_object_should_parse_objects_with_one_element){
        1:   87:    assert_parse_object("{\"one\":1}");
        -:   88://    assert_is_child(item->child, "one", cJSON_Number);
        1:   89:    reset(item);
        -:   90:
        1:   91:    assert_parse_object("{\"hello\":\"world!\"}");
        -:   92://    assert_is_child(item->child, "hello", cJSON_String);
        1:   93:    reset(item);
        -:   94:
        1:   95:    assert_parse_object("{\"array\":[]}");
        -:   96://    assert_is_child(item->child, "array", cJSON_Array);
        1:   97:    reset(item);
        -:   98:
        1:   99:    assert_parse_object("{\"null\":null}");
        -:  100://    assert_is_child(item->child, "null", cJSON_NULL);
        1:  101:    reset(item);
        1:  102:}
------------------
_ZN68CjsonFixture_parse_object_should_parse_objects_with_one_element_Test8TestBodyEv:
        1:   86:TEST(CjsonFixture, parse_object_should_parse_objects_with_one_element){
        1:   87:    assert_parse_object("{\"one\":1}");
        1:   87-block  0
        -:   88://    assert_is_child(item->child, "one", cJSON_Number);
        1:   89:    reset(item);
        -:   90:
        1:   91:    assert_parse_object("{\"hello\":\"world!\"}");
        -:   92://    assert_is_child(item->child, "hello", cJSON_String);
        1:   93:    reset(item);
        -:   94:
        1:   95:    assert_parse_object("{\"array\":[]}");
        -:   96://    assert_is_child(item->child, "array", cJSON_Array);
        1:   97:    reset(item);
        -:   98:
        1:   99:    assert_parse_object("{\"null\":null}");
        -:  100://    assert_is_child(item->child, "null", cJSON_NULL);
        1:  101:    reset(item);
        1:  102:}
------------------
_ZN68CjsonFixture_parse_object_should_parse_objects_with_one_element_TestC1Ev:
        1:   86:TEST(CjsonFixture, parse_object_should_parse_objects_with_one_element){
        1:   86-block  0
------------------
        2:  103:TEST(CjsonFixture, parse_object_should_parse_objects_with_multiple_elements)
        -:  104:{
        1:  105:    assert_parse_object("{\"one\":1\t,\t\"two\"\n:2, \"three\":3}");
        -:  106://    assert_is_child(item->child, "one", cJSON_Number);
        -:  107://    assert_is_child(item->child->next, "two", cJSON_Number);
        -:  108://    assert_is_child(item->child->next->next, "three", cJSON_Number);
        1:  109:    reset(item);
        -:  110:
        -:  111:    {
        1:  112:        size_t i = 0;
        1:  113:        cJSON *node = NULL;
        1:  114:        int expected_types[7] =
        -:  115:                {
        -:  116:                        cJSON_Number,
        -:  117:                        cJSON_NULL,
        -:  118:                        cJSON_True,
        -:  119:                        cJSON_False,
        -:  120:                        cJSON_Array,
        -:  121:                        cJSON_String,
        -:  122:                        cJSON_Object
        -:  123:                };
        1:  124:        const char *expected_names[7] =
        -:  125:                {
        -:  126:                        "one",
        -:  127:                        "NULL",
        -:  128:                        "TRUE",
        -:  129:                        "FALSE",
        -:  130:                        "array",
        -:  131:                        "world",
        -:  132:                        "object"
        -:  133:                };
        1:  134:        assert_parse_object("{\"one\":1, \"NULL\":null, \"TRUE\":true, \"FALSE\":false, \"array\":[], \"world\":\"hello\", \"object\":{}}");
        -:  135:
        1:  136:        node = item->child;
        7:  137:        for (
        1:  138:                i = 0;
        -:  139:                (i < (sizeof(expected_types)/sizeof(int)))
        8:  140:                && (node != NULL);
        7:  141:                (void)i++, node = node->next)
        -:  142:        {
        -:  143://            assert_is_child(node, expected_names[i], expected_types[i]);
        -:  144:        }
        -:  145://        TEST_ASSERT_EQUAL_INT(i, 7);
        1:  146:        reset(item);
        -:  147:    }
        1:  148:}
------------------
_ZN74CjsonFixture_parse_object_should_parse_objects_with_multiple_elements_Test8TestBodyEv:
        1:  103:TEST(CjsonFixture, parse_object_should_parse_objects_with_multiple_elements)
        -:  104:{
        1:  105:    assert_parse_object("{\"one\":1\t,\t\"two\"\n:2, \"three\":3}");
        1:  105-block  0
        -:  106://    assert_is_child(item->child, "one", cJSON_Number);
        -:  107://    assert_is_child(item->child->next, "two", cJSON_Number);
        -:  108://    assert_is_child(item->child->next->next, "three", cJSON_Number);
        1:  109:    reset(item);
        -:  110:
        -:  111:    {
        1:  112:        size_t i = 0;
        1:  113:        cJSON *node = NULL;
        1:  114:        int expected_types[7] =
        -:  115:                {
        -:  116:                        cJSON_Number,
        -:  117:                        cJSON_NULL,
        -:  118:                        cJSON_True,
        -:  119:                        cJSON_False,
        -:  120:                        cJSON_Array,
        -:  121:                        cJSON_String,
        -:  122:                        cJSON_Object
        -:  123:                };
        1:  124:        const char *expected_names[7] =
        -:  125:                {
        -:  126:                        "one",
        -:  127:                        "NULL",
        -:  128:                        "TRUE",
        -:  129:                        "FALSE",
        -:  130:                        "array",
        -:  131:                        "world",
        -:  132:                        "object"
        -:  133:                };
        1:  134:        assert_parse_object("{\"one\":1, \"NULL\":null, \"TRUE\":true, \"FALSE\":false, \"array\":[], \"world\":\"hello\", \"object\":{}}");
        -:  135:
        1:  136:        node = item->child;
        7:  137:        for (
        1:  138:                i = 0;
        1:  138-block  0
        -:  139:                (i < (sizeof(expected_types)/sizeof(int)))
        8:  140:                && (node != NULL);
        8:  140-block  0
        7:  140-block  1
        7:  141:                (void)i++, node = node->next)
        7:  141-block  0
        -:  142:        {
        -:  143://            assert_is_child(node, expected_names[i], expected_types[i]);
        -:  144:        }
        -:  145://        TEST_ASSERT_EQUAL_INT(i, 7);
        1:  146:        reset(item);
        1:  146-block  0
        -:  147:    }
        1:  148:}
        1:  148-block  0
------------------
_ZN74CjsonFixture_parse_object_should_parse_objects_with_multiple_elements_TestC1Ev:
        1:  103:TEST(CjsonFixture, parse_object_should_parse_objects_with_multiple_elements)
        1:  103-block  0
------------------
        -:  149://
        8:  150:static void assert_parse_array(const char *json)
        -:  151:{
        8:  152:    parse_buffer buffer = { 0, 0, 0, 0, { 0, 0, 0 } };
        8:  153:    buffer.content = (const unsigned char*)json;
        8:  154:    buffer.length = strlen(json) + sizeof("");
        8:  155:    buffer.hooks = global_hooks;
        -:  156:
       8*:  157:    ASSERT_TRUE(parse_array(item, &buffer));
        8:  157-block  0
        8:  157-block  1
    %%%%%:  157-block  2
    %%%%%:  157-block  3
    %%%%%:  157-block  4
    %%%%%:  157-block  5
    %%%%%:  157-block  6
    $$$$$:  157-block  7
    $$$$$:  157-block  8
    $$$$$:  157-block  9
    $$$$$:  157-block 10
    $$$$$:  157-block 11
    $$$$$:  157-block 12
    $$$$$:  157-block 13
        8:  158:    buffer.depth=CJSON_NESTING_LIMIT;
        8:  159:    parse_array(item, &buffer);
        8:  159-block  0
        -:  160://    assert_is_array(item);
        -:  161:}
        -:  162:
        2:  163:TEST(CjsonFixture, parse_array_should_parse_empty_arrays)
        -:  164://static void parse_array_should_parse_empty_arrays(void)
        -:  165:{
        1:  166:    assert_parse_array("[]");
        -:  167://    assert_has_no_child(item);
        -:  168:
        1:  169:    assert_parse_array("[\n\t]");
        -:  170://    assert_has_no_child(item);
        1:  171:}
------------------
_ZN55CjsonFixture_parse_array_should_parse_empty_arrays_Test8TestBodyEv:
        1:  163:TEST(CjsonFixture, parse_array_should_parse_empty_arrays)
        -:  164://static void parse_array_should_parse_empty_arrays(void)
        -:  165:{
        1:  166:    assert_parse_array("[]");
        1:  166-block  0
        -:  167://    assert_has_no_child(item);
        -:  168:
        1:  169:    assert_parse_array("[\n\t]");
        -:  170://    assert_has_no_child(item);
        1:  171:}
------------------
_ZN55CjsonFixture_parse_array_should_parse_empty_arrays_TestC1Ev:
        1:  163:TEST(CjsonFixture, parse_array_should_parse_empty_arrays)
        1:  163-block  0
------------------
        2:  172:TEST(CjsonFixture, parse_array_should_parse_arrays_with_one_element)
        -:  173:{
        -:  174:
        1:  175:    assert_parse_array("[1]");
        -:  176://    assert_has_child(item);
        1:  177:    assert_has_type(item->child, cJSON_Number);
        1:  178:    reset(item);
        -:  179:
        1:  180:    assert_parse_array("[\"hello!\"]");
        -:  181://    assert_has_child(item);
        1:  182:    assert_has_type(item->child, cJSON_String);
       1*:  183:    ASSERT_STREQ("hello!", item->child->valuestring);
        1:  184:    reset(item);
        -:  185:
        1:  186:    assert_parse_array("[[]]");
        -:  187://    assert_has_child(item);
        -:  188://    assert_is_array(item->child);
        -:  189://    assert_has_no_child(item->child);
        1:  190:    reset(item);
        -:  191:
        1:  192:    assert_parse_array("[null]");
        -:  193://    assert_has_child(item);
        1:  194:    assert_has_type(item->child, cJSON_NULL);
        1:  195:    reset(item);
        -:  196:}
------------------
_ZN66CjsonFixture_parse_array_should_parse_arrays_with_one_element_Test8TestBodyEv:
        1:  172:TEST(CjsonFixture, parse_array_should_parse_arrays_with_one_element)
        -:  173:{
        -:  174:
        1:  175:    assert_parse_array("[1]");
        1:  175-block  0
        -:  176://    assert_has_child(item);
        1:  177:    assert_has_type(item->child, cJSON_Number);
        1:  178:    reset(item);
        -:  179:
        1:  180:    assert_parse_array("[\"hello!\"]");
        -:  181://    assert_has_child(item);
        1:  182:    assert_has_type(item->child, cJSON_String);
       1*:  183:    ASSERT_STREQ("hello!", item->child->valuestring);
        1:  183-block  0
    %%%%%:  183-block  1
    %%%%%:  183-block  2
    %%%%%:  183-block  3
    %%%%%:  183-block  4
    $$$$$:  183-block  5
    $$$$$:  183-block  6
    $$$$$:  183-block  7
    $$$$$:  183-block  8
    $$$$$:  183-block  9
        1:  184:    reset(item);
        1:  184-block  0
        -:  185:
        1:  186:    assert_parse_array("[[]]");
        -:  187://    assert_has_child(item);
        -:  188://    assert_is_array(item->child);
        -:  189://    assert_has_no_child(item->child);
        1:  190:    reset(item);
        -:  191:
        1:  192:    assert_parse_array("[null]");
        -:  193://    assert_has_child(item);
        1:  194:    assert_has_type(item->child, cJSON_NULL);
        1:  195:    reset(item);
        -:  196:}
------------------
_ZN66CjsonFixture_parse_array_should_parse_arrays_with_one_element_TestC1Ev:
        1:  172:TEST(CjsonFixture, parse_array_should_parse_arrays_with_one_element)
        1:  172-block  0
------------------
        2:  197:TEST(CjsonFixture, parse_array_should_parse_arrays_with_multiple_elements)
        -:  198:{
        1:  199:    assert_parse_array("[1\t,\n2, 3]");
        -:  200://    assert_has_child(item);
        -:  201://    TEST_ASSERT_NOT_NULL(item->child->next);
        -:  202://    TEST_ASSERT_NOT_NULL(item->child->next->next);
        -:  203://    TEST_ASSERT_NULL(item->child->next->next->next);
        1:  204:    assert_has_type(item->child, cJSON_Number);
        1:  205:    assert_has_type(item->child->next, cJSON_Number);
        1:  206:    assert_has_type(item->child->next->next, cJSON_Number);
        1:  207:    reset(item);
        -:  208:
        -:  209:    {
        1:  210:        size_t i = 0;
        1:  211:        cJSON *node = NULL;
        1:  212:        int expected_types[7] =
        -:  213:                {
        -:  214:                        cJSON_Number,
        -:  215:                        cJSON_NULL,
        -:  216:                        cJSON_True,
        -:  217:                        cJSON_False,
        -:  218:                        cJSON_Array,
        -:  219:                        cJSON_String,
        -:  220:                        cJSON_Object
        -:  221:                };
        1:  222:        assert_parse_array("[1, null, true, false, [], \"hello\", {}]");
        -:  223:
        1:  224:        node = item->child;
        7:  225:        for (
        1:  226:                i = 0;
        -:  227:                (i < (sizeof(expected_types)/sizeof(int)))
        8:  228:                && (node != NULL);
        7:  229:                (void)i++, node = node->next)
        -:  230:        {
        -:  231://            TEST_ASSERT_BITS(0xFF, expected_types[i], node->type);
        -:  232:        }
        -:  233://        TEST_ASSERT_EQUAL_INT(i, 7);
        1:  234:        reset(item);
        -:  235:    }
        1:  236:}
------------------
_ZN72CjsonFixture_parse_array_should_parse_arrays_with_multiple_elements_Test8TestBodyEv:
        1:  197:TEST(CjsonFixture, parse_array_should_parse_arrays_with_multiple_elements)
        -:  198:{
        1:  199:    assert_parse_array("[1\t,\n2, 3]");
        1:  199-block  0
        -:  200://    assert_has_child(item);
        -:  201://    TEST_ASSERT_NOT_NULL(item->child->next);
        -:  202://    TEST_ASSERT_NOT_NULL(item->child->next->next);
        -:  203://    TEST_ASSERT_NULL(item->child->next->next->next);
        1:  204:    assert_has_type(item->child, cJSON_Number);
        1:  205:    assert_has_type(item->child->next, cJSON_Number);
        1:  206:    assert_has_type(item->child->next->next, cJSON_Number);
        1:  207:    reset(item);
        -:  208:
        -:  209:    {
        1:  210:        size_t i = 0;
        1:  211:        cJSON *node = NULL;
        1:  212:        int expected_types[7] =
        -:  213:                {
        -:  214:                        cJSON_Number,
        -:  215:                        cJSON_NULL,
        -:  216:                        cJSON_True,
        -:  217:                        cJSON_False,
        -:  218:                        cJSON_Array,
        -:  219:                        cJSON_String,
        -:  220:                        cJSON_Object
        -:  221:                };
        1:  222:        assert_parse_array("[1, null, true, false, [], \"hello\", {}]");
        -:  223:
        1:  224:        node = item->child;
        7:  225:        for (
        1:  226:                i = 0;
        1:  226-block  0
        -:  227:                (i < (sizeof(expected_types)/sizeof(int)))
        8:  228:                && (node != NULL);
        8:  228-block  0
        7:  228-block  1
        7:  229:                (void)i++, node = node->next)
        7:  229-block  0
        -:  230:        {
        -:  231://            TEST_ASSERT_BITS(0xFF, expected_types[i], node->type);
        -:  232:        }
        -:  233://        TEST_ASSERT_EQUAL_INT(i, 7);
        1:  234:        reset(item);
        1:  234-block  0
        -:  235:    }
        1:  236:}
        1:  236-block  0
------------------
_ZN72CjsonFixture_parse_array_should_parse_arrays_with_multiple_elements_TestC1Ev:
        1:  197:TEST(CjsonFixture, parse_array_should_parse_arrays_with_multiple_elements)
        1:  197-block  0
------------------
        -:  237:
        7:  238:static void assert_not_array(const char *json)
        -:  239:{
        7:  240:    parse_buffer buffer = { 0, 0, 0, 0, { 0, 0, 0 } };
        7:  241:    buffer.content = (const unsigned char*)json;
        7:  242:    buffer.length = strlen(json) + sizeof("");
        7:  243:    buffer.hooks = global_hooks;
        -:  244:
       7*:  245:    ASSERT_FALSE(parse_array(item, &buffer));
        7:  245-block  0
        7:  245-block  1
    %%%%%:  245-block  2
    %%%%%:  245-block  3
    %%%%%:  245-block  4
    %%%%%:  245-block  5
    %%%%%:  245-block  6
    $$$$$:  245-block  7
    $$$$$:  245-block  8
    $$$$$:  245-block  9
    $$$$$:  245-block 10
    $$$$$:  245-block 11
    $$$$$:  245-block 12
    $$$$$:  245-block 13
        -:  246:}
        2:  247:TEST(CjsonFixture, parse_not_array){
        1:  248:    assert_not_array("");
        1:  249:    assert_not_array("[");
        1:  250:    assert_not_array("]");
        1:  251:    assert_not_array("{\"hello\":[]}");
        1:  252:    assert_not_array("42");
        1:  253:    assert_not_array("3.14");
        1:  254:    assert_not_array("\"[]hello world!\n\"");
        1:  255:}
------------------
_ZN33CjsonFixture_parse_not_array_Test8TestBodyEv:
        1:  247:TEST(CjsonFixture, parse_not_array){
        1:  248:    assert_not_array("");
        1:  248-block  0
        1:  249:    assert_not_array("[");
        1:  250:    assert_not_array("]");
        1:  251:    assert_not_array("{\"hello\":[]}");
        1:  252:    assert_not_array("42");
        1:  253:    assert_not_array("3.14");
        1:  254:    assert_not_array("\"[]hello world!\n\"");
        1:  255:}
------------------
_ZN33CjsonFixture_parse_not_array_TestC1Ev:
        1:  247:TEST(CjsonFixture, parse_not_array){
        1:  247-block  0
------------------
        -:  256://
       18:  257:static void assert_parse_number(const char *string, int integer, double real)
        -:  258:{
       18:  259:    parse_number(item, NULL);
       18:  259-block  0
       18:  260:    parse_buffer buffer = { 0, 0, 0, 0, { 0, 0, 0 } };
       18:  261:    parse_number(item, &buffer);
       18:  262:    buffer.content = (const unsigned char*)string;
       18:  263:    buffer.length = strlen(string) + sizeof("");
        -:  264:
      18*:  265:    ASSERT_TRUE(parse_number(item, &buffer));
    %%%%%:  265-block  0
    %%%%%:  265-block  1
    %%%%%:  265-block  2
    %%%%%:  265-block  3
    %%%%%:  265-block  4
    $$$$$:  265-block  5
    $$$$$:  265-block  6
    $$$$$:  265-block  7
    $$$$$:  265-block  8
    $$$$$:  265-block  9
    $$$$$:  265-block 10
    $$$$$:  265-block 11
        -:  266://    assert_is_number(item);
      18*:  267:    ASSERT_EQ(integer, item->valueint);
       18:  267-block  0
       18:  267-block  1
    %%%%%:  267-block  2
    %%%%%:  267-block  3
    %%%%%:  267-block  4
    %%%%%:  267-block  5
    $$$$$:  267-block  6
    $$$$$:  267-block  7
    $$$$$:  267-block  8
    $$$$$:  267-block  9
    $$$$$:  267-block 10
      18*:  268:    ASSERT_DOUBLE_EQ(real, item->valuedouble);
       18:  268-block  0
       18:  268-block  1
    %%%%%:  268-block  2
    %%%%%:  268-block  3
    %%%%%:  268-block  4
    %%%%%:  268-block  5
    $$$$$:  268-block  6
    $$$$$:  268-block  7
    $$$$$:  268-block  8
    $$$$$:  268-block  9
    $$$$$:  268-block 10
        -:  269:}
        -:  270:
        2:  271:TEST(CjsonFixture, buffer_skip_whitespace){
        1:  272:    buffer_skip_whitespace(NULL);
        1:  273:    skip_utf8_bom(NULL);
        -:  274:    unsigned char printed[1024];
        -:  275:    cJSON item[1];
        1:  276:    printbuffer buffer = { 0, 0, 0, 0, 0, 0, { 0, 0, 0 } };
        1:  277:    parse_buffer parsebuffer = { 0, 0, 0, 0, { 0, 0, 0 } };
        1:  278:    buffer.buffer = printed;
        1:  279:    buffer.length = sizeof(printed);
        1:  280:    skip_utf8_bom(&parsebuffer);
        1:  281:    parsebuffer.offset=1;
        1:  282:    skip_utf8_bom(&parsebuffer);
        1:  283:    buffer_skip_whitespace(&parsebuffer);
        1:  284:}
------------------
_ZN40CjsonFixture_buffer_skip_whitespace_Test8TestBodyEv:
        1:  271:TEST(CjsonFixture, buffer_skip_whitespace){
        1:  272:    buffer_skip_whitespace(NULL);
        1:  272-block  0
        1:  273:    skip_utf8_bom(NULL);
        -:  274:    unsigned char printed[1024];
        -:  275:    cJSON item[1];
        1:  276:    printbuffer buffer = { 0, 0, 0, 0, 0, 0, { 0, 0, 0 } };
        1:  277:    parse_buffer parsebuffer = { 0, 0, 0, 0, { 0, 0, 0 } };
        1:  278:    buffer.buffer = printed;
        1:  279:    buffer.length = sizeof(printed);
        1:  280:    skip_utf8_bom(&parsebuffer);
        1:  281:    parsebuffer.offset=1;
        1:  282:    skip_utf8_bom(&parsebuffer);
        1:  283:    buffer_skip_whitespace(&parsebuffer);
        1:  284:}
------------------
_ZN40CjsonFixture_buffer_skip_whitespace_TestC1Ev:
        1:  271:TEST(CjsonFixture, buffer_skip_whitespace){
        1:  271-block  0
------------------
        2:  285:TEST(CjsonFixture, parse_number_should_parse_zero)
        -:  286:{
        1:  287:    assert_parse_number("0", 0, 0);
        1:  288:    assert_parse_number("0.0", 0, 0.0);
        1:  289:    assert_parse_number("-0", 0, -0.0);
        1:  290:}
------------------
_ZN48CjsonFixture_parse_number_should_parse_zero_Test8TestBodyEv:
        1:  285:TEST(CjsonFixture, parse_number_should_parse_zero)
        -:  286:{
        1:  287:    assert_parse_number("0", 0, 0);
        1:  287-block  0
        1:  288:    assert_parse_number("0.0", 0, 0.0);
        1:  289:    assert_parse_number("-0", 0, -0.0);
        1:  290:}
------------------
_ZN48CjsonFixture_parse_number_should_parse_zero_TestC1Ev:
        1:  285:TEST(CjsonFixture, parse_number_should_parse_zero)
        1:  285-block  0
------------------
        -:  291:
        2:  292:TEST(CjsonFixture, parse_number_should_parse_negative_integers)
        -:  293:{
        1:  294:    assert_parse_number("-1", -1, -1);
        1:  295:    assert_parse_number("-32768", -32768, -32768.0);
        1:  296:    assert_parse_number("-2147483648", (int)-2147483648.0, -2147483648.0);
        1:  297:}
------------------
_ZN61CjsonFixture_parse_number_should_parse_negative_integers_Test8TestBodyEv:
        1:  292:TEST(CjsonFixture, parse_number_should_parse_negative_integers)
        -:  293:{
        1:  294:    assert_parse_number("-1", -1, -1);
        1:  294-block  0
        1:  295:    assert_parse_number("-32768", -32768, -32768.0);
        1:  296:    assert_parse_number("-2147483648", (int)-2147483648.0, -2147483648.0);
        1:  297:}
------------------
_ZN61CjsonFixture_parse_number_should_parse_negative_integers_TestC1Ev:
        1:  292:TEST(CjsonFixture, parse_number_should_parse_negative_integers)
        1:  292-block  0
------------------
        -:  298:
    #####:  299:static void parse_number_should_parse_positive_integers(void)
        -:  300:{
    #####:  301:    assert_parse_number("1", 1, 1);
    %%%%%:  301-block  0
    #####:  302:    assert_parse_number("32767", 32767, 32767.0);
    #####:  303:    assert_parse_number("2147483647", (int)2147483647.0, 2147483647.0);
    #####:  304:}
        2:  305:TEST(CjsonFixture, parse_number_should_parse_positive_reals)
        -:  306:{
        1:  307:    assert_parse_number("0.001", 0, 0.001);
        1:  308:    assert_parse_number("10e-10", 0, 10e-10);
        1:  309:    assert_parse_number("10E-10", 0, 10e-10);
        1:  310:    assert_parse_number("10e10", INT_MAX, 10e10);
        1:  311:    assert_parse_number("123e+127", INT_MAX, 123e127);
        1:  312:    assert_parse_number("123e-128", 0, 123e-128);
        1:  313:}
------------------
_ZN58CjsonFixture_parse_number_should_parse_positive_reals_Test8TestBodyEv:
        1:  305:TEST(CjsonFixture, parse_number_should_parse_positive_reals)
        -:  306:{
        1:  307:    assert_parse_number("0.001", 0, 0.001);
        1:  307-block  0
        1:  308:    assert_parse_number("10e-10", 0, 10e-10);
        1:  309:    assert_parse_number("10E-10", 0, 10e-10);
        1:  310:    assert_parse_number("10e10", INT_MAX, 10e10);
        1:  311:    assert_parse_number("123e+127", INT_MAX, 123e127);
        1:  312:    assert_parse_number("123e-128", 0, 123e-128);
        1:  313:}
------------------
_ZN58CjsonFixture_parse_number_should_parse_positive_reals_TestC1Ev:
        1:  305:TEST(CjsonFixture, parse_number_should_parse_positive_reals)
        1:  305-block  0
------------------
        2:  314:TEST(CjsonFixture, parse_number_should_parse_negative_reals)
        -:  315:{
        1:  316:    assert_parse_number("-0.001", 0, -0.001);
        1:  317:    assert_parse_number("-10e-10", 0, -10e-10);
        1:  318:    assert_parse_number("-10E-10", 0, -10e-10);
        1:  319:    assert_parse_number("-10e20", INT_MIN, -10e20);
        1:  320:    assert_parse_number("-123e+127", INT_MIN, -123e127);
        1:  321:    assert_parse_number("-123e-128", 0, -123e-128);
        1:  322:}
------------------
_ZN58CjsonFixture_parse_number_should_parse_negative_reals_Test8TestBodyEv:
        1:  314:TEST(CjsonFixture, parse_number_should_parse_negative_reals)
        -:  315:{
        1:  316:    assert_parse_number("-0.001", 0, -0.001);
        1:  316-block  0
        1:  317:    assert_parse_number("-10e-10", 0, -10e-10);
        1:  318:    assert_parse_number("-10E-10", 0, -10e-10);
        1:  319:    assert_parse_number("-10e20", INT_MIN, -10e20);
        1:  320:    assert_parse_number("-123e+127", INT_MIN, -123e127);
        1:  321:    assert_parse_number("-123e-128", 0, -123e-128);
        1:  322:}
------------------
_ZN58CjsonFixture_parse_number_should_parse_negative_reals_TestC1Ev:
        1:  314:TEST(CjsonFixture, parse_number_should_parse_negative_reals)
        1:  314-block  0
------------------
        -:  323://
        8:  324:static void assert_parse_value(const char *string, int type)
        -:  325:{
        8:  326:    parse_value(item, NULL);
        8:  326-block  0
        8:  327:    parse_buffer buffer = { 0, 0, 0, 0, { 0, 0, 0 } };
        8:  328:    parse_value(item, &buffer);
        8:  328-block  0
        8:  329:    buffer.content = (const unsigned char*) string;
        8:  330:    buffer.length = strlen(string) + sizeof("");
        8:  331:    buffer.hooks = global_hooks;
        -:  332:
        8:  333:    parse_value(item, &buffer);
        8:  333-block  0
        -:  334://    TEST_ASSERT_TRUE(parse_value(item, &buffer));
        -:  335://    assert_is_value(item, type);
        8:  336:}
        8:  336-block  0
        -:  337:
        2:  338:TEST(CjsonFixture, parse_value)
        -:  339:{
        1:  340:    assert_parse_value("null", cJSON_NULL);
        1:  341:    reset(item);
        -:  342:
        1:  343:    assert_parse_value("true", cJSON_True);
        1:  344:    reset(item);
        -:  345:
        1:  346:    assert_parse_value("false", cJSON_False);
        1:  347:    reset(item);
        -:  348:
        1:  349:    assert_parse_value("1.5", cJSON_Number);
        1:  350:    reset(item);
        -:  351:
        1:  352:    assert_parse_value("\"\"", cJSON_String);
        1:  353:    reset(item);
        1:  354:    assert_parse_value("\"hello\"", cJSON_String);
        1:  355:    reset(item);
        -:  356:
        1:  357:    assert_parse_value("[]", cJSON_Array);
        1:  358:    reset(item);
        -:  359:
        1:  360:    assert_parse_value("{}", cJSON_Object);
        1:  361:    reset(item);
        -:  362:
        -:  363:
        1:  364:}
------------------
_ZN29CjsonFixture_parse_value_Test8TestBodyEv:
        1:  338:TEST(CjsonFixture, parse_value)
        -:  339:{
        1:  340:    assert_parse_value("null", cJSON_NULL);
        1:  340-block  0
        1:  341:    reset(item);
        -:  342:
        1:  343:    assert_parse_value("true", cJSON_True);
        1:  344:    reset(item);
        -:  345:
        1:  346:    assert_parse_value("false", cJSON_False);
        1:  347:    reset(item);
        -:  348:
        1:  349:    assert_parse_value("1.5", cJSON_Number);
        1:  350:    reset(item);
        -:  351:
        1:  352:    assert_parse_value("\"\"", cJSON_String);
        1:  353:    reset(item);
        1:  354:    assert_parse_value("\"hello\"", cJSON_String);
        1:  355:    reset(item);
        -:  356:
        1:  357:    assert_parse_value("[]", cJSON_Array);
        1:  358:    reset(item);
        -:  359:
        1:  360:    assert_parse_value("{}", cJSON_Object);
        1:  361:    reset(item);
        -:  362:
        -:  363:
        1:  364:}
------------------
_ZN29CjsonFixture_parse_value_TestC1Ev:
        1:  338:TEST(CjsonFixture, parse_value)
        1:  338-block  0
------------------
        -:  365://
        -:  366://static void assert_case_insensitive_strcmp(const unsigned char *string1, const unsigned char *string2,int integer)
        -:  367://{
        -:  368://    ASSERT_EQ(integer,case_insensitive_strcmp(string1,string2));
        -:  369://}
        -:  370://TEST(CjsonFixture, case_insensitive_strcmp)
        -:  371://{
        -:  372://    assert_case_insensitive_strcmp(NULL,NULL,1);
        -:  373://
        -:  374://}
        -:  375://
        1:  376:static void assert_cJSON_GetErrorPtr()
        -:  377:{
        1:  378:    cJSON_GetErrorPtr();
        1:  378-block  0
        1:  379:}
        -:  380://
        2:  381:TEST(CjsonFixture, assert_cJSON_GetErrorPtr)
        -:  382:{
        1:  383:    assert_cJSON_GetErrorPtr();
        1:  384:}
------------------
_ZN42CjsonFixture_assert_cJSON_GetErrorPtr_Test8TestBodyEv:
        1:  381:TEST(CjsonFixture, assert_cJSON_GetErrorPtr)
        -:  382:{
        1:  383:    assert_cJSON_GetErrorPtr();
        1:  383-block  0
        1:  384:}
------------------
_ZN42CjsonFixture_assert_cJSON_GetErrorPtr_TestC1Ev:
        1:  381:TEST(CjsonFixture, assert_cJSON_GetErrorPtr)
        1:  381-block  0
------------------
        -:  385://
        -:  386://
        -:  387://
        1:  388:static void assert_cJSON_Version()
        -:  389:{
        1:  390:    cJSON_Version();
        1:  390-block  0
        1:  391:}
        -:  392:
        2:  393:TEST(CjsonFixture, assert_cJSON_Version)
        -:  394:{
        1:  395:    assert_cJSON_Version();
        1:  396:}
------------------
_ZN38CjsonFixture_assert_cJSON_Version_Test8TestBodyEv:
        1:  393:TEST(CjsonFixture, assert_cJSON_Version)
        -:  394:{
        1:  395:    assert_cJSON_Version();
        1:  395-block  0
        1:  396:}
------------------
_ZN38CjsonFixture_assert_cJSON_Version_TestC1Ev:
        1:  393:TEST(CjsonFixture, assert_cJSON_Version)
        1:  393-block  0
------------------
        -:  397://
        -:  398://static void assert_cJSON_strdup()
        -:  399://{
        -:  400://    cJSON_strdup((const unsigned char*)"number", &global_hooks);
        -:  401://}
        -:  402://TEST(CjsonFixture, assert_cJSON_strdup)
        -:  403://{
        -:  404://    assert_cJSON_strdup();
        -:  405://}
        -:  406://
        -:  407://
        -:  408://
        -:  409:
        -:  410://
        -:  411:////测试出问题
        3:  412:static void assert_cJSON_SetNumberHelper(cJSON *object, double number)
        -:  413:{
        3:  414:    cJSON_SetNumberHelper(object, number);
        3:  414-block  0
        3:  415:}
        2:  416:TEST(CjsonFixture, assert_cJSON_SetNumberHelper)
        -:  417:{
        1:  418:    cJSON *object = cJSON_CreateObject();
        1:  419:    assert_cJSON_SetNumberHelper(object,0);
        1:  420:    assert_cJSON_SetNumberHelper(object,INT_MAX);
        1:  421:    assert_cJSON_SetNumberHelper(object,(double)INT_MIN);
        1:  422:}
------------------
_ZN46CjsonFixture_assert_cJSON_SetNumberHelper_Test8TestBodyEv:
        1:  416:TEST(CjsonFixture, assert_cJSON_SetNumberHelper)
        -:  417:{
        1:  418:    cJSON *object = cJSON_CreateObject();
        1:  418-block  0
        1:  419:    assert_cJSON_SetNumberHelper(object,0);
        1:  420:    assert_cJSON_SetNumberHelper(object,INT_MAX);
        1:  421:    assert_cJSON_SetNumberHelper(object,(double)INT_MIN);
        1:  422:}
------------------
_ZN46CjsonFixture_assert_cJSON_SetNumberHelper_TestC1Ev:
        1:  416:TEST(CjsonFixture, assert_cJSON_SetNumberHelper)
        1:  416-block  0
------------------
        -:  423://
        -:  424://
        -:  425://
        -:  426://
        2:  427:static void * CJSON_CDECL failing_realloc(void *pointer, size_t size)
        -:  428:{
        -:  429:    (void)size;
        -:  430:    (void)pointer;
        2:  431:    return NULL;
        2:  431-block  0
        -:  432:}
    #####:  433:static void assert_ensure(printbuffer * const p, size_t needed)
        -:  434:{
    #####:  435:    ensure(p,needed);
    %%%%%:  435-block  0
    #####:  436:}
        2:  437:TEST(CjsonFixture, assert_ensure)
        -:  438:{
        -:  439:
        -:  440:
        1:  441:    printbuffer buffer = {NULL, 10, 0, 0, false, false, {&malloc, &free, &failing_realloc}};
        1:  442:    ensure(&buffer, 200);
        1:  443:    buffer.buffer = (unsigned char*)malloc(100);
        -:  444://    ensure(&buffer, 200);
        1:  445:    long long need= INT_MAX;
        1:  446:    need=need+1;
       1*:  447:    ASSERT_TRUE(need>INT_MAX);
        -:  448://
       1*:  449:    ASSERT_FALSE(ensure(&buffer,need));
        1:  450:    ensure(&buffer,INT_MAX/2 +1);
        -:  451:
        -:  452://    ensure(output_buffer, (size_t)length + sizeof(""));
        -:  453:
        -:  454://    printbuffer *buffer1;
        -:  455://    buffer1->buffer = NULL;
        -:  456://    buffer1->length = 10;
        -:  457://    buffer1->hooks.reallocate = NULL;
        -:  458://    ensure(buffer1, 200);
        -:  459:}
------------------
_ZN31CjsonFixture_assert_ensure_Test8TestBodyEv:
        1:  437:TEST(CjsonFixture, assert_ensure)
        -:  438:{
        -:  439:
        -:  440:
        1:  441:    printbuffer buffer = {NULL, 10, 0, 0, false, false, {&malloc, &free, &failing_realloc}};
        1:  442:    ensure(&buffer, 200);
        1:  442-block  0
        1:  443:    buffer.buffer = (unsigned char*)malloc(100);
        -:  444://    ensure(&buffer, 200);
        1:  445:    long long need= INT_MAX;
        1:  446:    need=need+1;
       1*:  447:    ASSERT_TRUE(need>INT_MAX);
        1:  447-block  0
    %%%%%:  447-block  1
    %%%%%:  447-block  2
    %%%%%:  447-block  3
    %%%%%:  447-block  4
    %%%%%:  447-block  5
    $$$$$:  447-block  6
    $$$$$:  447-block  7
    $$$$$:  447-block  8
    $$$$$:  447-block  9
    $$$$$:  447-block 10
    $$$$$:  447-block 11
    $$$$$:  447-block 12
        -:  448://
       1*:  449:    ASSERT_FALSE(ensure(&buffer,need));
        1:  449-block  0
        1:  449-block  1
    %%%%%:  449-block  2
    %%%%%:  449-block  3
    %%%%%:  449-block  4
    %%%%%:  449-block  5
    %%%%%:  449-block  6
    $$$$$:  449-block  7
    $$$$$:  449-block  8
    $$$$$:  449-block  9
    $$$$$:  449-block 10
    $$$$$:  449-block 11
    $$$$$:  449-block 12
    $$$$$:  449-block 13
        1:  450:    ensure(&buffer,INT_MAX/2 +1);
        1:  450-block  0
        -:  451:
        -:  452://    ensure(output_buffer, (size_t)length + sizeof(""));
        -:  453:
        -:  454://    printbuffer *buffer1;
        -:  455://    buffer1->buffer = NULL;
        -:  456://    buffer1->length = 10;
        -:  457://    buffer1->hooks.reallocate = NULL;
        -:  458://    ensure(buffer1, 200);
        -:  459:}
------------------
_ZN31CjsonFixture_assert_ensure_TestC1Ev:
        1:  437:TEST(CjsonFixture, assert_ensure)
        1:  437-block  0
------------------
        -:  460:
        2:  461:TEST(CjsonFixture2, assert_ensure2){
        1:  462:    printbuffer buffer = {NULL, 10, 0, 0, false, false, {&malloc, &free, &failing_realloc}};
        1:  463:    buffer.buffer = (unsigned char*)malloc(100);
        -:  464:
        1:  465:    buffer.noalloc=1;
        1:  466:    ensure(&buffer, 200);
        1:  467:    ensure(NULL,200);
        1:  468:}
------------------
_ZN33CjsonFixture2_assert_ensure2_Test8TestBodyEv:
        1:  461:TEST(CjsonFixture2, assert_ensure2){
        1:  462:    printbuffer buffer = {NULL, 10, 0, 0, false, false, {&malloc, &free, &failing_realloc}};
        1:  463:    buffer.buffer = (unsigned char*)malloc(100);
        -:  464:
        1:  465:    buffer.noalloc=1;
        1:  466:    ensure(&buffer, 200);
        1:  466-block  0
        1:  467:    ensure(NULL,200);
        1:  467-block  0
        1:  468:}
        1:  468-block  0
------------------
_ZN33CjsonFixture2_assert_ensure2_TestC1Ev:
        1:  461:TEST(CjsonFixture2, assert_ensure2){
        1:  461-block  0
------------------
        -:  469:
        2:  470:TEST(CjsonFixture2, assert_ensure3){
        1:  471:    printbuffer buffer = {NULL, 10, 0, 0, false, false, {&malloc, &free, &failing_realloc}};
        1:  472:    buffer.buffer = (unsigned char*)malloc(100);
        1:  473:    buffer.length=1;
        1:  474:    buffer.offset=2;
        1:  475:    ensure(&buffer, 200);
        1:  476:}
------------------
_ZN33CjsonFixture2_assert_ensure3_Test8TestBodyEv:
        1:  470:TEST(CjsonFixture2, assert_ensure3){
        1:  471:    printbuffer buffer = {NULL, 10, 0, 0, false, false, {&malloc, &free, &failing_realloc}};
        1:  472:    buffer.buffer = (unsigned char*)malloc(100);
        1:  473:    buffer.length=1;
        1:  474:    buffer.offset=2;
        1:  475:    ensure(&buffer, 200);
        1:  475-block  0
        1:  476:}
        1:  476-block  0
------------------
_ZN33CjsonFixture2_assert_ensure3_TestC1Ev:
        1:  470:TEST(CjsonFixture2, assert_ensure3){
        1:  470-block  0
------------------
        2:  477:TEST(CjsonFixture2, assert_ensure4){
        1:  478:    printbuffer buffer = {NULL, 10, 0, 0, false, false, {&malloc, &free, &failing_realloc}};
        1:  479:    buffer.buffer = (unsigned char*)malloc(100);
        -:  480:
        1:  481:    ensure(&buffer,INT_MAX/2 -1);
        1:  482:    ensure(&buffer,INT_MAX);
        1:  483:}
------------------
_ZN33CjsonFixture2_assert_ensure4_Test8TestBodyEv:
        1:  477:TEST(CjsonFixture2, assert_ensure4){
        1:  478:    printbuffer buffer = {NULL, 10, 0, 0, false, false, {&malloc, &free, &failing_realloc}};
        1:  479:    buffer.buffer = (unsigned char*)malloc(100);
        -:  480:
        1:  481:    ensure(&buffer,INT_MAX/2 -1);
        1:  481-block  0
        1:  482:    ensure(&buffer,INT_MAX);
        1:  482-block  0
        1:  483:}
        1:  483-block  0
------------------
_ZN33CjsonFixture2_assert_ensure4_TestC1Ev:
        1:  477:TEST(CjsonFixture2, assert_ensure4){
        1:  477-block  0
------------------
        -:  484:
        -:  485:
        2:  486:TEST(CjsonFixture2, assert_ensure5){
        1:  487:    printbuffer buffer = {NULL, 10, 0, 0, false, false, {&malloc, &free, &failing_realloc}};
        1:  488:    buffer.buffer = (unsigned char*)malloc(100);
        1:  489:    buffer.length=-1;
        -:  490://    buffer.offset=2;
        1:  491:    ensure(&buffer, 200);
        1:  492:}
------------------
_ZN33CjsonFixture2_assert_ensure5_Test8TestBodyEv:
        1:  486:TEST(CjsonFixture2, assert_ensure5){
        1:  487:    printbuffer buffer = {NULL, 10, 0, 0, false, false, {&malloc, &free, &failing_realloc}};
        1:  488:    buffer.buffer = (unsigned char*)malloc(100);
        1:  489:    buffer.length=-1;
        -:  490://    buffer.offset=2;
        1:  491:    ensure(&buffer, 200);
        1:  491-block  0
        1:  492:}
        1:  492-block  0
------------------
_ZN33CjsonFixture2_assert_ensure5_TestC1Ev:
        1:  486:TEST(CjsonFixture2, assert_ensure5){
        1:  486-block  0
------------------
        -:  493:
        2:  494:TEST(CjsonFixture2, assert_ensure6){
        1:  495:    printbuffer buffer = {NULL, 10, 0, 0, false, false, {&malloc, &free, &failing_realloc}};
        1:  496:    buffer.buffer = (unsigned char*)malloc(100);
        1:  497:    buffer.hooks.reallocate=NULL;
        1:  498:    ensure(&buffer, 200);
        1:  499:}
------------------
_ZN33CjsonFixture2_assert_ensure6_Test8TestBodyEv:
        1:  494:TEST(CjsonFixture2, assert_ensure6){
        1:  495:    printbuffer buffer = {NULL, 10, 0, 0, false, false, {&malloc, &free, &failing_realloc}};
        1:  496:    buffer.buffer = (unsigned char*)malloc(100);
        1:  497:    buffer.hooks.reallocate=NULL;
        1:  498:    ensure(&buffer, 200);
        1:  498-block  0
        1:  499:}
        1:  499-block  0
------------------
_ZN33CjsonFixture2_assert_ensure6_TestC1Ev:
        1:  494:TEST(CjsonFixture2, assert_ensure6){
        1:  494-block  0
------------------
        -:  500:
        -:  501://
        3:  502:static void assert_update_offset(printbuffer *buffer)
        -:  503:{
        3:  504:    update_offset(buffer);
        3:  504-block  0
        3:  505:}
        2:  506:TEST(CjsonFixture, assert_update_offset)
        -:  507:{
        1:  508:    printbuffer buffer = {NULL, 10, 0, 0, false, false, {&malloc, &free, &failing_realloc}};
        1:  509:    assert_update_offset(&buffer);
        1:  510:    buffer.buffer = (unsigned char*)malloc(100);
        1:  511:    assert_update_offset(NULL);
        1:  512:    assert_update_offset(&buffer);
        -:  513://    printbuffer *buffer1 ;
        -:  514://    buffer1->length = 10;
        -:  515://
        -:  516://    assert_update_offset(buffer1);
        1:  517:}
------------------
_ZN38CjsonFixture_assert_update_offset_Test8TestBodyEv:
        1:  506:TEST(CjsonFixture, assert_update_offset)
        -:  507:{
        1:  508:    printbuffer buffer = {NULL, 10, 0, 0, false, false, {&malloc, &free, &failing_realloc}};
        1:  509:    assert_update_offset(&buffer);
        1:  509-block  0
        1:  510:    buffer.buffer = (unsigned char*)malloc(100);
        1:  511:    assert_update_offset(NULL);
        1:  512:    assert_update_offset(&buffer);
        -:  513://    printbuffer *buffer1 ;
        -:  514://    buffer1->length = 10;
        -:  515://
        -:  516://    assert_update_offset(buffer1);
        1:  517:}
------------------
_ZN38CjsonFixture_assert_update_offset_TestC1Ev:
        1:  506:TEST(CjsonFixture, assert_update_offset)
        1:  506-block  0
------------------
        -:  518://
        -:  519://
        -:  520://static void assert_compare_double(double a, double b)
        -:  521://{
        -:  522://    compare_double(a,b);
        -:  523://}
        -:  524://TEST(CjsonFixture, assert_compare_double)
        -:  525://{
        -:  526://    assert_compare_double(0.0,2.0);
        -:  527://}
        -:  528://
        -:  529://
        -:  530://
       18:  531:static void assert_print_number(const char *expected, double input)
        -:  532:{
        -:  533:    unsigned char printed[1024];
        -:  534:    unsigned char new_buffer[26];
       18:  535:    unsigned int i = 0;
        -:  536:    cJSON item[1];
       18:  537:    printbuffer buffer = { 0, 0, 0, 0, 0, 0, { 0, 0, 0 } };
       18:  538:    buffer.buffer = printed;
       18:  539:    buffer.length = sizeof(printed);
       18:  540:    buffer.offset = 0;
       18:  541:    buffer.noalloc = true;
       18:  542:    buffer.hooks = global_hooks;
       18:  543:    buffer.buffer = new_buffer;
        -:  544:
       18:  545:    memset(item, 0, sizeof(item));
       18:  546:    memset(new_buffer, 0, sizeof(new_buffer));
       18:  547:    cJSON_SetNumberValue(item, input);
       18:  547-block  0
       18:  548:    print_number(item, &buffer);
       18:  549:    print_number(item, NULL);
       18:  549-block  0
       18:  550:}
       18:  550-block  0
        2:  551:TEST(CjsonFixture, print_number)
        -:  552:{
        1:  553:    assert_print_number("0", 0);
        1:  554:    assert_print_number("-1", -1.0);
        1:  555:    assert_print_number("-32768", -32768.0);
        1:  556:    assert_print_number("-2147483648", -2147483648.0);
        1:  557:    assert_print_number("1", 1.0);
        1:  558:    assert_print_number("32767", 32767.0);
        1:  559:    assert_print_number("2147483647", 2147483647.0);
        1:  560:    assert_print_number("0.123", 0.123);
        1:  561:    assert_print_number("1e-09", 10e-10);
        1:  562:    assert_print_number("1000000000000", 10e11);
        1:  563:    assert_print_number("1.23e+129", 123e+127);
        1:  564:    assert_print_number("1.23e-126", 123e-128);
        1:  565:    assert_print_number("3.1415926535897931", 3.1415926535897931);
        1:  566:    assert_print_number("-0.0123", -0.0123);
        1:  567:    assert_print_number("-1e-09", -10e-10);
        1:  568:    assert_print_number("-1e+21", -10e20);
        1:  569:    assert_print_number("-1.23e+129", -123e+127);
        1:  570:    assert_print_number("-1.23e-126", -123e-128);
        1:  571:}
------------------
_ZN30CjsonFixture_print_number_Test8TestBodyEv:
        1:  551:TEST(CjsonFixture, print_number)
        -:  552:{
        1:  553:    assert_print_number("0", 0);
        1:  553-block  0
        1:  554:    assert_print_number("-1", -1.0);
        1:  555:    assert_print_number("-32768", -32768.0);
        1:  556:    assert_print_number("-2147483648", -2147483648.0);
        1:  557:    assert_print_number("1", 1.0);
        1:  558:    assert_print_number("32767", 32767.0);
        1:  559:    assert_print_number("2147483647", 2147483647.0);
        1:  560:    assert_print_number("0.123", 0.123);
        1:  561:    assert_print_number("1e-09", 10e-10);
        1:  562:    assert_print_number("1000000000000", 10e11);
        1:  563:    assert_print_number("1.23e+129", 123e+127);
        1:  564:    assert_print_number("1.23e-126", 123e-128);
        1:  565:    assert_print_number("3.1415926535897931", 3.1415926535897931);
        1:  566:    assert_print_number("-0.0123", -0.0123);
        1:  567:    assert_print_number("-1e-09", -10e-10);
        1:  568:    assert_print_number("-1e+21", -10e20);
        1:  569:    assert_print_number("-1.23e+129", -123e+127);
        1:  570:    assert_print_number("-1.23e-126", -123e-128);
        1:  571:}
------------------
_ZN30CjsonFixture_print_number_TestC1Ev:
        1:  551:TEST(CjsonFixture, print_number)
        1:  551-block  0
------------------
        -:  572://
        -:  573://
        4:  574:static void assert_print_string(const char *expected, const char *input)
        -:  575:{
        -:  576:    unsigned char printed[1024];
        4:  577:    printbuffer buffer = { 0, 0, 0, 0, 0, 0, { 0, 0, 0 } };
        4:  578:    buffer.buffer = printed;
        4:  579:    buffer.length = sizeof(printed);
        4:  580:    buffer.offset = 0;
        4:  581:    buffer.noalloc = true;
        4:  582:    buffer.hooks = global_hooks;
        -:  583:
        4:  584:    print_string_ptr((const unsigned char*)input, &buffer);
        4:  584-block  0
        -:  585://    TEST_ASSERT_TRUE_MESSAGE(print_string_ptr((const unsigned char*)input, &buffer), "Failed to print string.");
        -:  586://    TEST_ASSERT_EQUAL_STRING_MESSAGE(expected, printed, "The printed string isn't as expected.");
        4:  587:}
        4:  587-block  0
        2:  588:TEST(CjsonFixture, print_string_should_print_empty_strings)
        -:  589://static void print_string_should_print_empty_strings(void)
        -:  590:{
        1:  591:    assert_print_string("\"\"", "");
        1:  592:    assert_print_string("\"\"", NULL);
        -:  593:
        -:  594:    char ascii[0x7F];
        1:  595:    size_t i = 1;
        -:  596:
        -:  597:    /* create ascii table */
      127:  598:    for (i = 1; i < 0x7F; i++)
        -:  599:    {
      126:  600:        ascii[i-1] = (char)i;
        -:  601:    }
        1:  602:    ascii[0x7F-1] = '\0';
        -:  603:
        1:  604:    assert_print_string("\"\\u0001\\u0002\\u0003\\u0004\\u0005\\u0006\\u0007\\b\\t\\n\\u000b\\f\\r\\u000e\\u000f\\u0010\\u0011\\u0012\\u0013\\u0014\\u0015\\u0016\\u0017\\u0018\\u0019\\u001a\\u001b\\u001c\\u001d\\u001e\\u001f !\\\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\"",
        -:  605:            ascii);
        -:  606:
        1:  607:    assert_print_string("\"ü猫慕\"", "ü猫慕");
        -:  608:
        1:  609:}
------------------
_ZN57CjsonFixture_print_string_should_print_empty_strings_Test8TestBodyEv:
        1:  588:TEST(CjsonFixture, print_string_should_print_empty_strings)
        -:  589://static void print_string_should_print_empty_strings(void)
        -:  590:{
        1:  591:    assert_print_string("\"\"", "");
        1:  591-block  0
        1:  592:    assert_print_string("\"\"", NULL);
        1:  592-block  0
        -:  593:
        -:  594:    char ascii[0x7F];
        1:  595:    size_t i = 1;
        -:  596:
        -:  597:    /* create ascii table */
      127:  598:    for (i = 1; i < 0x7F; i++)
        1:  598-block  0
      127:  598-block  1
        -:  599:    {
      126:  600:        ascii[i-1] = (char)i;
      126:  600-block  0
        -:  601:    }
        1:  602:    ascii[0x7F-1] = '\0';
        -:  603:
        1:  604:    assert_print_string("\"\\u0001\\u0002\\u0003\\u0004\\u0005\\u0006\\u0007\\b\\t\\n\\u000b\\f\\r\\u000e\\u000f\\u0010\\u0011\\u0012\\u0013\\u0014\\u0015\\u0016\\u0017\\u0018\\u0019\\u001a\\u001b\\u001c\\u001d\\u001e\\u001f !\\\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\"",
        1:  604-block  0
        -:  605:            ascii);
        -:  606:
        1:  607:    assert_print_string("\"ü猫慕\"", "ü猫慕");
        1:  607-block  0
        -:  608:
        1:  609:}
        1:  609-block  0
------------------
_ZN57CjsonFixture_print_string_should_print_empty_strings_TestC1Ev:
        1:  588:TEST(CjsonFixture, print_string_should_print_empty_strings)
        1:  588-block  0
------------------
        -:  610://
    #####:  611:static void assert_cJSON_ParseWithOpts(const char *value, const char **return_parse_end, cJSON_bool require_null_terminated)
        -:  612:{
    #####:  613:    cJSON_ParseWithOpts(value,return_parse_end,require_null_terminated);
    %%%%%:  613-block  0
    #####:  614:}
        2:  615:TEST(CjsonFixture, assert_cJSON_ParseWithOpts)
        -:  616:{
        1:  617:    const char *error_pointer = NULL;
        1:  618:    cJSON *item = NULL;
        1:  619:    cJSON_ParseWithOpts(NULL, &error_pointer, false);
        1:  620:    item = cJSON_ParseWithOpts("{}", NULL, false);
       1*:  621:    ASSERT_TRUE(item!=NULL);
        1:  622:    cJSON_Delete(item);
       1*:  623:    ASSERT_TRUE(cJSON_ParseWithOpts(NULL, NULL, false)==NULL);
       1*:  624:    ASSERT_TRUE(cJSON_ParseWithOpts("{", NULL, false)==NULL);
        -:  625:
        -:  626:}
------------------
_ZN44CjsonFixture_assert_cJSON_ParseWithOpts_Test8TestBodyEv:
        1:  615:TEST(CjsonFixture, assert_cJSON_ParseWithOpts)
        -:  616:{
        1:  617:    const char *error_pointer = NULL;
        1:  618:    cJSON *item = NULL;
        1:  619:    cJSON_ParseWithOpts(NULL, &error_pointer, false);
        1:  619-block  0
        1:  620:    item = cJSON_ParseWithOpts("{}", NULL, false);
        1:  620-block  0
       1*:  621:    ASSERT_TRUE(item!=NULL);
        1:  621-block  0
    %%%%%:  621-block  1
    %%%%%:  621-block  2
    %%%%%:  621-block  3
    %%%%%:  621-block  4
    %%%%%:  621-block  5
    $$$$$:  621-block  6
    $$$$$:  621-block  7
    $$$$$:  621-block  8
    $$$$$:  621-block  9
    $$$$$:  621-block 10
    $$$$$:  621-block 11
    $$$$$:  621-block 12
        1:  622:    cJSON_Delete(item);
        1:  622-block  0
       1*:  623:    ASSERT_TRUE(cJSON_ParseWithOpts(NULL, NULL, false)==NULL);
        1:  623-block  0
        1:  623-block  1
    %%%%%:  623-block  2
    %%%%%:  623-block  3
    %%%%%:  623-block  4
    %%%%%:  623-block  5
    %%%%%:  623-block  6
    $$$$$:  623-block  7
    $$$$$:  623-block  8
    $$$$$:  623-block  9
    $$$$$:  623-block 10
    $$$$$:  623-block 11
    $$$$$:  623-block 12
    $$$$$:  623-block 13
       1*:  624:    ASSERT_TRUE(cJSON_ParseWithOpts("{", NULL, false)==NULL);
        1:  624-block  0
        1:  624-block  1
    %%%%%:  624-block  2
    %%%%%:  624-block  3
    %%%%%:  624-block  4
    %%%%%:  624-block  5
    %%%%%:  624-block  6
    $$$$$:  624-block  7
    $$$$$:  624-block  8
    $$$$$:  624-block  9
    $$$$$:  624-block 10
    $$$$$:  624-block 11
    $$$$$:  624-block 12
    $$$$$:  624-block 13
        -:  625:
        -:  626:}
------------------
_ZN44CjsonFixture_assert_cJSON_ParseWithOpts_TestC1Ev:
        1:  615:TEST(CjsonFixture, assert_cJSON_ParseWithOpts)
        1:  615-block  0
------------------
        2:  627:TEST(CjsonFixture, assert_cJSON_ParseWithOpts2)
        -:  628:{
        1:  629:    const char empty_string[] = "";
        1:  630:    const char *error_pointer = NULL;
        -:  631:
       1*:  632:    ASSERT_TRUE(cJSON_ParseWithOpts(empty_string, NULL, false)==NULL);
       1*:  633:    ASSERT_TRUE(cJSON_ParseWithOpts(empty_string, &error_pointer, false)==NULL);
        -:  634:
        1:  635:    const char json[] = "{ \"name\": ";
        1:  636:    const char *parse_end = NULL;
        -:  637:
       1*:  638:    ASSERT_TRUE(cJSON_ParseWithOpts(json, &parse_end, false)==NULL);
        -:  639:
        1:  640:    cJSON *item = cJSON_ParseWithOpts("{}", NULL, true);
       1*:  641:    ASSERT_TRUE(item!=NULL);
        1:  642:    cJSON_Delete(item);
        1:  643:    item = cJSON_ParseWithOpts("{} \n", NULL, true);
       1*:  644:    ASSERT_TRUE(item!=NULL);
        1:  645:    cJSON_Delete(item);
       1*:  646:    ASSERT_TRUE(cJSON_ParseWithOpts("{}x", NULL, true)==NULL);
        -:  647:
        -:  648:}
------------------
_ZN45CjsonFixture_assert_cJSON_ParseWithOpts2_Test8TestBodyEv:
        1:  627:TEST(CjsonFixture, assert_cJSON_ParseWithOpts2)
        -:  628:{
        1:  629:    const char empty_string[] = "";
        1:  630:    const char *error_pointer = NULL;
        -:  631:
       1*:  632:    ASSERT_TRUE(cJSON_ParseWithOpts(empty_string, NULL, false)==NULL);
        1:  632-block  0
        1:  632-block  1
    %%%%%:  632-block  2
    %%%%%:  632-block  3
    %%%%%:  632-block  4
    %%%%%:  632-block  5
    %%%%%:  632-block  6
    $$$$$:  632-block  7
    $$$$$:  632-block  8
    $$$$$:  632-block  9
    $$$$$:  632-block 10
    $$$$$:  632-block 11
    $$$$$:  632-block 12
    $$$$$:  632-block 13
       1*:  633:    ASSERT_TRUE(cJSON_ParseWithOpts(empty_string, &error_pointer, false)==NULL);
        1:  633-block  0
        1:  633-block  1
    %%%%%:  633-block  2
    %%%%%:  633-block  3
    %%%%%:  633-block  4
    %%%%%:  633-block  5
    %%%%%:  633-block  6
    $$$$$:  633-block  7
    $$$$$:  633-block  8
    $$$$$:  633-block  9
    $$$$$:  633-block 10
    $$$$$:  633-block 11
    $$$$$:  633-block 12
    $$$$$:  633-block 13
        -:  634:
        1:  635:    const char json[] = "{ \"name\": ";
        1:  636:    const char *parse_end = NULL;
        -:  637:
       1*:  638:    ASSERT_TRUE(cJSON_ParseWithOpts(json, &parse_end, false)==NULL);
        1:  638-block  0
        1:  638-block  1
    %%%%%:  638-block  2
    %%%%%:  638-block  3
    %%%%%:  638-block  4
    %%%%%:  638-block  5
    %%%%%:  638-block  6
    $$$$$:  638-block  7
    $$$$$:  638-block  8
    $$$$$:  638-block  9
    $$$$$:  638-block 10
    $$$$$:  638-block 11
    $$$$$:  638-block 12
    $$$$$:  638-block 13
        -:  639:
        1:  640:    cJSON *item = cJSON_ParseWithOpts("{}", NULL, true);
        1:  640-block  0
       1*:  641:    ASSERT_TRUE(item!=NULL);
        1:  641-block  0
    %%%%%:  641-block  1
    %%%%%:  641-block  2
    %%%%%:  641-block  3
    %%%%%:  641-block  4
    %%%%%:  641-block  5
    $$$$$:  641-block  6
    $$$$$:  641-block  7
    $$$$$:  641-block  8
    $$$$$:  641-block  9
    $$$$$:  641-block 10
    $$$$$:  641-block 11
    $$$$$:  641-block 12
        1:  642:    cJSON_Delete(item);
        1:  642-block  0
        1:  643:    item = cJSON_ParseWithOpts("{} \n", NULL, true);
        1:  643-block  0
       1*:  644:    ASSERT_TRUE(item!=NULL);
        1:  644-block  0
    %%%%%:  644-block  1
    %%%%%:  644-block  2
    %%%%%:  644-block  3
    %%%%%:  644-block  4
    %%%%%:  644-block  5
    $$$$$:  644-block  6
    $$$$$:  644-block  7
    $$$$$:  644-block  8
    $$$$$:  644-block  9
    $$$$$:  644-block 10
    $$$$$:  644-block 11
    $$$$$:  644-block 12
        1:  645:    cJSON_Delete(item);
        1:  645-block  0
       1*:  646:    ASSERT_TRUE(cJSON_ParseWithOpts("{}x", NULL, true)==NULL);
        1:  646-block  0
        1:  646-block  1
    %%%%%:  646-block  2
    %%%%%:  646-block  3
    %%%%%:  646-block  4
    %%%%%:  646-block  5
    %%%%%:  646-block  6
    $$$$$:  646-block  7
    $$$$$:  646-block  8
    $$$$$:  646-block  9
    $$$$$:  646-block 10
    $$$$$:  646-block 11
    $$$$$:  646-block 12
    $$$$$:  646-block 13
        -:  647:
        -:  648:}
------------------
_ZN45CjsonFixture_assert_cJSON_ParseWithOpts2_TestC1Ev:
        1:  627:TEST(CjsonFixture, assert_cJSON_ParseWithOpts2)
        1:  627-block  0
------------------
        2:  649:TEST(CjsonFixture, assert_cJSON_ParseWithOpts3)
        -:  650:{
        1:  651:    const char json[] = "[] empty array XD";
        1:  652:    const char *parse_end = NULL;
        -:  653:
        1:  654:    cJSON *item = cJSON_ParseWithOpts(json, &parse_end, false);
       1*:  655:    ASSERT_TRUE(item!=NULL);
        1:  656:    cJSON_Delete(item);
        -:  657:
        1:  658:    cJSON *with_bom = NULL;
        1:  659:    cJSON *without_bom = NULL;
        -:  660:
        1:  661:    with_bom = cJSON_ParseWithOpts("\xEF\xBB\xBF{}", NULL, true);
       1*:  662:    ASSERT_TRUE(with_bom!=NULL);
        1:  663:    without_bom = cJSON_ParseWithOpts("{}", NULL, true);
       1*:  664:    ASSERT_TRUE(with_bom!=NULL);
        -:  665:
       1*:  666:    ASSERT_TRUE(cJSON_Compare(with_bom, without_bom, true));
        1:  667:    cJSON_Compare(with_bom, with_bom, true);
        -:  668:
        1:  669:    cJSON_Delete(with_bom);
        1:  670:    cJSON_Delete(without_bom);
        -:  671:}
------------------
_ZN45CjsonFixture_assert_cJSON_ParseWithOpts3_Test8TestBodyEv:
        1:  649:TEST(CjsonFixture, assert_cJSON_ParseWithOpts3)
        -:  650:{
        1:  651:    const char json[] = "[] empty array XD";
        1:  652:    const char *parse_end = NULL;
        -:  653:
        1:  654:    cJSON *item = cJSON_ParseWithOpts(json, &parse_end, false);
        1:  654-block  0
       1*:  655:    ASSERT_TRUE(item!=NULL);
        1:  655-block  0
    %%%%%:  655-block  1
    %%%%%:  655-block  2
    %%%%%:  655-block  3
    %%%%%:  655-block  4
    %%%%%:  655-block  5
    $$$$$:  655-block  6
    $$$$$:  655-block  7
    $$$$$:  655-block  8
    $$$$$:  655-block  9
    $$$$$:  655-block 10
    $$$$$:  655-block 11
    $$$$$:  655-block 12
        1:  656:    cJSON_Delete(item);
        1:  656-block  0
        -:  657:
        1:  658:    cJSON *with_bom = NULL;
        1:  659:    cJSON *without_bom = NULL;
        -:  660:
        1:  661:    with_bom = cJSON_ParseWithOpts("\xEF\xBB\xBF{}", NULL, true);
        1:  661-block  0
       1*:  662:    ASSERT_TRUE(with_bom!=NULL);
        1:  662-block  0
    %%%%%:  662-block  1
    %%%%%:  662-block  2
    %%%%%:  662-block  3
    %%%%%:  662-block  4
    %%%%%:  662-block  5
    $$$$$:  662-block  6
    $$$$$:  662-block  7
    $$$$$:  662-block  8
    $$$$$:  662-block  9
    $$$$$:  662-block 10
    $$$$$:  662-block 11
    $$$$$:  662-block 12
        1:  663:    without_bom = cJSON_ParseWithOpts("{}", NULL, true);
        1:  663-block  0
       1*:  664:    ASSERT_TRUE(with_bom!=NULL);
        1:  664-block  0
    %%%%%:  664-block  1
    %%%%%:  664-block  2
    %%%%%:  664-block  3
    %%%%%:  664-block  4
    %%%%%:  664-block  5
    $$$$$:  664-block  6
    $$$$$:  664-block  7
    $$$$$:  664-block  8
    $$$$$:  664-block  9
    $$$$$:  664-block 10
    $$$$$:  664-block 11
    $$$$$:  664-block 12
        -:  665:
       1*:  666:    ASSERT_TRUE(cJSON_Compare(with_bom, without_bom, true));
        1:  666-block  0
        1:  666-block  1
    %%%%%:  666-block  2
    %%%%%:  666-block  3
    %%%%%:  666-block  4
    %%%%%:  666-block  5
    %%%%%:  666-block  6
    $$$$$:  666-block  7
    $$$$$:  666-block  8
    $$$$$:  666-block  9
    $$$$$:  666-block 10
    $$$$$:  666-block 11
    $$$$$:  666-block 12
    $$$$$:  666-block 13
        1:  667:    cJSON_Compare(with_bom, with_bom, true);
        1:  667-block  0
        -:  668:
        1:  669:    cJSON_Delete(with_bom);
        1:  669-block  0
        1:  670:    cJSON_Delete(without_bom);
        1:  670-block  0
        -:  671:}
------------------
_ZN45CjsonFixture_assert_cJSON_ParseWithOpts3_TestC1Ev:
        1:  649:TEST(CjsonFixture, assert_cJSON_ParseWithOpts3)
        1:  649-block  0
------------------
        -:  672://
        -:  673://
        -:  674://static void assert_cJSON_Parse()
        -:  675://{
        -:  676://    cJSON_Parse("a");
        -:  677://}
        -:  678://TEST(CjsonFixture, assert_cJSON_Parse)
        -:  679://{
        -:  680://    assert_cJSON_Parse();
        -:  681://}
        -:  682://
        -:  683:
        2:  684:TEST(CjsonFixture, assert_cJSON_Print)
        -:  685:{
        1:  686:    cJSON *root=NULL;
        1:  687:    cJSON_Print(root);
        1:  688:    root=cJSON_CreateString("root");
        1:  689:    cJSON_Print(root);
        1:  690:    root=cJSON_Parse("\"[true, false]\"");
        1:  691:    cJSON_Print(root);
        -:  692:
        1:  693:    global_hooks.reallocate=NULL;
        1:  694:    cJSON_Print(root);
        1:  695:    global_hooks.reallocate=internal_realloc;
        1:  696:}
------------------
_ZN36CjsonFixture_assert_cJSON_Print_Test8TestBodyEv:
        1:  684:TEST(CjsonFixture, assert_cJSON_Print)
        -:  685:{
        1:  686:    cJSON *root=NULL;
        1:  687:    cJSON_Print(root);
        1:  687-block  0
        1:  688:    root=cJSON_CreateString("root");
        1:  689:    cJSON_Print(root);
        1:  690:    root=cJSON_Parse("\"[true, false]\"");
        1:  691:    cJSON_Print(root);
        -:  692:
        1:  693:    global_hooks.reallocate=NULL;
        1:  694:    cJSON_Print(root);
        1:  695:    global_hooks.reallocate=internal_realloc;
        1:  696:}
------------------
_ZN36CjsonFixture_assert_cJSON_Print_TestC1Ev:
        1:  684:TEST(CjsonFixture, assert_cJSON_Print)
        1:  684-block  0
------------------
        -:  697://
        1:  698:static void assert_cJSON_PrintUnformatted()
        -:  699:{
        1:  700:    const char *merges[15][3] =
        -:  701:            {
        -:  702:                    {"{\"a\":\"b\"}", "{\"a\":\"c\"}", "{\"a\":\"c\"}"},
        -:  703:                    {"{\"a\":\"b\"}", "{\"b\":\"c\"}", "{\"a\":\"b\",\"b\":\"c\"}"},
        -:  704:                    {"{\"a\":\"b\"}", "{\"a\":null}", "{}"},
        -:  705:                    {"{\"a\":\"b\",\"b\":\"c\"}", "{\"a\":null}", "{\"b\":\"c\"}"},
        -:  706:                    {"{\"a\":[\"b\"]}", "{\"a\":\"c\"}", "{\"a\":\"c\"}"},
        -:  707:                    {"{\"a\":\"c\"}", "{\"a\":[\"b\"]}", "{\"a\":[\"b\"]}"},
        -:  708:                    {"{\"a\":{\"b\":\"c\"}}", "{\"a\":{\"b\":\"d\",\"c\":null}}", "{\"a\":{\"b\":\"d\"}}"},
        -:  709:                    {"{\"a\":[{\"b\":\"c\"}]}", "{\"a\":[1]}", "{\"a\":[1]}"},
        -:  710:                    {"[\"a\",\"b\"]", "[\"c\",\"d\"]", "[\"c\",\"d\"]"},
        -:  711:                    {"{\"a\":\"b\"}", "[\"c\"]", "[\"c\"]"},
        -:  712:                    {"{\"a\":\"foo\"}", "null", "null"},
        -:  713:                    {"{\"a\":\"foo\"}", "\"bar\"", "\"bar\""},
        -:  714:                    {"{\"e\":null}", "{\"a\":1}", "{\"e\":null,\"a\":1}"},
        -:  715:                    {"[1,2]", "{\"a\":\"b\",\"c\":null}", "{\"a\":\"b\"}"},
        -:  716:                    {"{}","{\"a\":{\"bb\":{\"ccc\":null}}}", "{\"a\":{\"bb\":{}}}"}
        -:  717:            };
       16:  718:    for (int i = 0; i <15 ; ++i) {
        1:  718-block  0
       16:  718-block  1
       15:  718-block  2
       15:  719:        cJSON *object_to_be_merged = cJSON_Parse(merges[i][0]);
       15:  719-block  0
       15:  720:        cJSON *patch = cJSON_Parse(merges[i][1]);
       15:  720-block  0
        -:  721:
        -:  722:
       15:  723:        cJSON_PrintUnformatted(patch);
       15:  723-block  0
       15:  724:        cJSON_PrintUnformatted(object_to_be_merged);
       15:  724-block  0
        -:  725:    }
        -:  726:
        1:  727:}
        1:  727-block  0
        2:  728:TEST(CjsonFixture, assert_cJSON_PrintUnformatted)
        -:  729:{
        1:  730:    assert_cJSON_PrintUnformatted();
        1:  731:}
------------------
_ZN47CjsonFixture_assert_cJSON_PrintUnformatted_Test8TestBodyEv:
        1:  728:TEST(CjsonFixture, assert_cJSON_PrintUnformatted)
        -:  729:{
        1:  730:    assert_cJSON_PrintUnformatted();
        1:  730-block  0
        1:  731:}
------------------
_ZN47CjsonFixture_assert_cJSON_PrintUnformatted_TestC1Ev:
        1:  728:TEST(CjsonFixture, assert_cJSON_PrintUnformatted)
        1:  728-block  0
------------------
        -:  732://
        -:  733://
        1:  734:static void assert_cJSON_PrintBuffered()
        -:  735:{
        1:  736:    cJSON_PrintBuffered(NULL, 10, true);
        1:  736-block  0
        1:  737:    cJSON *item=cJSON_CreateString("item");
        1:  738:    cJSON_PrintBuffered(item, 10, true);
        -:  739:
        1:  740:}
        2:  741:TEST(CjsonFixture, assert_cJSON_PrintBuffered)
        -:  742:{
        1:  743:    assert_cJSON_PrintBuffered();
        1:  744:}
------------------
_ZN44CjsonFixture_assert_cJSON_PrintBuffered_Test8TestBodyEv:
        1:  741:TEST(CjsonFixture, assert_cJSON_PrintBuffered)
        -:  742:{
        1:  743:    assert_cJSON_PrintBuffered();
        1:  743-block  0
        1:  744:}
------------------
_ZN44CjsonFixture_assert_cJSON_PrintBuffered_TestC1Ev:
        1:  741:TEST(CjsonFixture, assert_cJSON_PrintBuffered)
        1:  741-block  0
------------------
        -:  745://
    #####:  746:static void assert_cJSON_PrintPreallocated(cJSON *item, char *buffer, const int length, const cJSON_bool format)
        -:  747:{
    #####:  748:    cJSON_PrintPreallocated(item,buffer,length,format);
    %%%%%:  748-block  0
    #####:  749:}
        2:  750:TEST(CjsonFixture, assert_cJSON_PrintPreallocated)
        -:  751:{
        -:  752://    char *out = NULL;
        -:  753://    cJSON *root;
        -:  754://    char *buf = NULL;
        -:  755://    size_t len = 0;
        -:  756://    out = cJSON_Print(root);
        -:  757://    len = strlen(out) + 5;
        -:  758://    buf = (char*)malloc(len);
        -:  759://    cJSON_PrintPreallocated(root, buf, (int)len, 1);
        -:  760:
        -:  761:    char buffer[10];
        1:  762:    cJSON *item = cJSON_CreateString("item");
        1:  763:    cJSON_PrintPreallocated(NULL, buffer, sizeof(buffer), true);
        1:  764:    cJSON_PrintPreallocated(item, NULL, 1, true);
        1:  765:}
------------------
_ZN48CjsonFixture_assert_cJSON_PrintPreallocated_Test8TestBodyEv:
        1:  750:TEST(CjsonFixture, assert_cJSON_PrintPreallocated)
        -:  751:{
        -:  752://    char *out = NULL;
        -:  753://    cJSON *root;
        -:  754://    char *buf = NULL;
        -:  755://    size_t len = 0;
        -:  756://    out = cJSON_Print(root);
        -:  757://    len = strlen(out) + 5;
        -:  758://    buf = (char*)malloc(len);
        -:  759://    cJSON_PrintPreallocated(root, buf, (int)len, 1);
        -:  760:
        -:  761:    char buffer[10];
        1:  762:    cJSON *item = cJSON_CreateString("item");
        1:  762-block  0
        1:  763:    cJSON_PrintPreallocated(NULL, buffer, sizeof(buffer), true);
        1:  763-block  0
        1:  764:    cJSON_PrintPreallocated(item, NULL, 1, true);
        1:  764-block  0
        1:  765:}
        1:  765-block  0
------------------
_ZN48CjsonFixture_assert_cJSON_PrintPreallocated_TestC1Ev:
        1:  750:TEST(CjsonFixture, assert_cJSON_PrintPreallocated)
        1:  750-block  0
------------------
        -:  766://
        8:  767:static void assert_print_value(const char *input)
        -:  768:{
        -:  769:    unsigned char printed[1024];
        -:  770:    cJSON item[1];
        8:  771:    printbuffer buffer = { 0, 0, 0, 0, 0, 0, { 0, 0, 0 } };
        8:  772:    parse_buffer parsebuffer = { 0, 0, 0, 0, { 0, 0, 0 } };
        8:  773:    buffer.buffer = printed;
        8:  774:    buffer.length = sizeof(printed);
        8:  775:    buffer.offset = 0;
        8:  776:    buffer.noalloc = true;
        8:  777:    buffer.hooks = global_hooks;
        -:  778:
        8:  779:    parsebuffer.content = (const unsigned char*)input;
        8:  780:    parsebuffer.length = strlen(input) + sizeof("");
        8:  781:    parsebuffer.hooks = global_hooks;
        -:  782:
        8:  783:    memset(item, 0, sizeof(item));
        -:  784:
        8:  785:    parse_value(item, &parsebuffer);
        8:  785-block  0
        -:  786://    TEST_ASSERT_TRUE_MESSAGE(parse_value(item, &parsebuffer), "Failed to parse value.");
        -:  787:
        8:  788:    print_value(item, &buffer);
        8:  788-block  0
        -:  789://    TEST_ASSERT_TRUE_MESSAGE(print_value(item, &buffer), "Failed to print value.");
        -:  790://    TEST_ASSERT_EQUAL_STRING_MESSAGE(input, buffer.buffer, "Printed value is not as expected.");
        8:  791:    item->type=3423;
        8:  792:    print_value(item, &buffer);
        8:  792-block  0
        8:  793:    print_value(NULL, &buffer);
        8:  793-block  0
        8:  794:    print_value(item, NULL);
        8:  794-block  0
        8:  795:    reset(item);
        8:  795-block  0
        8:  796:}
        8:  796-block  0
        -:  797://
        2:  798:TEST(CjsonFixture, print_value)
        -:  799:{
        1:  800:    assert_print_value("null");
        1:  801:    assert_print_value("true");
        1:  802:    assert_print_value("false");
        1:  803:    assert_print_value("1.5");
        1:  804:    assert_print_value("\"\"");
        1:  805:    assert_print_value("\"hello\"");
        1:  806:    assert_print_value("[]");
        1:  807:    assert_print_value("{}");
        -:  808:
        1:  809:}
------------------
_ZN29CjsonFixture_print_value_Test8TestBodyEv:
        1:  798:TEST(CjsonFixture, print_value)
        -:  799:{
        1:  800:    assert_print_value("null");
        1:  800-block  0
        1:  801:    assert_print_value("true");
        1:  802:    assert_print_value("false");
        1:  803:    assert_print_value("1.5");
        1:  804:    assert_print_value("\"\"");
        1:  805:    assert_print_value("\"hello\"");
        1:  806:    assert_print_value("[]");
        1:  807:    assert_print_value("{}");
        -:  808:
        1:  809:}
------------------
_ZN29CjsonFixture_print_value_TestC1Ev:
        1:  798:TEST(CjsonFixture, print_value)
        1:  798-block  0
------------------
        -:  810://
        -:  811://
        7:  812:static void assert_print_array(const char * const expected, const char * const input)
        -:  813:{
        -:  814:    unsigned char printed_unformatted[1024];
        -:  815:    unsigned char printed_formatted[1024];
        -:  816:
        -:  817:    cJSON item[1];
        -:  818:
        7:  819:    printbuffer formatted_buffer = { 0, 0, 0, 0, 0, 0, { 0, 0, 0 } };
        7:  820:    printbuffer unformatted_buffer = { 0, 0, 0, 0, 0, 0, { 0, 0, 0 } };
        -:  821:
        7:  822:    parse_buffer parsebuffer = { 0, 0, 0, 0, { 0, 0, 0 } };
        7:  823:    parsebuffer.content = (const unsigned char*)input;
        7:  824:    parsebuffer.length = strlen(input) + sizeof("");
        7:  825:    parsebuffer.hooks = global_hooks;
        -:  826:
        -:  827:    /* buffer for formatted printing */
        7:  828:    formatted_buffer.buffer = printed_formatted;
        7:  829:    formatted_buffer.length = sizeof(printed_formatted);
        7:  830:    formatted_buffer.offset = 0;
        7:  831:    formatted_buffer.noalloc = true;
        7:  832:    formatted_buffer.hooks = global_hooks;
        -:  833:
        -:  834:    /* buffer for unformatted printing */
        7:  835:    unformatted_buffer.buffer = printed_unformatted;
        7:  836:    unformatted_buffer.length = sizeof(printed_unformatted);
        7:  837:    unformatted_buffer.offset = 0;
        7:  838:    unformatted_buffer.noalloc = true;
        7:  839:    unformatted_buffer.hooks = global_hooks;
        -:  840:
        7:  841:    memset(item, 0, sizeof(item));
        7:  842:    parse_array(item, &parsebuffer);
        7:  842-block  0
        7:  843:    cJSON_GetArraySize(item);
        7:  843-block  0
        -:  844://    TEST_ASSERT_TRUE_MESSAGE(parse_array(item, &parsebuffer), "Failed to parse array.");
        -:  845:
        7:  846:    unformatted_buffer.format = false;
        7:  847:    print_array(item, NULL);
        7:  848:    print_array(item, &unformatted_buffer);
        7:  848-block  0
        -:  849://    TEST_ASSERT_TRUE_MESSAGE(print_array(item, &unformatted_buffer), "Failed to print unformatted string.");
        -:  850://    TEST_ASSERT_EQUAL_STRING_MESSAGE(input, printed_unformatted, "Unformatted array is not correct.");
        -:  851:
        7:  852:    formatted_buffer.format = true;
        7:  853:    print_array(item, &formatted_buffer);
        7:  853-block  0
        -:  854://    TEST_ASSERT_TRUE_MESSAGE(print_array(item, &formatted_buffer), "Failed to print formatted string.");
        -:  855://    TEST_ASSERT_EQUAL_STRING_MESSAGE(expected, printed_formatted, "Formatted array is not correct.");
        -:  856:
        7:  857:    reset(item);
        7:  857-block  0
        7:  858:}
        7:  858-block  0
        -:  859:
        2:  860:TEST(CjsonFixture, print_array)
        -:  861:{
        1:  862:    assert_print_array("[]", "[]");
        1:  863:    assert_print_array("[1]", "[1]");
        1:  864:    assert_print_array("[\"hello!\"]", "[\"hello!\"]");
        1:  865:    assert_print_array("[[]]", "[[]]");
        1:  866:    assert_print_array("[null]", "[null]");
        1:  867:    assert_print_array("[1, 2, 3]", "[1,2,3]");
        1:  868:    assert_print_array("[1, null, true, false, [], \"hello\", {\n\t}]", "[1,null,true,false,[],\"hello\",{}]");
        -:  869:
        1:  870:}
------------------
_ZN29CjsonFixture_print_array_Test8TestBodyEv:
        1:  860:TEST(CjsonFixture, print_array)
        -:  861:{
        1:  862:    assert_print_array("[]", "[]");
        1:  862-block  0
        1:  863:    assert_print_array("[1]", "[1]");
        1:  864:    assert_print_array("[\"hello!\"]", "[\"hello!\"]");
        1:  865:    assert_print_array("[[]]", "[[]]");
        1:  866:    assert_print_array("[null]", "[null]");
        1:  867:    assert_print_array("[1, 2, 3]", "[1,2,3]");
        1:  868:    assert_print_array("[1, null, true, false, [], \"hello\", {\n\t}]", "[1,null,true,false,[],\"hello\",{}]");
        -:  869:
        1:  870:}
------------------
_ZN29CjsonFixture_print_array_TestC1Ev:
        1:  860:TEST(CjsonFixture, print_array)
        1:  860-block  0
------------------
        -:  871://
        7:  872:static void assert_print_object(const char * const expected, const char * const input)
        -:  873:{
        -:  874:    unsigned char printed_unformatted[1024];
        -:  875:    unsigned char printed_formatted[1024];
        -:  876:
        -:  877:    cJSON item[1];
        -:  878:
        7:  879:    printbuffer formatted_buffer = { 0, 0, 0, 0, 0, 0, { 0, 0, 0 } };
        7:  880:    printbuffer unformatted_buffer = { 0, 0, 0, 0, 0, 0, { 0, 0, 0 } };
        7:  881:    parse_buffer parsebuffer = { 0, 0, 0, 0, { 0, 0, 0 } };
        -:  882:
        -:  883:    /* buffer for parsing */
        7:  884:    parsebuffer.content = (const unsigned char*)input;
        7:  885:    parsebuffer.length = strlen(input) + sizeof("");
        7:  886:    parsebuffer.hooks = global_hooks;
        -:  887:
        -:  888:    /* buffer for formatted printing */
        7:  889:    formatted_buffer.buffer = printed_formatted;
        7:  890:    formatted_buffer.length = sizeof(printed_formatted);
        7:  891:    formatted_buffer.offset = 0;
        7:  892:    formatted_buffer.noalloc = true;
        7:  893:    formatted_buffer.hooks = global_hooks;
        -:  894:
        -:  895:    /* buffer for unformatted printing */
        7:  896:    unformatted_buffer.buffer = printed_unformatted;
        7:  897:    unformatted_buffer.length = sizeof(printed_unformatted);
        7:  898:    unformatted_buffer.offset = 0;
        7:  899:    unformatted_buffer.noalloc = true;
        7:  900:    unformatted_buffer.hooks = global_hooks;
        -:  901:
        7:  902:    memset(item, 0, sizeof(item));
        7:  903:    parse_object(item, &parsebuffer);
        7:  903-block  0
        -:  904://    TEST_ASSERT_TRUE_MESSAGE(parse_object(item, &parsebuffer), "Failed to parse object.");
        -:  905:
        7:  906:    unformatted_buffer.format = false;
        7:  907:    print_object(item, &unformatted_buffer);
        7:  907-block  0
        -:  908://    TEST_ASSERT_TRUE_MESSAGE(print_object(item, &unformatted_buffer), "Failed to print unformatted string.");
        -:  909://    TEST_ASSERT_EQUAL_STRING_MESSAGE(input, printed_unformatted, "Unformatted object is not correct.");
        -:  910:
        7:  911:    formatted_buffer.format = true;
        7:  912:    print_object(item, &formatted_buffer);
        7:  912-block  0
        -:  913://    TEST_ASSERT_TRUE_MESSAGE(print_object(item, &formatted_buffer), "Failed to print formatted string.");
        -:  914://    TEST_ASSERT_EQUAL_STRING_MESSAGE(expected, printed_formatted, "Formatted ojbect is not correct.");
        -:  915:
        7:  916:    reset(item);
        7:  916-block  0
        7:  917:}
        7:  917-block  0
        -:  918:
        2:  919:TEST(CjsonFixture, print_object)
        -:  920://static void print_object_should_print_objects_with_multiple_elements(void)
        -:  921:{
        1:  922:    assert_print_object("{\n}", "{}");
        1:  923:    assert_print_object("{\n\t\"one\":\t1\n}", "{\"one\":1}");
        1:  924:    assert_print_object("{\n\t\"hello\":\t\"world!\"\n}", "{\"hello\":\"world!\"}");
        1:  925:    assert_print_object("{\n\t\"array\":\t[]\n}", "{\"array\":[]}");
        1:  926:    assert_print_object("{\n\t\"null\":\tnull\n}", "{\"null\":null}");
        1:  927:    assert_print_object("{\n\t\"one\":\t1,\n\t\"two\":\t2,\n\t\"three\":\t3\n}", "{\"one\":1,\"two\":2,\"three\":3}");
        1:  928:    assert_print_object("{\n\t\"one\":\t1,\n\t\"NULL\":\tnull,\n\t\"TRUE\":\ttrue,\n\t\"FALSE\":\tfalse,\n\t\"array\":\t[],\n\t\"world\":\t\"hello\",\n\t\"object\":\t{\n\t}\n}", "{\"one\":1,\"NULL\":null,\"TRUE\":true,\"FALSE\":false,\"array\":[],\"world\":\"hello\",\"object\":{}}");
        -:  929:
        1:  930:}
------------------
_ZN30CjsonFixture_print_object_Test8TestBodyEv:
        1:  919:TEST(CjsonFixture, print_object)
        -:  920://static void print_object_should_print_objects_with_multiple_elements(void)
        -:  921:{
        1:  922:    assert_print_object("{\n}", "{}");
        1:  922-block  0
        1:  923:    assert_print_object("{\n\t\"one\":\t1\n}", "{\"one\":1}");
        1:  924:    assert_print_object("{\n\t\"hello\":\t\"world!\"\n}", "{\"hello\":\"world!\"}");
        1:  925:    assert_print_object("{\n\t\"array\":\t[]\n}", "{\"array\":[]}");
        1:  926:    assert_print_object("{\n\t\"null\":\tnull\n}", "{\"null\":null}");
        1:  927:    assert_print_object("{\n\t\"one\":\t1,\n\t\"two\":\t2,\n\t\"three\":\t3\n}", "{\"one\":1,\"two\":2,\"three\":3}");
        1:  928:    assert_print_object("{\n\t\"one\":\t1,\n\t\"NULL\":\tnull,\n\t\"TRUE\":\ttrue,\n\t\"FALSE\":\tfalse,\n\t\"array\":\t[],\n\t\"world\":\t\"hello\",\n\t\"object\":\t{\n\t}\n}", "{\"one\":1,\"NULL\":null,\"TRUE\":true,\"FALSE\":false,\"array\":[],\"world\":\"hello\",\"object\":{}}");
        -:  929:
        1:  930:}
------------------
_ZN30CjsonFixture_print_object_TestC1Ev:
        1:  919:TEST(CjsonFixture, print_object)
        1:  919-block  0
------------------
        -:  931://
        -:  932://
        2:  933:TEST(CjsonFixture, misc_tests)
        -:  934:{
        1:  935:    cJSON_GetArraySize(NULL);
        -:  936:
        1:  937:    int numbers[10] = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9};
        1:  938:    cJSON *object = NULL;
        1:  939:    cJSON *nums = NULL;
        1:  940:    cJSON *num6 = NULL;
        1:  941:    char *pointer = NULL;
        -:  942:
        1:  943:    printf("JSON Pointer construct\n");
        1:  944:    object = cJSON_CreateObject();
        1:  945:    nums = cJSON_CreateIntArray(numbers, 10);
        1:  946:    num6 = cJSON_GetArrayItem(nums, 6);
        1:  947:    cJSON_AddItemToObject(object, "numbers", nums);
        -:  948:
        1:  949:    cJSON_Delete(object);
        -:  950:
        1:  951:    cJSON_GetObjectItem(NULL, "test");
        1:  952:    cJSON_GetObjectItemCaseSensitive(NULL, "test");
        1:  953:    cJSON_HasObjectItem(NULL, "test");
        -:  954:
        -:  955:    cJSON replacements[3];
        1:  956:    cJSON *beginning = NULL;
        1:  957:    cJSON *middle = NULL;
        1:  958:    cJSON *end = NULL;
        1:  959:    cJSON *array = NULL;
        -:  960:
        1:  961:    beginning = cJSON_CreateNull();
       1*:  962:    ASSERT_TRUE(beginning!=NULL);
        1:  963:    middle = cJSON_CreateNull();
       1*:  964:    ASSERT_TRUE(middle!=NULL);
        1:  965:    end = cJSON_CreateNull();
       1*:  966:    ASSERT_TRUE(end!=NULL);
        -:  967:
        1:  968:    array = cJSON_CreateArray();
       1*:  969:    ASSERT_TRUE(array!=NULL);
        -:  970:
        1:  971:    cJSON_AddItemToArray(array, beginning);
        1:  972:    cJSON_AddItemToArray(array, middle);
        1:  973:    cJSON_AddItemToArray(array, end);
        -:  974:
        -:  975:    char buffer[10];
        1:  976:    cJSON *item = cJSON_CreateString("item");
       1*:  977:    ASSERT_FALSE(cJSON_PrintPreallocated(NULL, buffer, sizeof(buffer), true));
       1*:  978:    ASSERT_FALSE(cJSON_PrintPreallocated(item, NULL, 1, true));
        -:  979:
        1:  980:    case_insensitive_strcmp((const unsigned char *)"a",(const unsigned char *)"a");
        1:  981:    case_insensitive_strcmp(NULL,(const unsigned char *)"a");
        1:  982:    case_insensitive_strcmp((const unsigned char *)"a",NULL);
        -:  983:
        1:  984:    char *name = (char*)cJSON_strdup(NULL, &global_hooks);
        -:  985:}
------------------
_ZN28CjsonFixture_misc_tests_Test8TestBodyEv:
        1:  933:TEST(CjsonFixture, misc_tests)
        -:  934:{
        1:  935:    cJSON_GetArraySize(NULL);
        1:  935-block  0
        -:  936:
        1:  937:    int numbers[10] = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9};
        1:  938:    cJSON *object = NULL;
        1:  939:    cJSON *nums = NULL;
        1:  940:    cJSON *num6 = NULL;
        1:  941:    char *pointer = NULL;
        -:  942:
        1:  943:    printf("JSON Pointer construct\n");
        1:  944:    object = cJSON_CreateObject();
        1:  944-block  0
        1:  945:    nums = cJSON_CreateIntArray(numbers, 10);
        1:  945-block  0
        1:  946:    num6 = cJSON_GetArrayItem(nums, 6);
        1:  946-block  0
        1:  947:    cJSON_AddItemToObject(object, "numbers", nums);
        -:  948:
        1:  949:    cJSON_Delete(object);
        1:  949-block  0
        -:  950:
        1:  951:    cJSON_GetObjectItem(NULL, "test");
        1:  951-block  0
        1:  952:    cJSON_GetObjectItemCaseSensitive(NULL, "test");
        1:  953:    cJSON_HasObjectItem(NULL, "test");
        -:  954:
        -:  955:    cJSON replacements[3];
        1:  956:    cJSON *beginning = NULL;
        1:  957:    cJSON *middle = NULL;
        1:  958:    cJSON *end = NULL;
        1:  959:    cJSON *array = NULL;
        -:  960:
        1:  961:    beginning = cJSON_CreateNull();
       1*:  962:    ASSERT_TRUE(beginning!=NULL);
        1:  962-block  0
    %%%%%:  962-block  1
    %%%%%:  962-block  2
    %%%%%:  962-block  3
    %%%%%:  962-block  4
    %%%%%:  962-block  5
    $$$$$:  962-block  6
    $$$$$:  962-block  7
    $$$$$:  962-block  8
    $$$$$:  962-block  9
    $$$$$:  962-block 10
    $$$$$:  962-block 11
    $$$$$:  962-block 12
        1:  963:    middle = cJSON_CreateNull();
        1:  963-block  0
       1*:  964:    ASSERT_TRUE(middle!=NULL);
        1:  964-block  0
    %%%%%:  964-block  1
    %%%%%:  964-block  2
    %%%%%:  964-block  3
    %%%%%:  964-block  4
    %%%%%:  964-block  5
    $$$$$:  964-block  6
    $$$$$:  964-block  7
    $$$$$:  964-block  8
    $$$$$:  964-block  9
    $$$$$:  964-block 10
    $$$$$:  964-block 11
    $$$$$:  964-block 12
        1:  965:    end = cJSON_CreateNull();
        1:  965-block  0
       1*:  966:    ASSERT_TRUE(end!=NULL);
        1:  966-block  0
    %%%%%:  966-block  1
    %%%%%:  966-block  2
    %%%%%:  966-block  3
    %%%%%:  966-block  4
    %%%%%:  966-block  5
    $$$$$:  966-block  6
    $$$$$:  966-block  7
    $$$$$:  966-block  8
    $$$$$:  966-block  9
    $$$$$:  966-block 10
    $$$$$:  966-block 11
    $$$$$:  966-block 12
        -:  967:
        1:  968:    array = cJSON_CreateArray();
        1:  968-block  0
       1*:  969:    ASSERT_TRUE(array!=NULL);
        1:  969-block  0
    %%%%%:  969-block  1
    %%%%%:  969-block  2
    %%%%%:  969-block  3
    %%%%%:  969-block  4
    %%%%%:  969-block  5
    $$$$$:  969-block  6
    $$$$$:  969-block  7
    $$$$$:  969-block  8
    $$$$$:  969-block  9
    $$$$$:  969-block 10
    $$$$$:  969-block 11
    $$$$$:  969-block 12
        -:  970:
        1:  971:    cJSON_AddItemToArray(array, beginning);
        1:  971-block  0
        1:  972:    cJSON_AddItemToArray(array, middle);
        1:  973:    cJSON_AddItemToArray(array, end);
        -:  974:
        -:  975:    char buffer[10];
        1:  976:    cJSON *item = cJSON_CreateString("item");
       1*:  977:    ASSERT_FALSE(cJSON_PrintPreallocated(NULL, buffer, sizeof(buffer), true));
        1:  977-block  0
        1:  977-block  1
    %%%%%:  977-block  2
    %%%%%:  977-block  3
    %%%%%:  977-block  4
    %%%%%:  977-block  5
    %%%%%:  977-block  6
    $$$$$:  977-block  7
    $$$$$:  977-block  8
    $$$$$:  977-block  9
    $$$$$:  977-block 10
    $$$$$:  977-block 11
    $$$$$:  977-block 12
    $$$$$:  977-block 13
       1*:  978:    ASSERT_FALSE(cJSON_PrintPreallocated(item, NULL, 1, true));
        1:  978-block  0
        1:  978-block  1
    %%%%%:  978-block  2
    %%%%%:  978-block  3
    %%%%%:  978-block  4
    %%%%%:  978-block  5
    %%%%%:  978-block  6
    $$$$$:  978-block  7
    $$$$$:  978-block  8
    $$$$$:  978-block  9
    $$$$$:  978-block 10
    $$$$$:  978-block 11
    $$$$$:  978-block 12
    $$$$$:  978-block 13
        -:  979:
        1:  980:    case_insensitive_strcmp((const unsigned char *)"a",(const unsigned char *)"a");
        1:  980-block  0
        1:  981:    case_insensitive_strcmp(NULL,(const unsigned char *)"a");
        1:  982:    case_insensitive_strcmp((const unsigned char *)"a",NULL);
        -:  983:
        1:  984:    char *name = (char*)cJSON_strdup(NULL, &global_hooks);
        1:  984-block  0
        -:  985:}
------------------
_ZN28CjsonFixture_misc_tests_TestC1Ev:
        1:  933:TEST(CjsonFixture, misc_tests)
        1:  933-block  0
------------------
        -:  986://
        -:  987://
        -:  988:
        -:  989://
        -:  990:
        -:  991://
        -:  992://TEST(CjsonFixture, assert_cJSON_AddItemToArray)
        -:  993://{
        -:  994://    cJSON_AddItemToArray(NULL, NULL);
        -:  995://
        -:  996://    cJSON replacements[3];
        -:  997://    cJSON *beginning = NULL;
        -:  998://    cJSON *middle = NULL;
        -:  999://    cJSON *end = NULL;
        -: 1000://    cJSON *array = NULL;
        -: 1001://
        -: 1002://    beginning = cJSON_CreateNull();
        -: 1003://    middle = cJSON_CreateNull();
        -: 1004://    end = cJSON_CreateNull();
        -: 1005://
        -: 1006://    array = cJSON_CreateArray();
        -: 1007://
        -: 1008://    cJSON_AddItemToArray(array, beginning);
        -: 1009://    cJSON_AddItemToArray(array, middle);
        -: 1010://    cJSON_AddItemToArray(array, end);
        -: 1011://}
        -: 1012://
        -: 1013://TEST(CjsonFixture, assert_cast_away_const)
        -: 1014://{
        -: 1015://    cast_away_const(NULL);
        -: 1016://}
        -: 1017://
        -: 1018://TEST(CjsonFixture, assert_cJSON_AddItemToObject)
        -: 1019://{
        -: 1020://    cJSON *root = NULL;
        -: 1021://    cJSON *fmt = NULL;
        -: 1022://    cJSON *img = NULL;
        -: 1023://    cJSON *thm = NULL;
        -: 1024://    cJSON *fld = NULL;
        -: 1025://    int i = 0;
        -: 1026://
        -: 1027://    /* Our "days of the week" array: */
        -: 1028://    const char *strings[7] =
        -: 1029://            {
        -: 1030://                    "Sunday",
        -: 1031://                    "Monday",
        -: 1032://                    "Tuesday",
        -: 1033://                    "Wednesday",
        -: 1034://                    "Thursday",
        -: 1035://                    "Friday",
        -: 1036://                    "Saturday"
        -: 1037://            };
        -: 1038://    /* Our matrix: */
        -: 1039://    int numbers[3][3] =
        -: 1040://            {
        -: 1041://                    {0, -1, 0},
        -: 1042://                    {1, 0, 0},
        -: 1043://                    {0 ,0, 1}
        -: 1044://            };
        -: 1045://    /* Our "gallery" item: */
        -: 1046://    int ids[4] = { 116, 943, 234, 38793 };
        -: 1047://    /* Our array of "records": */
        -: 1048://
        -: 1049://    root = cJSON_CreateObject();
        -: 1050://    cJSON_AddItemToObject(root, "name", cJSON_CreateString("Jack (\"Bee\") Nimble"));
        -: 1051://    cJSON_AddItemToObject(root, "format", fmt = cJSON_CreateObject());
        -: 1052://
        -: 1053://    cJSON *monitor = cJSON_CreateObject();
        -: 1054://    cJSON *name = NULL;
        -: 1055://    cJSON *resolutions = NULL;
        -: 1056://    cJSON *resolution = NULL;
        -: 1057://    resolutions = cJSON_CreateArray();
        -: 1058://
        -: 1059://    cJSON_AddItemToObject(monitor, "name", name);
        -: 1060://    cJSON_AddItemToObject(monitor, "name", name);
        -: 1061://    cJSON_AddItemToObject(monitor, "resolutions", resolutions);
        -: 1062://
        -: 1063://    cJSON *width = NULL;
        -: 1064://    cJSON *height = NULL;
        -: 1065://    const unsigned int resolution_numbers[3][2] = {
        -: 1066://            {1280, 720},
        -: 1067://            {1920, 1080},
        -: 1068://            {3840, 2160}
        -: 1069://    };
        -: 1070://    size_t index = 0;
        -: 1071://    width = cJSON_CreateNumber(resolution_numbers[index][0]);
        -: 1072://    cJSON_AddItemToObject(resolution, "width", width);
        -: 1073://
        -: 1074://    height = cJSON_CreateNumber(resolution_numbers[index][1]);
        -: 1075://    cJSON_AddItemToObject(resolution, "height", height);
        -: 1076://
        -: 1077://}
        -: 1078://
        2: 1079:TEST(CjsonFixture, assert_cJSON_AddItemToObjectCS)
        -: 1080:{
        1: 1081:    cJSON *item = cJSON_CreateString("item");
        1: 1082:    cJSON *sec_item = cJSON_CreateString("item");
        -: 1083://    cJSON_AddItemToObjectCS(item, "item", NULL);
        -: 1084://    cJSON_AddItemToObjectCS(item, NULL, item);
        1: 1085:    cJSON_AddItemToObjectCS(sec_item, "item", item);
        1: 1086:}
------------------
_ZN48CjsonFixture_assert_cJSON_AddItemToObjectCS_Test8TestBodyEv:
        1: 1079:TEST(CjsonFixture, assert_cJSON_AddItemToObjectCS)
        -: 1080:{
        1: 1081:    cJSON *item = cJSON_CreateString("item");
        1: 1081-block  0
        1: 1082:    cJSON *sec_item = cJSON_CreateString("item");
        -: 1083://    cJSON_AddItemToObjectCS(item, "item", NULL);
        -: 1084://    cJSON_AddItemToObjectCS(item, NULL, item);
        1: 1085:    cJSON_AddItemToObjectCS(sec_item, "item", item);
        1: 1086:}
------------------
_ZN48CjsonFixture_assert_cJSON_AddItemToObjectCS_TestC1Ev:
        1: 1079:TEST(CjsonFixture, assert_cJSON_AddItemToObjectCS)
        1: 1079-block  0
------------------
        -: 1087://
        2: 1088:TEST(CjsonFixture, assert_cJSON_AddItemReferenceToArray)
        -: 1089:{
        1: 1090:    cJSON *item = cJSON_CreateString("item");
        1: 1091:    cJSON *arr = cJSON_CreateArray();
        -: 1092:
        1: 1093:    cJSON_AddItemReferenceToArray(NULL, item);
        1: 1094:    cJSON_AddItemReferenceToArray(item, NULL);
        1: 1095:    cJSON_AddItemReferenceToArray(arr, item);
        1: 1096:}
------------------
_ZN54CjsonFixture_assert_cJSON_AddItemReferenceToArray_Test8TestBodyEv:
        1: 1088:TEST(CjsonFixture, assert_cJSON_AddItemReferenceToArray)
        -: 1089:{
        1: 1090:    cJSON *item = cJSON_CreateString("item");
        1: 1090-block  0
        1: 1091:    cJSON *arr = cJSON_CreateArray();
        -: 1092:
        1: 1093:    cJSON_AddItemReferenceToArray(NULL, item);
        1: 1094:    cJSON_AddItemReferenceToArray(item, NULL);
        1: 1095:    cJSON_AddItemReferenceToArray(arr, item);
        1: 1096:}
------------------
_ZN54CjsonFixture_assert_cJSON_AddItemReferenceToArray_TestC1Ev:
        1: 1088:TEST(CjsonFixture, assert_cJSON_AddItemReferenceToArray)
        1: 1088-block  0
------------------
        -: 1097://
        2: 1098:TEST(CjsonFixture, assert_cJSON_AddItemReferenceToObject)
        -: 1099:{
        1: 1100:    cJSON *item = cJSON_CreateString("item");
        -: 1101:
        1: 1102:    cJSON_AddItemReferenceToObject(item, "item", NULL);
        1: 1103:    cJSON_AddItemReferenceToObject(item, NULL, item);
        1: 1104:    cJSON_AddItemReferenceToObject(NULL, "item", item);
        1: 1105:}
------------------
_ZN55CjsonFixture_assert_cJSON_AddItemReferenceToObject_Test8TestBodyEv:
        1: 1098:TEST(CjsonFixture, assert_cJSON_AddItemReferenceToObject)
        -: 1099:{
        1: 1100:    cJSON *item = cJSON_CreateString("item");
        1: 1100-block  0
        -: 1101:
        1: 1102:    cJSON_AddItemReferenceToObject(item, "item", NULL);
        1: 1103:    cJSON_AddItemReferenceToObject(item, NULL, item);
        1: 1104:    cJSON_AddItemReferenceToObject(NULL, "item", item);
        1: 1105:}
------------------
_ZN55CjsonFixture_assert_cJSON_AddItemReferenceToObject_TestC1Ev:
        1: 1098:TEST(CjsonFixture, assert_cJSON_AddItemReferenceToObject)
        1: 1098-block  0
------------------
        -: 1106://
        2: 1107:TEST(CjsonFixture, assert_cJSON_AddNullToObject)
        -: 1108:{
        1: 1109:    cJSON *root = cJSON_CreateObject();
        1: 1110:    cJSON *null = NULL;
        -: 1111:
        1: 1112:    cJSON_AddNullToObject(root, "null");
        1: 1113:    cJSON_AddNullToObject(NULL, "null");
        1: 1114:}
------------------
_ZN46CjsonFixture_assert_cJSON_AddNullToObject_Test8TestBodyEv:
        1: 1107:TEST(CjsonFixture, assert_cJSON_AddNullToObject)
        -: 1108:{
        1: 1109:    cJSON *root = cJSON_CreateObject();
        1: 1109-block  0
        1: 1110:    cJSON *null = NULL;
        -: 1111:
        1: 1112:    cJSON_AddNullToObject(root, "null");
        1: 1113:    cJSON_AddNullToObject(NULL, "null");
        1: 1114:}
------------------
_ZN46CjsonFixture_assert_cJSON_AddNullToObject_TestC1Ev:
        1: 1107:TEST(CjsonFixture, assert_cJSON_AddNullToObject)
        1: 1107-block  0
------------------
        -: 1115://
        2: 1116:TEST(CjsonFixture, assert_cJSON_AddTrueToObject)
        -: 1117:{
        1: 1118:    cJSON *root = cJSON_CreateObject();
        1: 1119:    cJSON_AddTrueToObject(NULL, "true");
        1: 1120:    cJSON_AddTrueToObject(root, NULL);
        1: 1121:    cJSON_AddTrueToObject(root, "true");
        1: 1122:}
------------------
_ZN46CjsonFixture_assert_cJSON_AddTrueToObject_Test8TestBodyEv:
        1: 1116:TEST(CjsonFixture, assert_cJSON_AddTrueToObject)
        -: 1117:{
        1: 1118:    cJSON *root = cJSON_CreateObject();
        1: 1118-block  0
        1: 1119:    cJSON_AddTrueToObject(NULL, "true");
        1: 1120:    cJSON_AddTrueToObject(root, NULL);
        1: 1121:    cJSON_AddTrueToObject(root, "true");
        1: 1122:}
------------------
_ZN46CjsonFixture_assert_cJSON_AddTrueToObject_TestC1Ev:
        1: 1116:TEST(CjsonFixture, assert_cJSON_AddTrueToObject)
        1: 1116-block  0
------------------
        -: 1123://
        2: 1124:TEST(CjsonFixture, assert_cJSON_AddFalseToObject)
        -: 1125:{
        1: 1126:    cJSON *root = cJSON_CreateObject();
        1: 1127:    cJSON_AddFalseToObject(root, "false");
        1: 1128:    cJSON_AddFalseToObject(NULL, "false");
        1: 1129:    cJSON_AddFalseToObject(root, NULL);
        -: 1130:
        1: 1131:    cJSON *fmt = NULL;
        1: 1132:    cJSON_AddFalseToObject (fmt, "interlace");
        1: 1133:}
------------------
_ZN47CjsonFixture_assert_cJSON_AddFalseToObject_Test8TestBodyEv:
        1: 1124:TEST(CjsonFixture, assert_cJSON_AddFalseToObject)
        -: 1125:{
        1: 1126:    cJSON *root = cJSON_CreateObject();
        1: 1126-block  0
        1: 1127:    cJSON_AddFalseToObject(root, "false");
        1: 1128:    cJSON_AddFalseToObject(NULL, "false");
        1: 1129:    cJSON_AddFalseToObject(root, NULL);
        -: 1130:
        1: 1131:    cJSON *fmt = NULL;
        1: 1132:    cJSON_AddFalseToObject (fmt, "interlace");
        1: 1133:}
------------------
_ZN47CjsonFixture_assert_cJSON_AddFalseToObject_TestC1Ev:
        1: 1124:TEST(CjsonFixture, assert_cJSON_AddFalseToObject)
        1: 1124-block  0
------------------
        -: 1134://
        2: 1135:TEST(CjsonFixture, assert_cJSON_AddBoolToObject)
        -: 1136:{
        1: 1137:    cJSON *root = cJSON_CreateObject();
        1: 1138:    cJSON_AddBoolToObject(root, "true", true);
        1: 1139:    cJSON_AddBoolToObject(root, "false", false);
        1: 1140:    cJSON_AddBoolToObject(NULL, "false", false);
        1: 1141:    cJSON_AddBoolToObject(root, NULL, false);
        1: 1142:    cJSON_AddBoolToObject(root, "false", false);
        1: 1143:}
------------------
_ZN46CjsonFixture_assert_cJSON_AddBoolToObject_Test8TestBodyEv:
        1: 1135:TEST(CjsonFixture, assert_cJSON_AddBoolToObject)
        -: 1136:{
        1: 1137:    cJSON *root = cJSON_CreateObject();
        1: 1137-block  0
        1: 1138:    cJSON_AddBoolToObject(root, "true", true);
        1: 1139:    cJSON_AddBoolToObject(root, "false", false);
        1: 1140:    cJSON_AddBoolToObject(NULL, "false", false);
        1: 1141:    cJSON_AddBoolToObject(root, NULL, false);
        1: 1142:    cJSON_AddBoolToObject(root, "false", false);
        1: 1143:}
------------------
_ZN46CjsonFixture_assert_cJSON_AddBoolToObject_TestC1Ev:
        1: 1135:TEST(CjsonFixture, assert_cJSON_AddBoolToObject)
        1: 1135-block  0
------------------
        -: 1144://
        2: 1145:TEST(CjsonFixture, assert_cJSON_AddNumberToObject)
        -: 1146:{
        1: 1147:    cJSON *fmt = NULL;
        1: 1148:    cJSON_AddNumberToObject(fmt, "width", 1920);
        1: 1149:    cJSON_AddNumberToObject(fmt, "height", 1080);
        1: 1150:    cJSON_AddNumberToObject(fmt, "frame rate", 24);
        -: 1151:
        1: 1152:    cJSON *img = NULL;
        1: 1153:    cJSON *thm = NULL;
        1: 1154:    cJSON_AddNumberToObject(img, "Width", 800);
        1: 1155:    cJSON_AddNumberToObject(img, "Height", 600);
        1: 1156:    cJSON_AddNumberToObject(thm, "Height", 125);
        1: 1157:}
------------------
_ZN48CjsonFixture_assert_cJSON_AddNumberToObject_Test8TestBodyEv:
        1: 1145:TEST(CjsonFixture, assert_cJSON_AddNumberToObject)
        -: 1146:{
        1: 1147:    cJSON *fmt = NULL;
        1: 1148:    cJSON_AddNumberToObject(fmt, "width", 1920);
        1: 1148-block  0
        1: 1149:    cJSON_AddNumberToObject(fmt, "height", 1080);
        1: 1150:    cJSON_AddNumberToObject(fmt, "frame rate", 24);
        -: 1151:
        1: 1152:    cJSON *img = NULL;
        1: 1153:    cJSON *thm = NULL;
        1: 1154:    cJSON_AddNumberToObject(img, "Width", 800);
        1: 1155:    cJSON_AddNumberToObject(img, "Height", 600);
        1: 1156:    cJSON_AddNumberToObject(thm, "Height", 125);
        1: 1157:}
------------------
_ZN48CjsonFixture_assert_cJSON_AddNumberToObject_TestC1Ev:
        1: 1145:TEST(CjsonFixture, assert_cJSON_AddNumberToObject)
        1: 1145-block  0
------------------
        -: 1158:
        2: 1159:TEST(CjsonFixture, assert_cJSON_AddStringToObject)
        -: 1160:{
        1: 1161:    cJSON *fmt = NULL;
        1: 1162:    cJSON *img = NULL;
        1: 1163:    cJSON *thm = NULL;
        -: 1164:
        1: 1165:    cJSON_AddStringToObject(fmt, "type", "rect");
        1: 1166:    cJSON_AddStringToObject(img, "Title", "View from 15th Floor");
        1: 1167:    cJSON_AddStringToObject(thm, "Url", "http:/*www.example.com/image/481989943");
        1: 1168:    cJSON_AddStringToObject(thm, "Width", "100");
        -: 1169:
        1: 1170:}
------------------
_ZN48CjsonFixture_assert_cJSON_AddStringToObject_Test8TestBodyEv:
        1: 1159:TEST(CjsonFixture, assert_cJSON_AddStringToObject)
        -: 1160:{
        1: 1161:    cJSON *fmt = NULL;
        1: 1162:    cJSON *img = NULL;
        1: 1163:    cJSON *thm = NULL;
        -: 1164:
        1: 1165:    cJSON_AddStringToObject(fmt, "type", "rect");
        1: 1165-block  0
        1: 1166:    cJSON_AddStringToObject(img, "Title", "View from 15th Floor");
        1: 1167:    cJSON_AddStringToObject(thm, "Url", "http:/*www.example.com/image/481989943");
        1: 1168:    cJSON_AddStringToObject(thm, "Width", "100");
        -: 1169:
        1: 1170:}
------------------
_ZN48CjsonFixture_assert_cJSON_AddStringToObject_TestC1Ev:
        1: 1159:TEST(CjsonFixture, assert_cJSON_AddStringToObject)
        1: 1159-block  0
------------------
        -: 1171:
        -: 1172:
        2: 1173:TEST(CjsonFixture, assert_cJSON_AddRawToObject)
        -: 1174:{
        1: 1175:    cJSON *root = cJSON_CreateObject();
        1: 1176:    cJSON *raw = NULL;
        -: 1177:
        1: 1178:    cJSON_AddRawToObject(root, "raw", "{}");
        1: 1179:    cJSON_AddRawToObject(NULL, "raw", "{}");
        1: 1180:    cJSON_AddRawToObject(root, NULL, "{}");
        1: 1181:    cJSON_AddRawToObject(root, "raw", "{}");
        -: 1182:
        1: 1183:}
------------------
_ZN45CjsonFixture_assert_cJSON_AddRawToObject_Test8TestBodyEv:
        1: 1173:TEST(CjsonFixture, assert_cJSON_AddRawToObject)
        -: 1174:{
        1: 1175:    cJSON *root = cJSON_CreateObject();
        1: 1175-block  0
        1: 1176:    cJSON *raw = NULL;
        -: 1177:
        1: 1178:    cJSON_AddRawToObject(root, "raw", "{}");
        1: 1179:    cJSON_AddRawToObject(NULL, "raw", "{}");
        1: 1180:    cJSON_AddRawToObject(root, NULL, "{}");
        1: 1181:    cJSON_AddRawToObject(root, "raw", "{}");
        -: 1182:
        1: 1183:}
------------------
_ZN45CjsonFixture_assert_cJSON_AddRawToObject_TestC1Ev:
        1: 1173:TEST(CjsonFixture, assert_cJSON_AddRawToObject)
        1: 1173-block  0
------------------
        -: 1184://
        2: 1185:TEST(CjsonFixture, assert_cJSON_AddObjectToObject)
        -: 1186:{
        1: 1187:    cJSON *root = cJSON_CreateObject();
        -: 1188:
        1: 1189:    cJSON_AddObjectToObject(root, "object");
        1: 1190:    cJSON_AddObjectToObject(NULL, "object");
        1: 1191:    cJSON_AddObjectToObject(root, NULL);
        1: 1192:}
------------------
_ZN48CjsonFixture_assert_cJSON_AddObjectToObject_Test8TestBodyEv:
        1: 1185:TEST(CjsonFixture, assert_cJSON_AddObjectToObject)
        -: 1186:{
        1: 1187:    cJSON *root = cJSON_CreateObject();
        1: 1187-block  0
        -: 1188:
        1: 1189:    cJSON_AddObjectToObject(root, "object");
        1: 1190:    cJSON_AddObjectToObject(NULL, "object");
        1: 1191:    cJSON_AddObjectToObject(root, NULL);
        1: 1192:}
------------------
_ZN48CjsonFixture_assert_cJSON_AddObjectToObject_TestC1Ev:
        1: 1185:TEST(CjsonFixture, assert_cJSON_AddObjectToObject)
        1: 1185-block  0
------------------
        -: 1193://
        2: 1194:TEST(CjsonFixture, assert_cJSON_AddArrayToObject)
        -: 1195:{
        1: 1196:    cJSON *root = cJSON_CreateObject();
        1: 1197:    cJSON_AddArrayToObject(root, "array");
        -: 1198:
        1: 1199:    cJSON_AddArrayToObject(NULL, "array");
        1: 1200:    cJSON_AddArrayToObject(root, NULL);
        1: 1201:    cJSON_AddArrayToObject(root, "array");
        -: 1202:
        1: 1203:    cJSON *root1 = cJSON_Parse("{}");
        1: 1204:    cJSON_AddArrayToObject(root1, "rd");
        -: 1205:
        1: 1206:    cJSON *monitor = cJSON_CreateObject();
        1: 1207:    cJSON_AddArrayToObject(monitor, "resolutions");
        1: 1208:}
------------------
_ZN47CjsonFixture_assert_cJSON_AddArrayToObject_Test8TestBodyEv:
        1: 1194:TEST(CjsonFixture, assert_cJSON_AddArrayToObject)
        -: 1195:{
        1: 1196:    cJSON *root = cJSON_CreateObject();
        1: 1196-block  0
        1: 1197:    cJSON_AddArrayToObject(root, "array");
        -: 1198:
        1: 1199:    cJSON_AddArrayToObject(NULL, "array");
        1: 1200:    cJSON_AddArrayToObject(root, NULL);
        1: 1201:    cJSON_AddArrayToObject(root, "array");
        -: 1202:
        1: 1203:    cJSON *root1 = cJSON_Parse("{}");
        1: 1204:    cJSON_AddArrayToObject(root1, "rd");
        -: 1205:
        1: 1206:    cJSON *monitor = cJSON_CreateObject();
        1: 1207:    cJSON_AddArrayToObject(monitor, "resolutions");
        1: 1208:}
------------------
_ZN47CjsonFixture_assert_cJSON_AddArrayToObject_TestC1Ev:
        1: 1194:TEST(CjsonFixture, assert_cJSON_AddArrayToObject)
        1: 1194-block  0
------------------
        -: 1209://
        2: 1210:TEST(CjsonFixture, assert_cJSON_DetachItemViaPointer)
        -: 1211:{
        -: 1212:    cJSON list[4];
        -: 1213:    cJSON parent[1];
        -: 1214:
        1: 1215:    memset(list, '\0', sizeof(list));
        -: 1216:
        -: 1217:    /* link the list */
        1: 1218:    list[0].next = &(list[1]);
        1: 1219:    list[1].next = &(list[2]);
        1: 1220:    list[2].next = &(list[3]);
        -: 1221:
        1: 1222:    list[3].prev = &(list[2]);
        1: 1223:    list[2].prev = &(list[1]);
        1: 1224:    list[1].prev = &(list[0]);
        1: 1225:    list[0].prev = &(list[3]);
        -: 1226:
        1: 1227:    parent->child = &list[0];
        1: 1228:    cJSON_DetachItemViaPointer(parent, &(list[1])) == &(list[1]);
        1: 1229:    cJSON_DetachItemViaPointer(parent, &(list[0])) == &(list[0]);
        1: 1230:}
------------------
_ZN51CjsonFixture_assert_cJSON_DetachItemViaPointer_Test8TestBodyEv:
        1: 1210:TEST(CjsonFixture, assert_cJSON_DetachItemViaPointer)
        -: 1211:{
        -: 1212:    cJSON list[4];
        -: 1213:    cJSON parent[1];
        -: 1214:
        1: 1215:    memset(list, '\0', sizeof(list));
        -: 1216:
        -: 1217:    /* link the list */
        1: 1218:    list[0].next = &(list[1]);
        1: 1219:    list[1].next = &(list[2]);
        1: 1220:    list[2].next = &(list[3]);
        -: 1221:
        1: 1222:    list[3].prev = &(list[2]);
        1: 1223:    list[2].prev = &(list[1]);
        1: 1224:    list[1].prev = &(list[0]);
        1: 1225:    list[0].prev = &(list[3]);
        -: 1226:
        1: 1227:    parent->child = &list[0];
        1: 1228:    cJSON_DetachItemViaPointer(parent, &(list[1])) == &(list[1]);
        1: 1228-block  0
        1: 1229:    cJSON_DetachItemViaPointer(parent, &(list[0])) == &(list[0]);
        1: 1230:}
------------------
_ZN51CjsonFixture_assert_cJSON_DetachItemViaPointer_TestC1Ev:
        1: 1210:TEST(CjsonFixture, assert_cJSON_DetachItemViaPointer)
        1: 1210-block  0
------------------
        -: 1231://
        2: 1232:TEST(CjsonFixture, assert_cJSON_DetachItemFromArray)
        -: 1233:{
        1: 1234:    cJSON_DetachItemFromArray(NULL, 0);
        1: 1235:    cJSON_DetachItemFromArray(NULL, -1);
        1: 1236:}
------------------
_ZN50CjsonFixture_assert_cJSON_DetachItemFromArray_Test8TestBodyEv:
        1: 1232:TEST(CjsonFixture, assert_cJSON_DetachItemFromArray)
        -: 1233:{
        1: 1234:    cJSON_DetachItemFromArray(NULL, 0);
        1: 1234-block  0
        1: 1235:    cJSON_DetachItemFromArray(NULL, -1);
        1: 1236:}
------------------
_ZN50CjsonFixture_assert_cJSON_DetachItemFromArray_TestC1Ev:
        1: 1232:TEST(CjsonFixture, assert_cJSON_DetachItemFromArray)
        1: 1232-block  0
------------------
        -: 1237://
        2: 1238:TEST(CjsonFixture, assert_cJSON_DeleteItemFromArray)
        -: 1239:{
        1: 1240:    cJSON_DeleteItemFromArray(NULL, 0);
        1: 1241:}
------------------
_ZN50CjsonFixture_assert_cJSON_DeleteItemFromArray_Test8TestBodyEv:
        1: 1238:TEST(CjsonFixture, assert_cJSON_DeleteItemFromArray)
        -: 1239:{
        1: 1240:    cJSON_DeleteItemFromArray(NULL, 0);
        1: 1240-block  0
        1: 1241:}
------------------
_ZN50CjsonFixture_assert_cJSON_DeleteItemFromArray_TestC1Ev:
        1: 1238:TEST(CjsonFixture, assert_cJSON_DeleteItemFromArray)
        1: 1238-block  0
------------------
        -: 1242://
        2: 1243:TEST(CjsonFixture, assert_cJSON_DetachItemFromObject)
        -: 1244:{
        1: 1245:    cJSON *item = cJSON_CreateString("item");
        1: 1246:    cJSON_DetachItemFromObject(NULL, "item");
        1: 1247:    cJSON_DetachItemFromObject(item, NULL);
        1: 1248:    cJSON_DetachItemFromObjectCaseSensitive(NULL, "item");
        1: 1249:    cJSON_DetachItemFromObjectCaseSensitive(item, NULL);
        1: 1250:}
------------------
_ZN51CjsonFixture_assert_cJSON_DetachItemFromObject_Test8TestBodyEv:
        1: 1243:TEST(CjsonFixture, assert_cJSON_DetachItemFromObject)
        -: 1244:{
        1: 1245:    cJSON *item = cJSON_CreateString("item");
        1: 1245-block  0
        1: 1246:    cJSON_DetachItemFromObject(NULL, "item");
        1: 1247:    cJSON_DetachItemFromObject(item, NULL);
        1: 1248:    cJSON_DetachItemFromObjectCaseSensitive(NULL, "item");
        1: 1249:    cJSON_DetachItemFromObjectCaseSensitive(item, NULL);
        1: 1250:}
------------------
_ZN51CjsonFixture_assert_cJSON_DetachItemFromObject_TestC1Ev:
        1: 1243:TEST(CjsonFixture, assert_cJSON_DetachItemFromObject)
        1: 1243-block  0
------------------
        -: 1251://
        2: 1252:TEST(CjsonFixture, assert_cJSON_DeleteItemFromObject)
        -: 1253:{
        1: 1254:    cJSON *item = cJSON_CreateString("item");
        1: 1255:    cJSON_DeleteItemFromObject(NULL, "item");
        1: 1256:    cJSON_DeleteItemFromObject(item, NULL);
        1: 1257:    cJSON_DeleteItemFromObjectCaseSensitive(NULL, "item");
        1: 1258:    cJSON_DeleteItemFromObjectCaseSensitive(item, NULL);
        1: 1259:}
------------------
_ZN51CjsonFixture_assert_cJSON_DeleteItemFromObject_Test8TestBodyEv:
        1: 1252:TEST(CjsonFixture, assert_cJSON_DeleteItemFromObject)
        -: 1253:{
        1: 1254:    cJSON *item = cJSON_CreateString("item");
        1: 1254-block  0
        1: 1255:    cJSON_DeleteItemFromObject(NULL, "item");
        1: 1256:    cJSON_DeleteItemFromObject(item, NULL);
        1: 1257:    cJSON_DeleteItemFromObjectCaseSensitive(NULL, "item");
        1: 1258:    cJSON_DeleteItemFromObjectCaseSensitive(item, NULL);
        1: 1259:}
------------------
_ZN51CjsonFixture_assert_cJSON_DeleteItemFromObject_TestC1Ev:
        1: 1252:TEST(CjsonFixture, assert_cJSON_DeleteItemFromObject)
        1: 1252-block  0
------------------
        -: 1260://
        2: 1261:TEST(CjsonFixture, assert_cJSON_InsertItemInArray)
        -: 1262:{
        1: 1263:    cJSON *beginning = NULL;
        1: 1264:    cJSON *middle = NULL;
        1: 1265:    cJSON *end = NULL;
        1: 1266:    cJSON *array = NULL;
        -: 1267:
        1: 1268:    beginning = cJSON_CreateNull();
       1*: 1269:    ASSERT_TRUE(beginning!=NULL);
        1: 1270:    middle = cJSON_CreateNull();
       1*: 1271:    ASSERT_TRUE(middle!=NULL);
        1: 1272:    end = cJSON_CreateNull();
       1*: 1273:    ASSERT_TRUE(end!=NULL);
        -: 1274:
        1: 1275:    array = cJSON_CreateArray();
       1*: 1276:    ASSERT_TRUE(array!=NULL);
        -: 1277:
        1: 1278:    cJSON_AddItemToArray(array, beginning);
        1: 1279:    cJSON_AddItemToArray(array, middle);
        1: 1280:    cJSON_AddItemToArray(array, end);
        -: 1281:
        1: 1282:    cJSON *item = cJSON_CreateString("item");
        1: 1283:    cJSON *newitem = cJSON_CreateString("item");
        1: 1284:    cJSON_InsertItemInArray(NULL, 0, item);
        1: 1285:    cJSON_InsertItemInArray(item, 0, NULL);
        1: 1286:    cJSON_InsertItemInArray(item, -1, NULL);
        1: 1287:    cJSON_InsertItemInArray(item, 0, newitem);
        1: 1288:    cJSON_InsertItemInArray(array, 0, newitem);
        1: 1289:    cJSON_InsertItemInArray(array, 0, beginning);
        -: 1290:}
------------------
_ZN48CjsonFixture_assert_cJSON_InsertItemInArray_Test8TestBodyEv:
        1: 1261:TEST(CjsonFixture, assert_cJSON_InsertItemInArray)
        -: 1262:{
        1: 1263:    cJSON *beginning = NULL;
        1: 1264:    cJSON *middle = NULL;
        1: 1265:    cJSON *end = NULL;
        1: 1266:    cJSON *array = NULL;
        -: 1267:
        1: 1268:    beginning = cJSON_CreateNull();
        1: 1268-block  0
       1*: 1269:    ASSERT_TRUE(beginning!=NULL);
    %%%%%: 1269-block  0
    %%%%%: 1269-block  1
    %%%%%: 1269-block  2
    %%%%%: 1269-block  3
    %%%%%: 1269-block  4
    $$$$$: 1269-block  5
    $$$$$: 1269-block  6
    $$$$$: 1269-block  7
    $$$$$: 1269-block  8
    $$$$$: 1269-block  9
    $$$$$: 1269-block 10
    $$$$$: 1269-block 11
        1: 1270:    middle = cJSON_CreateNull();
        1: 1270-block  0
       1*: 1271:    ASSERT_TRUE(middle!=NULL);
    %%%%%: 1271-block  0
    %%%%%: 1271-block  1
    %%%%%: 1271-block  2
    %%%%%: 1271-block  3
    %%%%%: 1271-block  4
    $$$$$: 1271-block  5
    $$$$$: 1271-block  6
    $$$$$: 1271-block  7
    $$$$$: 1271-block  8
    $$$$$: 1271-block  9
    $$$$$: 1271-block 10
    $$$$$: 1271-block 11
        1: 1272:    end = cJSON_CreateNull();
        1: 1272-block  0
       1*: 1273:    ASSERT_TRUE(end!=NULL);
    %%%%%: 1273-block  0
    %%%%%: 1273-block  1
    %%%%%: 1273-block  2
    %%%%%: 1273-block  3
    %%%%%: 1273-block  4
    $$$$$: 1273-block  5
    $$$$$: 1273-block  6
    $$$$$: 1273-block  7
    $$$$$: 1273-block  8
    $$$$$: 1273-block  9
    $$$$$: 1273-block 10
    $$$$$: 1273-block 11
        -: 1274:
        1: 1275:    array = cJSON_CreateArray();
        1: 1275-block  0
       1*: 1276:    ASSERT_TRUE(array!=NULL);
    %%%%%: 1276-block  0
    %%%%%: 1276-block  1
    %%%%%: 1276-block  2
    %%%%%: 1276-block  3
    %%%%%: 1276-block  4
    $$$$$: 1276-block  5
    $$$$$: 1276-block  6
    $$$$$: 1276-block  7
    $$$$$: 1276-block  8
    $$$$$: 1276-block  9
    $$$$$: 1276-block 10
    $$$$$: 1276-block 11
        -: 1277:
        1: 1278:    cJSON_AddItemToArray(array, beginning);
        1: 1278-block  0
        1: 1279:    cJSON_AddItemToArray(array, middle);
        1: 1280:    cJSON_AddItemToArray(array, end);
        -: 1281:
        1: 1282:    cJSON *item = cJSON_CreateString("item");
        1: 1283:    cJSON *newitem = cJSON_CreateString("item");
        1: 1284:    cJSON_InsertItemInArray(NULL, 0, item);
        1: 1285:    cJSON_InsertItemInArray(item, 0, NULL);
        1: 1286:    cJSON_InsertItemInArray(item, -1, NULL);
        1: 1287:    cJSON_InsertItemInArray(item, 0, newitem);
        1: 1288:    cJSON_InsertItemInArray(array, 0, newitem);
        1: 1289:    cJSON_InsertItemInArray(array, 0, beginning);
        -: 1290:}
------------------
_ZN48CjsonFixture_assert_cJSON_InsertItemInArray_TestC1Ev:
        1: 1261:TEST(CjsonFixture, assert_cJSON_InsertItemInArray)
        1: 1261-block  0
------------------
        -: 1291://
        2: 1292:TEST(CjsonFixture, assert_cJSON_ReplaceItemViaPointer)
        -: 1293:{
        -: 1294:    cJSON replacements[3];
        1: 1295:    cJSON *beginning = NULL;
        1: 1296:    cJSON *middle = NULL;
        1: 1297:    cJSON *end = NULL;
        1: 1298:    cJSON *array = NULL;
        -: 1299:
        1: 1300:    beginning = cJSON_CreateNull();
       1*: 1301:    ASSERT_TRUE(beginning!=NULL);
        1: 1302:    middle = cJSON_CreateNull();
       1*: 1303:    ASSERT_TRUE(middle!=NULL);
        1: 1304:    end = cJSON_CreateNull();
       1*: 1305:    ASSERT_TRUE(end!=NULL);
        -: 1306:
        1: 1307:    array = cJSON_CreateArray();
       1*: 1308:    ASSERT_TRUE(array!=NULL);
        -: 1309:
        1: 1310:    cJSON_AddItemToArray(array, beginning);
        1: 1311:    cJSON_AddItemToArray(array, middle);
        1: 1312:    cJSON_AddItemToArray(array, end);
        -: 1313:
        -: 1314:
        1: 1315:    memset(replacements, '\0', sizeof(replacements));
        -: 1316:
        -: 1317:
        1: 1318:    cJSON_ReplaceItemViaPointer(array, beginning, beginning);
        1: 1319:    cJSON_ReplaceItemViaPointer(array, middle, &(replacements[1]));
        1: 1320:    cJSON_ReplaceItemViaPointer(array, end, &(replacements[2]));
        -: 1321:
        1: 1322:    cJSON *item = cJSON_CreateString("item");
        1: 1323:    cJSON_ReplaceItemViaPointer(NULL, item, item);
        1: 1324:    cJSON_ReplaceItemViaPointer(item, NULL, item);
        1: 1325:    cJSON_ReplaceItemViaPointer(item, item, NULL);
        -: 1326:
        1: 1327:    cJSON_ReplaceItemInArray(NULL, 0, item);
        1: 1328:    cJSON_ReplaceItemInArray(item, 0, NULL);
        1: 1329:    cJSON_ReplaceItemInArray(item, -1, NULL);
        1: 1330:    cJSON *root = NULL;
        1: 1331:    root = cJSON_CreateArray();
        1: 1332:    cJSON_ReplaceItemInArray(root, 1, cJSON_CreateString("Replacement"));
        -: 1333:}
------------------
_ZN52CjsonFixture_assert_cJSON_ReplaceItemViaPointer_Test8TestBodyEv:
        1: 1292:TEST(CjsonFixture, assert_cJSON_ReplaceItemViaPointer)
        -: 1293:{
        -: 1294:    cJSON replacements[3];
        1: 1295:    cJSON *beginning = NULL;
        1: 1296:    cJSON *middle = NULL;
        1: 1297:    cJSON *end = NULL;
        1: 1298:    cJSON *array = NULL;
        -: 1299:
        1: 1300:    beginning = cJSON_CreateNull();
        1: 1300-block  0
       1*: 1301:    ASSERT_TRUE(beginning!=NULL);
        1: 1301-block  0
    %%%%%: 1301-block  1
    %%%%%: 1301-block  2
    %%%%%: 1301-block  3
    %%%%%: 1301-block  4
    %%%%%: 1301-block  5
    $$$$$: 1301-block  6
    $$$$$: 1301-block  7
    $$$$$: 1301-block  8
    $$$$$: 1301-block  9
    $$$$$: 1301-block 10
    $$$$$: 1301-block 11
    $$$$$: 1301-block 12
        1: 1302:    middle = cJSON_CreateNull();
        1: 1302-block  0
       1*: 1303:    ASSERT_TRUE(middle!=NULL);
        1: 1303-block  0
    %%%%%: 1303-block  1
    %%%%%: 1303-block  2
    %%%%%: 1303-block  3
    %%%%%: 1303-block  4
    %%%%%: 1303-block  5
    $$$$$: 1303-block  6
    $$$$$: 1303-block  7
    $$$$$: 1303-block  8
    $$$$$: 1303-block  9
    $$$$$: 1303-block 10
    $$$$$: 1303-block 11
    $$$$$: 1303-block 12
        1: 1304:    end = cJSON_CreateNull();
        1: 1304-block  0
       1*: 1305:    ASSERT_TRUE(end!=NULL);
        1: 1305-block  0
    %%%%%: 1305-block  1
    %%%%%: 1305-block  2
    %%%%%: 1305-block  3
    %%%%%: 1305-block  4
    %%%%%: 1305-block  5
    $$$$$: 1305-block  6
    $$$$$: 1305-block  7
    $$$$$: 1305-block  8
    $$$$$: 1305-block  9
    $$$$$: 1305-block 10
    $$$$$: 1305-block 11
    $$$$$: 1305-block 12
        -: 1306:
        1: 1307:    array = cJSON_CreateArray();
        1: 1307-block  0
       1*: 1308:    ASSERT_TRUE(array!=NULL);
        1: 1308-block  0
    %%%%%: 1308-block  1
    %%%%%: 1308-block  2
    %%%%%: 1308-block  3
    %%%%%: 1308-block  4
    %%%%%: 1308-block  5
    $$$$$: 1308-block  6
    $$$$$: 1308-block  7
    $$$$$: 1308-block  8
    $$$$$: 1308-block  9
    $$$$$: 1308-block 10
    $$$$$: 1308-block 11
    $$$$$: 1308-block 12
        -: 1309:
        1: 1310:    cJSON_AddItemToArray(array, beginning);
        1: 1310-block  0
        1: 1311:    cJSON_AddItemToArray(array, middle);
        1: 1312:    cJSON_AddItemToArray(array, end);
        -: 1313:
        -: 1314:
        1: 1315:    memset(replacements, '\0', sizeof(replacements));
        -: 1316:
        -: 1317:
        1: 1318:    cJSON_ReplaceItemViaPointer(array, beginning, beginning);
        1: 1319:    cJSON_ReplaceItemViaPointer(array, middle, &(replacements[1]));
        1: 1319-block  0
        1: 1320:    cJSON_ReplaceItemViaPointer(array, end, &(replacements[2]));
        1: 1320-block  0
        -: 1321:
        1: 1322:    cJSON *item = cJSON_CreateString("item");
        1: 1322-block  0
        1: 1323:    cJSON_ReplaceItemViaPointer(NULL, item, item);
        1: 1323-block  0
        1: 1324:    cJSON_ReplaceItemViaPointer(item, NULL, item);
        1: 1324-block  0
        1: 1325:    cJSON_ReplaceItemViaPointer(item, item, NULL);
        1: 1325-block  0
        -: 1326:
        1: 1327:    cJSON_ReplaceItemInArray(NULL, 0, item);
        1: 1327-block  0
        1: 1328:    cJSON_ReplaceItemInArray(item, 0, NULL);
        1: 1328-block  0
        1: 1329:    cJSON_ReplaceItemInArray(item, -1, NULL);
        1: 1329-block  0
        1: 1330:    cJSON *root = NULL;
        1: 1331:    root = cJSON_CreateArray();
        1: 1331-block  0
        1: 1332:    cJSON_ReplaceItemInArray(root, 1, cJSON_CreateString("Replacement"));
        1: 1332-block  0
        1: 1332-block  1
        -: 1333:}
------------------
_ZN52CjsonFixture_assert_cJSON_ReplaceItemViaPointer_TestC1Ev:
        1: 1292:TEST(CjsonFixture, assert_cJSON_ReplaceItemViaPointer)
        1: 1292-block  0
------------------
        -: 1334://
        2: 1335:TEST(CjsonFixture, assert_cJSON_ReplaceItemInObject)
        -: 1336:{
        -: 1337:
        1: 1338:    cJSON root[1] = {{ NULL, NULL, NULL, 0, NULL, 0, 0, NULL }};
        1: 1339:    cJSON *replacement = NULL;
        1: 1340:    cJSON_ReplaceItemInObject(root, "child", replacement);
        -: 1341:
        1: 1342:    cJSON *item = cJSON_CreateString("item");
        -: 1343:
        -: 1344:
        1: 1345:    cJSON_ReplaceItemInObject(NULL, "item", item) ;
        1: 1346:    cJSON_ReplaceItemInObject(item, NULL, item);
        1: 1347:    cJSON_ReplaceItemInObject(item, "item", NULL);
        -: 1348:
        -: 1349:
        1: 1350:    cJSON_ReplaceItemInObjectCaseSensitive(NULL, "item", item);
        1: 1351:    cJSON_ReplaceItemInObjectCaseSensitive(item, NULL, item);
        1: 1352:    cJSON_ReplaceItemInObjectCaseSensitive(item, "item", NULL);
        1: 1353:}
------------------
_ZN50CjsonFixture_assert_cJSON_ReplaceItemInObject_Test8TestBodyEv:
        1: 1335:TEST(CjsonFixture, assert_cJSON_ReplaceItemInObject)
        -: 1336:{
        -: 1337:
        1: 1338:    cJSON root[1] = {{ NULL, NULL, NULL, 0, NULL, 0, 0, NULL }};
        1: 1339:    cJSON *replacement = NULL;
        1: 1340:    cJSON_ReplaceItemInObject(root, "child", replacement);
        1: 1340-block  0
        -: 1341:
        1: 1342:    cJSON *item = cJSON_CreateString("item");
        1: 1342-block  0
        -: 1343:
        -: 1344:
        1: 1345:    cJSON_ReplaceItemInObject(NULL, "item", item) ;
        1: 1345-block  0
        1: 1346:    cJSON_ReplaceItemInObject(item, NULL, item);
        1: 1346-block  0
        1: 1347:    cJSON_ReplaceItemInObject(item, "item", NULL);
        1: 1347-block  0
        -: 1348:
        -: 1349:
        1: 1350:    cJSON_ReplaceItemInObjectCaseSensitive(NULL, "item", item);
        1: 1350-block  0
        1: 1351:    cJSON_ReplaceItemInObjectCaseSensitive(item, NULL, item);
        1: 1351-block  0
        1: 1352:    cJSON_ReplaceItemInObjectCaseSensitive(item, "item", NULL);
        1: 1352-block  0
        1: 1353:}
        1: 1353-block  0
------------------
_ZN50CjsonFixture_assert_cJSON_ReplaceItemInObject_TestC1Ev:
        1: 1335:TEST(CjsonFixture, assert_cJSON_ReplaceItemInObject)
        1: 1335-block  0
------------------
        -: 1354://
        2: 1355:TEST(CjsonFixture, assert_cJSON_CreateStringReference)
        -: 1356:{
        1: 1357:    const char *string = "I am a string!";
        1: 1358:    cJSON_CreateStringReference(string);
        1: 1359:}
------------------
_ZN52CjsonFixture_assert_cJSON_CreateStringReference_Test8TestBodyEv:
        1: 1355:TEST(CjsonFixture, assert_cJSON_CreateStringReference)
        -: 1356:{
        1: 1357:    const char *string = "I am a string!";
        1: 1358:    cJSON_CreateStringReference(string);
        1: 1358-block  0
        1: 1359:}
------------------
_ZN52CjsonFixture_assert_cJSON_CreateStringReference_TestC1Ev:
        1: 1355:TEST(CjsonFixture, assert_cJSON_CreateStringReference)
        1: 1355-block  0
------------------
        -: 1360://
        2: 1361:TEST(CjsonFixture, assert_cJSON_CreateObjectReference)
        -: 1362:{
        1: 1363:    cJSON *number = cJSON_CreateNumber(42);
        1: 1364:    cJSON_CreateObjectReference(number);
        1: 1365:    cJSON_CreateArrayReference(number);
        -: 1366:
        1: 1367:    int numbers[3][3] =
        -: 1368:            {
        -: 1369:                    {0, -1, 0},
        -: 1370:                    {1, 0, 0},
        -: 1371:                    {0 ,0, 1}
        -: 1372:            };
        4: 1373:    for (int i = 0; i < 3; i++){
        3: 1374:        cJSON_CreateIntArray(numbers[i], 3);
        -: 1375:    }
        -: 1376:
        1: 1377:    cJSON_CreateIntArray(numbers[1], -3);
        -: 1378:
        1: 1379:    cJSON_CreateFloatArray(NULL, 10);
        -: 1380:
        1: 1381:    float number1=3;
        1: 1382:    cJSON_CreateFloatArray(&number1, 10);
        -: 1383://    ASSERT_NULL(cJSON_CreateFloatArray(NULL, 10));    ASSERT如何写
        -: 1384:
        1: 1385:}
------------------
_ZN52CjsonFixture_assert_cJSON_CreateObjectReference_Test8TestBodyEv:
        1: 1361:TEST(CjsonFixture, assert_cJSON_CreateObjectReference)
        -: 1362:{
        1: 1363:    cJSON *number = cJSON_CreateNumber(42);
        1: 1363-block  0
        1: 1364:    cJSON_CreateObjectReference(number);
        1: 1364-block  0
        1: 1365:    cJSON_CreateArrayReference(number);
        1: 1365-block  0
        -: 1366:
        1: 1367:    int numbers[3][3] =
        -: 1368:            {
        -: 1369:                    {0, -1, 0},
        -: 1370:                    {1, 0, 0},
        -: 1371:                    {0 ,0, 1}
        -: 1372:            };
        4: 1373:    for (int i = 0; i < 3; i++){
        1: 1373-block  0
        4: 1373-block  1
        3: 1373-block  2
        3: 1374:        cJSON_CreateIntArray(numbers[i], 3);
        3: 1374-block  0
        -: 1375:    }
        -: 1376:
        1: 1377:    cJSON_CreateIntArray(numbers[1], -3);
        1: 1377-block  0
        -: 1378:
        1: 1379:    cJSON_CreateFloatArray(NULL, 10);
        1: 1379-block  0
        -: 1380:
        1: 1381:    float number1=3;
        1: 1382:    cJSON_CreateFloatArray(&number1, 10);
        1: 1382-block  0
        -: 1383://    ASSERT_NULL(cJSON_CreateFloatArray(NULL, 10));    ASSERT如何写
        -: 1384:
        1: 1385:}
        1: 1385-block  0
------------------
_ZN52CjsonFixture_assert_cJSON_CreateObjectReference_TestC1Ev:
        1: 1361:TEST(CjsonFixture, assert_cJSON_CreateObjectReference)
        1: 1361-block  0
------------------
        -: 1386://
        2: 1387:TEST(CjsonFixture, assert_cJSON_CreateDoubleArray)
        -: 1388:{
        -: 1389://    ASSERT_NULL(cJSON_CreateDoubleArray(NULL, 10));
        1: 1390:    cJSON_CreateDoubleArray(NULL, 10);
        -: 1391:
        1: 1392:    double number1=3;
        1: 1393:    cJSON_CreateDoubleArray(&number1, 10);
        1: 1394:}
------------------
_ZN48CjsonFixture_assert_cJSON_CreateDoubleArray_Test8TestBodyEv:
        1: 1387:TEST(CjsonFixture, assert_cJSON_CreateDoubleArray)
        -: 1388:{
        -: 1389://    ASSERT_NULL(cJSON_CreateDoubleArray(NULL, 10));
        1: 1390:    cJSON_CreateDoubleArray(NULL, 10);
        1: 1390-block  0
        -: 1391:
        1: 1392:    double number1=3;
        1: 1393:    cJSON_CreateDoubleArray(&number1, 10);
        1: 1393-block  0
        1: 1394:}
        1: 1394-block  0
------------------
_ZN48CjsonFixture_assert_cJSON_CreateDoubleArray_TestC1Ev:
        1: 1387:TEST(CjsonFixture, assert_cJSON_CreateDoubleArray)
        1: 1387-block  0
------------------
        -: 1395://
        -: 1396://
        2: 1397:TEST(CjsonFixture, assert_cJSON_CreateStringArray)
        -: 1398:{
        -: 1399://    TEST_ASSERT_NULL(cJSON_CreateStringArray(NULL, 10));
        1: 1400:    cJSON_CreateStringArray(NULL, 10);
        -: 1401:
        1: 1402:    const char *strings[7] =
        -: 1403:            {
        -: 1404:                    "Sunday",
        -: 1405:                    "Monday",
        -: 1406:                    "Tuesday",
        -: 1407:                    "Wednesday",
        -: 1408:                    "Thursday",
        -: 1409:                    "Friday",
        -: 1410:                    "Saturday"
        -: 1411:            };
        1: 1412:    cJSON_CreateStringArray(strings, 7);
        1: 1413:}
------------------
_ZN48CjsonFixture_assert_cJSON_CreateStringArray_Test8TestBodyEv:
        1: 1397:TEST(CjsonFixture, assert_cJSON_CreateStringArray)
        -: 1398:{
        -: 1399://    TEST_ASSERT_NULL(cJSON_CreateStringArray(NULL, 10));
        1: 1400:    cJSON_CreateStringArray(NULL, 10);
        1: 1400-block  0
        -: 1401:
        1: 1402:    const char *strings[7] =
        -: 1403:            {
        -: 1404:                    "Sunday",
        -: 1405:                    "Monday",
        -: 1406:                    "Tuesday",
        -: 1407:                    "Wednesday",
        -: 1408:                    "Thursday",
        -: 1409:                    "Friday",
        -: 1410:                    "Saturday"
        -: 1411:            };
        1: 1412:    cJSON_CreateStringArray(strings, 7);
        1: 1412-block  0
        1: 1413:}
        1: 1413-block  0
------------------
_ZN48CjsonFixture_assert_cJSON_CreateStringArray_TestC1Ev:
        1: 1397:TEST(CjsonFixture, assert_cJSON_CreateStringArray)
        1: 1397-block  0
------------------
        -: 1414://
        -: 1415://
        -: 1416://
        -: 1417://
        2: 1418:TEST(CjsonFixture, assert_cJSON_Duplicate)
        -: 1419:{
        -: 1420://    TEST_ASSERT_NULL(cJSON_Duplicate(NULL, true));
        1: 1421:    cJSON_Duplicate(NULL, true);
        -: 1422:
        1: 1423:    cJSON *doc = NULL;
        1: 1424:    cJSON *patch = NULL;
        1: 1425:    cJSON *expected = NULL;
        1: 1426:    cJSON *error_element = NULL;
        1: 1427:    cJSON *comment = NULL;
        1: 1428:    cJSON *disabled = NULL;
        -: 1429:
        1: 1430:    cJSON *object = NULL;
        1: 1431:    cJSON_bool successful = false;
        -: 1432:
        1: 1433:    cJSON *test=cJSON_CreateString("test");
        -: 1434:
        1: 1435:    object = cJSON_Duplicate(test, true);
        -: 1436:
        1: 1437:    cJSON *array = cJSON_CreateArray();
       1*: 1438:    ASSERT_TRUE(array!=NULL);
        -: 1439:
        1: 1440:    cJSON_AddItemToArray(array, test);
        1: 1441:    object = cJSON_Duplicate(array, true);
        -: 1442:}
------------------
_ZN40CjsonFixture_assert_cJSON_Duplicate_Test8TestBodyEv:
        1: 1418:TEST(CjsonFixture, assert_cJSON_Duplicate)
        -: 1419:{
        -: 1420://    TEST_ASSERT_NULL(cJSON_Duplicate(NULL, true));
        1: 1421:    cJSON_Duplicate(NULL, true);
        1: 1421-block  0
        -: 1422:
        1: 1423:    cJSON *doc = NULL;
        1: 1424:    cJSON *patch = NULL;
        1: 1425:    cJSON *expected = NULL;
        1: 1426:    cJSON *error_element = NULL;
        1: 1427:    cJSON *comment = NULL;
        1: 1428:    cJSON *disabled = NULL;
        -: 1429:
        1: 1430:    cJSON *object = NULL;
        1: 1431:    cJSON_bool successful = false;
        -: 1432:
        1: 1433:    cJSON *test=cJSON_CreateString("test");
        -: 1434:
        1: 1435:    object = cJSON_Duplicate(test, true);
        -: 1436:
        1: 1437:    cJSON *array = cJSON_CreateArray();
       1*: 1438:    ASSERT_TRUE(array!=NULL);
    %%%%%: 1438-block  0
    %%%%%: 1438-block  1
    %%%%%: 1438-block  2
    %%%%%: 1438-block  3
    %%%%%: 1438-block  4
    $$$$$: 1438-block  5
    $$$$$: 1438-block  6
    $$$$$: 1438-block  7
    $$$$$: 1438-block  8
    $$$$$: 1438-block  9
    $$$$$: 1438-block 10
    $$$$$: 1438-block 11
        -: 1439:
        1: 1440:    cJSON_AddItemToArray(array, test);
        1: 1440-block  0
        1: 1441:    object = cJSON_Duplicate(array, true);
        -: 1442:}
------------------
_ZN40CjsonFixture_assert_cJSON_Duplicate_TestC1Ev:
        1: 1418:TEST(CjsonFixture, assert_cJSON_Duplicate)
        1: 1418-block  0
------------------
        -: 1443://
        2: 1444:TEST(CjsonFixture, assert_cJSON_Minify)
        -: 1445:{
        -: 1446:
        1: 1447:    char unclosed_multiline_comment[] = "\" /* bla";
        1: 1448:    char pending_escape[] = "\"\\";
        -: 1449:
        1: 1450:    cJSON_Minify(unclosed_multiline_comment);
        1: 1451:    cJSON_Minify(pending_escape);
        1: 1452:}
------------------
_ZN37CjsonFixture_assert_cJSON_Minify_Test8TestBodyEv:
        1: 1444:TEST(CjsonFixture, assert_cJSON_Minify)
        -: 1445:{
        -: 1446:
        1: 1447:    char unclosed_multiline_comment[] = "\" /* bla";
        1: 1448:    char pending_escape[] = "\"\\";
        -: 1449:
        1: 1450:    cJSON_Minify(unclosed_multiline_comment);
        1: 1450-block  0
        1: 1451:    cJSON_Minify(pending_escape);
        1: 1452:}
------------------
_ZN37CjsonFixture_assert_cJSON_Minify_TestC1Ev:
        1: 1444:TEST(CjsonFixture, assert_cJSON_Minify)
        1: 1444-block  0
------------------
        2: 1453:TEST(CjsonFixture, assert_cJSON_Minify2){
        1: 1454:    const char to_minify[] = "{// this is {} \"some kind\" of [] comment /*, don't you see\n}";
        -: 1455:
        1: 1456:    char* minified = (char*) malloc(sizeof(to_minify));
       1*: 1457:    ASSERT_TRUE(minified!=NULL);
        1: 1458:    strcpy(minified, to_minify);
        -: 1459:
        1: 1460:    cJSON_Minify(minified);
        1: 1461:    free(minified);
        -: 1462:}
------------------
_ZN38CjsonFixture_assert_cJSON_Minify2_Test8TestBodyEv:
        1: 1453:TEST(CjsonFixture, assert_cJSON_Minify2){
        1: 1454:    const char to_minify[] = "{// this is {} \"some kind\" of [] comment /*, don't you see\n}";
        -: 1455:
        1: 1456:    char* minified = (char*) malloc(sizeof(to_minify));
       1*: 1457:    ASSERT_TRUE(minified!=NULL);
        1: 1457-block  0
    %%%%%: 1457-block  1
    %%%%%: 1457-block  2
    %%%%%: 1457-block  3
    %%%%%: 1457-block  4
    %%%%%: 1457-block  5
    $$$$$: 1457-block  6
    $$$$$: 1457-block  7
    $$$$$: 1457-block  8
    $$$$$: 1457-block  9
    $$$$$: 1457-block 10
    $$$$$: 1457-block 11
    $$$$$: 1457-block 12
        1: 1458:    strcpy(minified, to_minify);
        -: 1459:
        1: 1460:    cJSON_Minify(minified);
        1: 1460-block  0
        1: 1461:    free(minified);
        -: 1462:}
------------------
_ZN38CjsonFixture_assert_cJSON_Minify2_TestC1Ev:
        1: 1453:TEST(CjsonFixture, assert_cJSON_Minify2){
        1: 1453-block  0
------------------
        2: 1463:TEST(CjsonFixture, assert_cJSON_Minify3){
        1: 1464:    const char to_minify[] = "{ \"key\":\ttrue\r\n    }";
        -: 1465:
        1: 1466:    char* minified = (char*) malloc(sizeof(to_minify));
       1*: 1467:    ASSERT_TRUE(minified!=NULL);
        1: 1468:    strcpy(minified, to_minify);
        -: 1469:
        1: 1470:    cJSON_Minify(minified);
        -: 1471:
        1: 1472:    free(minified);
        -: 1473:}
------------------
_ZN38CjsonFixture_assert_cJSON_Minify3_Test8TestBodyEv:
        1: 1463:TEST(CjsonFixture, assert_cJSON_Minify3){
        1: 1464:    const char to_minify[] = "{ \"key\":\ttrue\r\n    }";
        -: 1465:
        1: 1466:    char* minified = (char*) malloc(sizeof(to_minify));
       1*: 1467:    ASSERT_TRUE(minified!=NULL);
        1: 1467-block  0
    %%%%%: 1467-block  1
    %%%%%: 1467-block  2
    %%%%%: 1467-block  3
    %%%%%: 1467-block  4
    %%%%%: 1467-block  5
    $$$$$: 1467-block  6
    $$$$$: 1467-block  7
    $$$$$: 1467-block  8
    $$$$$: 1467-block  9
    $$$$$: 1467-block 10
    $$$$$: 1467-block 11
    $$$$$: 1467-block 12
        1: 1468:    strcpy(minified, to_minify);
        -: 1469:
        1: 1470:    cJSON_Minify(minified);
        1: 1470-block  0
        -: 1471:
        1: 1472:    free(minified);
        -: 1473:}
------------------
_ZN38CjsonFixture_assert_cJSON_Minify3_TestC1Ev:
        1: 1463:TEST(CjsonFixture, assert_cJSON_Minify3){
        1: 1463-block  0
------------------
        2: 1474:TEST(CjsonFixture, assert_cJSON_Minify4){
        1: 1475:    const char to_minify[] = "{/* this is\n a /* multi\n //line \n {comment \"\\\" */}";
        -: 1476:
        1: 1477:    char* minified = (char*) malloc(sizeof(to_minify));
       1*: 1478:    ASSERT_TRUE(minified!=NULL);
        1: 1479:    strcpy(minified, to_minify);
        -: 1480:
        1: 1481:    cJSON_Minify(minified);
        1: 1482:    free(minified);
        -: 1483:}
------------------
_ZN38CjsonFixture_assert_cJSON_Minify4_Test8TestBodyEv:
        1: 1474:TEST(CjsonFixture, assert_cJSON_Minify4){
        1: 1475:    const char to_minify[] = "{/* this is\n a /* multi\n //line \n {comment \"\\\" */}";
        -: 1476:
        1: 1477:    char* minified = (char*) malloc(sizeof(to_minify));
       1*: 1478:    ASSERT_TRUE(minified!=NULL);
        1: 1478-block  0
    %%%%%: 1478-block  1
    %%%%%: 1478-block  2
    %%%%%: 1478-block  3
    %%%%%: 1478-block  4
    %%%%%: 1478-block  5
    $$$$$: 1478-block  6
    $$$$$: 1478-block  7
    $$$$$: 1478-block  8
    $$$$$: 1478-block  9
    $$$$$: 1478-block 10
    $$$$$: 1478-block 11
    $$$$$: 1478-block 12
        1: 1479:    strcpy(minified, to_minify);
        -: 1480:
        1: 1481:    cJSON_Minify(minified);
        1: 1481-block  0
        1: 1482:    free(minified);
        -: 1483:}
------------------
_ZN38CjsonFixture_assert_cJSON_Minify4_TestC1Ev:
        1: 1474:TEST(CjsonFixture, assert_cJSON_Minify4){
        1: 1474-block  0
------------------
        2: 1484:TEST(CjsonFixture, assert_cJSON_Minify5){
        1: 1485:    const char to_minify[] = "\"this is a string \\\" \\t bla\"";
        -: 1486:
        1: 1487:    char* minified = (char*) malloc(sizeof(to_minify));
       1*: 1488:    ASSERT_TRUE(minified!=NULL);
        1: 1489:    strcpy(minified, to_minify);
        -: 1490:
        1: 1491:    cJSON_Minify(minified);
        -: 1492:
        1: 1493:    free(minified);
        -: 1494:}
------------------
_ZN38CjsonFixture_assert_cJSON_Minify5_Test8TestBodyEv:
        1: 1484:TEST(CjsonFixture, assert_cJSON_Minify5){
        1: 1485:    const char to_minify[] = "\"this is a string \\\" \\t bla\"";
        -: 1486:
        1: 1487:    char* minified = (char*) malloc(sizeof(to_minify));
       1*: 1488:    ASSERT_TRUE(minified!=NULL);
        1: 1488-block  0
    %%%%%: 1488-block  1
    %%%%%: 1488-block  2
    %%%%%: 1488-block  3
    %%%%%: 1488-block  4
    %%%%%: 1488-block  5
    $$$$$: 1488-block  6
    $$$$$: 1488-block  7
    $$$$$: 1488-block  8
    $$$$$: 1488-block  9
    $$$$$: 1488-block 10
    $$$$$: 1488-block 11
    $$$$$: 1488-block 12
        1: 1489:    strcpy(minified, to_minify);
        -: 1490:
        1: 1491:    cJSON_Minify(minified);
        1: 1491-block  0
        -: 1492:
        1: 1493:    free(minified);
        -: 1494:}
------------------
_ZN38CjsonFixture_assert_cJSON_Minify5_TestC1Ev:
        1: 1484:TEST(CjsonFixture, assert_cJSON_Minify5){
        1: 1484-block  0
------------------
        2: 1495:TEST(CjsonFixture, assert_cJSON_Minify6){
        1: 1496:    const char to_minify[] =
        -: 1497:            "{\n"
        -: 1498:            "    \"glossary\": { // comment\n"
        -: 1499:            "        \"title\": \"example glossary\",\n"
        -: 1500:            "  /* multi\n"
        -: 1501:            " line */\n"
        -: 1502:            "		\"GlossDiv\": {\n"
        -: 1503:            "            \"title\": \"S\",\n"
        -: 1504:            "			\"GlossList\": {\n"
        -: 1505:            "                \"GlossEntry\": {\n"
        -: 1506:            "                    \"ID\": \"SGML\",\n"
        -: 1507:            "					\"SortAs\": \"SGML\",\n"
        -: 1508:            "					\"Acronym\": \"SGML\",\n"
        -: 1509:            "					\"Abbrev\": \"ISO 8879:1986\",\n"
        -: 1510:            "					\"GlossDef\": {\n"
        -: 1511:            "						\"GlossSeeAlso\": [\"GML\", \"XML\"]\n"
        -: 1512:            "                    },\n"
        -: 1513:            "					\"GlossSee\": \"markup\"\n"
        -: 1514:            "                }\n"
        -: 1515:            "            }\n"
        -: 1516:            "        }\n"
        -: 1517:            "    }\n"
        -: 1518:            "}";
        1: 1519:    const char* minified =
        -: 1520:            "{"
        -: 1521:            "\"glossary\":{"
        -: 1522:            "\"title\":\"example glossary\","
        -: 1523:            "\"GlossDiv\":{"
        -: 1524:            "\"title\":\"S\","
        -: 1525:            "\"GlossList\":{"
        -: 1526:            "\"GlossEntry\":{"
        -: 1527:            "\"ID\":\"SGML\","
        -: 1528:            "\"SortAs\":\"SGML\","
        -: 1529:            "\"Acronym\":\"SGML\","
        -: 1530:            "\"Abbrev\":\"ISO 8879:1986\","
        -: 1531:            "\"GlossDef\":{"
        -: 1532:            "\"GlossSeeAlso\":[\"GML\",\"XML\"]"
        -: 1533:            "},"
        -: 1534:            "\"GlossSee\":\"markup\""
        -: 1535:            "}"
        -: 1536:            "}"
        -: 1537:            "}"
        -: 1538:            "}"
        -: 1539:            "}";
        -: 1540:
        1: 1541:    char *buffer = (char*) malloc(sizeof(to_minify));
        1: 1542:    strcpy(buffer, to_minify);
        -: 1543:
        1: 1544:    cJSON_Minify(buffer);
        1: 1545:    cJSON_Minify(NULL);
        1: 1546:    free(buffer);
        1: 1547:}
------------------
_ZN38CjsonFixture_assert_cJSON_Minify6_Test8TestBodyEv:
        1: 1495:TEST(CjsonFixture, assert_cJSON_Minify6){
        1: 1496:    const char to_minify[] =
        -: 1497:            "{\n"
        -: 1498:            "    \"glossary\": { // comment\n"
        -: 1499:            "        \"title\": \"example glossary\",\n"
        -: 1500:            "  /* multi\n"
        -: 1501:            " line */\n"
        -: 1502:            "		\"GlossDiv\": {\n"
        -: 1503:            "            \"title\": \"S\",\n"
        -: 1504:            "			\"GlossList\": {\n"
        -: 1505:            "                \"GlossEntry\": {\n"
        -: 1506:            "                    \"ID\": \"SGML\",\n"
        -: 1507:            "					\"SortAs\": \"SGML\",\n"
        -: 1508:            "					\"Acronym\": \"SGML\",\n"
        -: 1509:            "					\"Abbrev\": \"ISO 8879:1986\",\n"
        -: 1510:            "					\"GlossDef\": {\n"
        -: 1511:            "						\"GlossSeeAlso\": [\"GML\", \"XML\"]\n"
        -: 1512:            "                    },\n"
        -: 1513:            "					\"GlossSee\": \"markup\"\n"
        -: 1514:            "                }\n"
        -: 1515:            "            }\n"
        -: 1516:            "        }\n"
        -: 1517:            "    }\n"
        -: 1518:            "}";
        1: 1519:    const char* minified =
        -: 1520:            "{"
        -: 1521:            "\"glossary\":{"
        -: 1522:            "\"title\":\"example glossary\","
        -: 1523:            "\"GlossDiv\":{"
        -: 1524:            "\"title\":\"S\","
        -: 1525:            "\"GlossList\":{"
        -: 1526:            "\"GlossEntry\":{"
        -: 1527:            "\"ID\":\"SGML\","
        -: 1528:            "\"SortAs\":\"SGML\","
        -: 1529:            "\"Acronym\":\"SGML\","
        -: 1530:            "\"Abbrev\":\"ISO 8879:1986\","
        -: 1531:            "\"GlossDef\":{"
        -: 1532:            "\"GlossSeeAlso\":[\"GML\",\"XML\"]"
        -: 1533:            "},"
        -: 1534:            "\"GlossSee\":\"markup\""
        -: 1535:            "}"
        -: 1536:            "}"
        -: 1537:            "}"
        -: 1538:            "}"
        -: 1539:            "}";
        -: 1540:
        1: 1541:    char *buffer = (char*) malloc(sizeof(to_minify));
        1: 1542:    strcpy(buffer, to_minify);
        -: 1543:
        1: 1544:    cJSON_Minify(buffer);
        1: 1544-block  0
        1: 1545:    cJSON_Minify(NULL);
        1: 1546:    free(buffer);
        1: 1547:}
------------------
_ZN38CjsonFixture_assert_cJSON_Minify6_TestC1Ev:
        1: 1495:TEST(CjsonFixture, assert_cJSON_Minify6){
        1: 1495-block  0
------------------
        2: 1548:TEST(CjsonFixture, assert_cJSON_Minify7){
        1: 1549:    const char to_minify[] = "{/7 this is\n a /* multi\n //line \n {comment \"\\\" */}";
        -: 1550:
        1: 1551:    char* minified = (char*) malloc(sizeof(to_minify));
       1*: 1552:    ASSERT_TRUE(minified!=NULL);
        1: 1553:    strcpy(minified, to_minify);
        -: 1554:
        1: 1555:    cJSON_Minify(minified);
        1: 1556:    free(minified);
        -: 1557:}
------------------
_ZN38CjsonFixture_assert_cJSON_Minify7_Test8TestBodyEv:
        1: 1548:TEST(CjsonFixture, assert_cJSON_Minify7){
        1: 1549:    const char to_minify[] = "{/7 this is\n a /* multi\n //line \n {comment \"\\\" */}";
        -: 1550:
        1: 1551:    char* minified = (char*) malloc(sizeof(to_minify));
       1*: 1552:    ASSERT_TRUE(minified!=NULL);
        1: 1552-block  0
    %%%%%: 1552-block  1
    %%%%%: 1552-block  2
    %%%%%: 1552-block  3
    %%%%%: 1552-block  4
    %%%%%: 1552-block  5
    $$$$$: 1552-block  6
    $$$$$: 1552-block  7
    $$$$$: 1552-block  8
    $$$$$: 1552-block  9
    $$$$$: 1552-block 10
    $$$$$: 1552-block 11
    $$$$$: 1552-block 12
        1: 1553:    strcpy(minified, to_minify);
        -: 1554:
        1: 1555:    cJSON_Minify(minified);
        1: 1555-block  0
        1: 1556:    free(minified);
        -: 1557:}
------------------
_ZN38CjsonFixture_assert_cJSON_Minify7_TestC1Ev:
        1: 1548:TEST(CjsonFixture, assert_cJSON_Minify7){
        1: 1548-block  0
------------------
        -: 1558://
        2: 1559:TEST(CjsonFixture, assert_cJSON_IsInvalid)
        -: 1560:{
        -: 1561://    TEST_ASSERT_FALSE(cJSON_IsInvalid(NULL));
        -: 1562://    TEST_ASSERT_FALSE(cJSON_IsInvalid(item));
        1: 1563:    cJSON_IsInvalid(NULL);
        1: 1564:    cJSON_IsInvalid(item);
        1: 1565:}
------------------
_ZN40CjsonFixture_assert_cJSON_IsInvalid_Test8TestBodyEv:
        1: 1559:TEST(CjsonFixture, assert_cJSON_IsInvalid)
        -: 1560:{
        -: 1561://    TEST_ASSERT_FALSE(cJSON_IsInvalid(NULL));
        -: 1562://    TEST_ASSERT_FALSE(cJSON_IsInvalid(item));
        1: 1563:    cJSON_IsInvalid(NULL);
        1: 1563-block  0
        1: 1564:    cJSON_IsInvalid(item);
        1: 1565:}
------------------
_ZN40CjsonFixture_assert_cJSON_IsInvalid_TestC1Ev:
        1: 1559:TEST(CjsonFixture, assert_cJSON_IsInvalid)
        1: 1559-block  0
------------------
        -: 1566:
        2: 1567:TEST(CjsonFixture, assert_cJSON_IsFalse)
        -: 1568:{
        -: 1569://    TEST_ASSERT_FALSE(cJSON_IsFalse(NULL));
        -: 1570://    TEST_ASSERT_FALSE(cJSON_IsFalse(invalid));
        -: 1571://    TEST_ASSERT_TRUE(cJSON_IsFalse(item));
        -: 1572:
        1: 1573:    item->type = cJSON_False;
        -: 1574:    cJSON invalid[1];
        1: 1575:    cJSON_IsFalse(NULL);
        1: 1576:    cJSON_IsFalse(invalid);
        1: 1577:    cJSON_IsFalse(item);
        1: 1578:}
------------------
_ZN38CjsonFixture_assert_cJSON_IsFalse_Test8TestBodyEv:
        1: 1567:TEST(CjsonFixture, assert_cJSON_IsFalse)
        -: 1568:{
        -: 1569://    TEST_ASSERT_FALSE(cJSON_IsFalse(NULL));
        -: 1570://    TEST_ASSERT_FALSE(cJSON_IsFalse(invalid));
        -: 1571://    TEST_ASSERT_TRUE(cJSON_IsFalse(item));
        -: 1572:
        1: 1573:    item->type = cJSON_False;
        -: 1574:    cJSON invalid[1];
        1: 1575:    cJSON_IsFalse(NULL);
        1: 1575-block  0
        1: 1576:    cJSON_IsFalse(invalid);
        1: 1577:    cJSON_IsFalse(item);
        1: 1578:}
------------------
_ZN38CjsonFixture_assert_cJSON_IsFalse_TestC1Ev:
        1: 1567:TEST(CjsonFixture, assert_cJSON_IsFalse)
        1: 1567-block  0
------------------
        -: 1579:
        2: 1580:TEST(CjsonFixture, assert_cJSON_IsTrue)
        -: 1581:{
        -: 1582://   TEST_ASSERT_FALSE(cJSON_IsTrue(NULL));
        -: 1583://    TEST_ASSERT_FALSE(cJSON_IsTrue(invalid));
        -: 1584://    TEST_ASSERT_TRUE(cJSON_IsTrue(item));
        -: 1585:
        1: 1586:    item->type = cJSON_True;
        -: 1587:    cJSON invalid[1];
        1: 1588:    cJSON_IsTrue(NULL);
        1: 1589:    cJSON_IsTrue(invalid);
        1: 1590:    cJSON_IsTrue(item);
        1: 1591:}
------------------
_ZN37CjsonFixture_assert_cJSON_IsTrue_Test8TestBodyEv:
        1: 1580:TEST(CjsonFixture, assert_cJSON_IsTrue)
        -: 1581:{
        -: 1582://   TEST_ASSERT_FALSE(cJSON_IsTrue(NULL));
        -: 1583://    TEST_ASSERT_FALSE(cJSON_IsTrue(invalid));
        -: 1584://    TEST_ASSERT_TRUE(cJSON_IsTrue(item));
        -: 1585:
        1: 1586:    item->type = cJSON_True;
        -: 1587:    cJSON invalid[1];
        1: 1588:    cJSON_IsTrue(NULL);
        1: 1588-block  0
        1: 1589:    cJSON_IsTrue(invalid);
        1: 1590:    cJSON_IsTrue(item);
        1: 1591:}
------------------
_ZN37CjsonFixture_assert_cJSON_IsTrue_TestC1Ev:
        1: 1580:TEST(CjsonFixture, assert_cJSON_IsTrue)
        1: 1580-block  0
------------------
        -: 1592:
        2: 1593:TEST(CjsonFixture, assert_cJSON_IsBool)
        -: 1594:{
        -: 1595://   TEST_ASSERT_TRUE(cJSON_IsBool(item));
        -: 1596:
        1: 1597:    cJSON_IsBool(item);
        1: 1598:    cJSON_IsBool(NULL);
        1: 1599:}
------------------
_ZN37CjsonFixture_assert_cJSON_IsBool_Test8TestBodyEv:
        1: 1593:TEST(CjsonFixture, assert_cJSON_IsBool)
        -: 1594:{
        -: 1595://   TEST_ASSERT_TRUE(cJSON_IsBool(item));
        -: 1596:
        1: 1597:    cJSON_IsBool(item);
        1: 1597-block  0
        1: 1598:    cJSON_IsBool(NULL);
        1: 1599:}
------------------
_ZN37CjsonFixture_assert_cJSON_IsBool_TestC1Ev:
        1: 1593:TEST(CjsonFixture, assert_cJSON_IsBool)
        1: 1593-block  0
------------------
        -: 1600:
        2: 1601:TEST(CjsonFixture, assert_cJSON_IsNull)
        -: 1602:{
        -: 1603://    TEST_ASSERT_FALSE(cJSON_IsNull(NULL));
        -: 1604://    TEST_ASSERT_TRUE(cJSON_IsNull(item));
        1: 1605:    item->type = cJSON_NULL;
        1: 1606:    cJSON_IsNull(NULL);
        1: 1607:    cJSON_IsNull(item);
        1: 1608:}
------------------
_ZN37CjsonFixture_assert_cJSON_IsNull_Test8TestBodyEv:
        1: 1601:TEST(CjsonFixture, assert_cJSON_IsNull)
        -: 1602:{
        -: 1603://    TEST_ASSERT_FALSE(cJSON_IsNull(NULL));
        -: 1604://    TEST_ASSERT_TRUE(cJSON_IsNull(item));
        1: 1605:    item->type = cJSON_NULL;
        1: 1606:    cJSON_IsNull(NULL);
        1: 1606-block  0
        1: 1607:    cJSON_IsNull(item);
        1: 1608:}
------------------
_ZN37CjsonFixture_assert_cJSON_IsNull_TestC1Ev:
        1: 1601:TEST(CjsonFixture, assert_cJSON_IsNull)
        1: 1601-block  0
------------------
        -: 1609:
        2: 1610:TEST(CjsonFixture, assert_cJSON_IsNumber)
        -: 1611:{
        -: 1612://    TEST_ASSERT_FALSE(cJSON_IsNumber(NULL));
        -: 1613://    TEST_ASSERT_FALSE(cJSON_IsNumber(invalid));
        -: 1614://    TEST_ASSERT_TRUE(cJSON_IsNumber(item));
        -: 1615:
        1: 1616:    item->type = cJSON_Number;
        -: 1617:    cJSON invalid[1];
        1: 1618:    cJSON_IsNumber(NULL);
        1: 1619:    cJSON_IsNumber(invalid);
        1: 1620:    cJSON_IsNumber(item);
        1: 1621:}
------------------
_ZN39CjsonFixture_assert_cJSON_IsNumber_Test8TestBodyEv:
        1: 1610:TEST(CjsonFixture, assert_cJSON_IsNumber)
        -: 1611:{
        -: 1612://    TEST_ASSERT_FALSE(cJSON_IsNumber(NULL));
        -: 1613://    TEST_ASSERT_FALSE(cJSON_IsNumber(invalid));
        -: 1614://    TEST_ASSERT_TRUE(cJSON_IsNumber(item));
        -: 1615:
        1: 1616:    item->type = cJSON_Number;
        -: 1617:    cJSON invalid[1];
        1: 1618:    cJSON_IsNumber(NULL);
        1: 1618-block  0
        1: 1619:    cJSON_IsNumber(invalid);
        1: 1620:    cJSON_IsNumber(item);
        1: 1621:}
------------------
_ZN39CjsonFixture_assert_cJSON_IsNumber_TestC1Ev:
        1: 1610:TEST(CjsonFixture, assert_cJSON_IsNumber)
        1: 1610-block  0
------------------
        -: 1622:
        2: 1623:TEST(CjsonFixture, assert_cJSON_IsString)
        -: 1624:{
        -: 1625://    TEST_ASSERT_FALSE(cJSON_IsString(NULL));
        -: 1626://    TEST_ASSERT_FALSE(cJSON_IsString(invalid));
        -: 1627://    TEST_ASSERT_TRUE(cJSON_IsString(item));
        -: 1628:
        1: 1629:    item->type = cJSON_String;
        -: 1630:    cJSON invalid[1];
        1: 1631:    cJSON_IsString(NULL);
        1: 1632:    cJSON_IsString(invalid);
        1: 1633:    cJSON_IsString(item);
        1: 1634:}
------------------
_ZN39CjsonFixture_assert_cJSON_IsString_Test8TestBodyEv:
        1: 1623:TEST(CjsonFixture, assert_cJSON_IsString)
        -: 1624:{
        -: 1625://    TEST_ASSERT_FALSE(cJSON_IsString(NULL));
        -: 1626://    TEST_ASSERT_FALSE(cJSON_IsString(invalid));
        -: 1627://    TEST_ASSERT_TRUE(cJSON_IsString(item));
        -: 1628:
        1: 1629:    item->type = cJSON_String;
        -: 1630:    cJSON invalid[1];
        1: 1631:    cJSON_IsString(NULL);
        1: 1631-block  0
        1: 1632:    cJSON_IsString(invalid);
        1: 1633:    cJSON_IsString(item);
        1: 1634:}
------------------
_ZN39CjsonFixture_assert_cJSON_IsString_TestC1Ev:
        1: 1623:TEST(CjsonFixture, assert_cJSON_IsString)
        1: 1623-block  0
------------------
        -: 1635:
        2: 1636:TEST(CjsonFixture, assert_cJSON_IsArray)
        -: 1637:{
        -: 1638://    TEST_ASSERT_FALSE(cJSON_IsArray(NULL));
        -: 1639://    TEST_ASSERT_FALSE(cJSON_IsArray(invalid));
        -: 1640://    TEST_ASSERT_TRUE(cJSON_IsArray(item));
        -: 1641:
        1: 1642:    item->type = cJSON_Array;
        -: 1643:    cJSON invalid[1];
        1: 1644:    cJSON_IsArray(NULL);
        1: 1645:    cJSON_IsArray(invalid);
        1: 1646:    cJSON_IsArray(item);
        1: 1647:}
------------------
_ZN38CjsonFixture_assert_cJSON_IsArray_Test8TestBodyEv:
        1: 1636:TEST(CjsonFixture, assert_cJSON_IsArray)
        -: 1637:{
        -: 1638://    TEST_ASSERT_FALSE(cJSON_IsArray(NULL));
        -: 1639://    TEST_ASSERT_FALSE(cJSON_IsArray(invalid));
        -: 1640://    TEST_ASSERT_TRUE(cJSON_IsArray(item));
        -: 1641:
        1: 1642:    item->type = cJSON_Array;
        -: 1643:    cJSON invalid[1];
        1: 1644:    cJSON_IsArray(NULL);
        1: 1644-block  0
        1: 1645:    cJSON_IsArray(invalid);
        1: 1646:    cJSON_IsArray(item);
        1: 1647:}
------------------
_ZN38CjsonFixture_assert_cJSON_IsArray_TestC1Ev:
        1: 1636:TEST(CjsonFixture, assert_cJSON_IsArray)
        1: 1636-block  0
------------------
        -: 1648:
        2: 1649:TEST(CjsonFixture, assert_cJSON_IsObject)
        -: 1650:{
        -: 1651://    TEST_ASSERT_FALSE(cJSON_IsObject(NULL));
        -: 1652://    TEST_ASSERT_FALSE(cJSON_IsObject(invalid));
        -: 1653://    TEST_ASSERT_TRUE(cJSON_IsObject(item));
        -: 1654:
        1: 1655:    item->type = cJSON_Object;
        -: 1656:    cJSON invalid[1];
        1: 1657:    cJSON_IsObject(NULL);
        1: 1658:    cJSON_IsObject(invalid);
        1: 1659:    cJSON_IsObject(item);
        1: 1660:}
------------------
_ZN39CjsonFixture_assert_cJSON_IsObject_Test8TestBodyEv:
        1: 1649:TEST(CjsonFixture, assert_cJSON_IsObject)
        -: 1650:{
        -: 1651://    TEST_ASSERT_FALSE(cJSON_IsObject(NULL));
        -: 1652://    TEST_ASSERT_FALSE(cJSON_IsObject(invalid));
        -: 1653://    TEST_ASSERT_TRUE(cJSON_IsObject(item));
        -: 1654:
        1: 1655:    item->type = cJSON_Object;
        -: 1656:    cJSON invalid[1];
        1: 1657:    cJSON_IsObject(NULL);
        1: 1657-block  0
        1: 1658:    cJSON_IsObject(invalid);
        1: 1659:    cJSON_IsObject(item);
        1: 1660:}
------------------
_ZN39CjsonFixture_assert_cJSON_IsObject_TestC1Ev:
        1: 1649:TEST(CjsonFixture, assert_cJSON_IsObject)
        1: 1649-block  0
------------------
        -: 1661:
        2: 1662:TEST(CjsonFixture, assert_cJSON_IsRaw)
        -: 1663:{
        -: 1664://    TEST_ASSERT_FALSE(cJSON_cJSON_IsRaw(NULL));
        -: 1665://    TEST_ASSERT_FALSE(cJSON_cJSON_IsRaw(invalid));
        -: 1666://    TEST_ASSERT_TRUE(cJSON_cJSON_IsRaw(item));
        -: 1667:
        1: 1668:    item->type = cJSON_Object;
        -: 1669:    cJSON invalid[1];
        1: 1670:    cJSON_IsRaw(NULL);
        1: 1671:    cJSON_IsRaw(invalid);
        1: 1672:    cJSON_IsRaw(item);
        1: 1673:}
------------------
_ZN36CjsonFixture_assert_cJSON_IsRaw_Test8TestBodyEv:
        1: 1662:TEST(CjsonFixture, assert_cJSON_IsRaw)
        -: 1663:{
        -: 1664://    TEST_ASSERT_FALSE(cJSON_cJSON_IsRaw(NULL));
        -: 1665://    TEST_ASSERT_FALSE(cJSON_cJSON_IsRaw(invalid));
        -: 1666://    TEST_ASSERT_TRUE(cJSON_cJSON_IsRaw(item));
        -: 1667:
        1: 1668:    item->type = cJSON_Object;
        -: 1669:    cJSON invalid[1];
        1: 1670:    cJSON_IsRaw(NULL);
        1: 1670-block  0
        1: 1671:    cJSON_IsRaw(invalid);
        1: 1672:    cJSON_IsRaw(item);
        1: 1673:}
------------------
_ZN36CjsonFixture_assert_cJSON_IsRaw_TestC1Ev:
        1: 1662:TEST(CjsonFixture, assert_cJSON_IsRaw)
        1: 1662-block  0
------------------
        -: 1674://
       40: 1675:static cJSON_bool compare_from_string(const char * const a, const char * const b, const cJSON_bool case_sensitive)
        -: 1676:{
       40: 1677:    cJSON *a_json = NULL;
       40: 1678:    cJSON *b_json = NULL;
       40: 1679:    cJSON_bool result = false;
        -: 1680:
       40: 1681:    a_json = cJSON_Parse(a);
       40: 1681-block  0
      40*: 1682:    EXPECT_TRUE( a_json!= NULL);
    %%%%%: 1682-block  0
    %%%%%: 1682-block  1
    %%%%%: 1682-block  2
    %%%%%: 1682-block  3
    %%%%%: 1682-block  4
       40: 1682-block  5
    $$$$$: 1682-block  6
    $$$$$: 1682-block  7
    $$$$$: 1682-block  8
    $$$$$: 1682-block  9
    $$$$$: 1682-block 10
    $$$$$: 1682-block 11
    $$$$$: 1682-block 12
        -: 1683://    TEST_ASSERT_NOT_NULL_MESSAGE(a_json, "Failed to parse a.");
       40: 1684:    b_json = cJSON_Parse(b);
      40*: 1685:    EXPECT_TRUE( b_json!= NULL);
    %%%%%: 1685-block  0
    %%%%%: 1685-block  1
    %%%%%: 1685-block  2
    %%%%%: 1685-block  3
    %%%%%: 1685-block  4
       40: 1685-block  5
    $$$$$: 1685-block  6
    $$$$$: 1685-block  7
    $$$$$: 1685-block  8
    $$$$$: 1685-block  9
    $$$$$: 1685-block 10
    $$$$$: 1685-block 11
    $$$$$: 1685-block 12
        -: 1686://    TEST_ASSERT_NOT_NULL_MESSAGE(b_json, "Failed to parse b.");
        -: 1687:
       40: 1688:    result = cJSON_Compare(a_json, b_json, case_sensitive);
        -: 1689:
       40: 1690:    cJSON_Delete(a_json);
       40: 1691:    cJSON_Delete(b_json);
        -: 1692:
       40: 1693:    return result;
       40: 1693-block  0
        -: 1694:}
        -: 1695:
        2: 1696:TEST(CjsonFixture, cJSON_Compare)
        -: 1697:{
        1: 1698:    cJSON_Compare(NULL, NULL, true);
        1: 1699:    cJSON_Compare(NULL, NULL, false);
        -: 1700:    cJSON invalid[1];
        1: 1701:    memset(invalid, '\0', sizeof(invalid));
        -: 1702:
        1: 1703:    cJSON_Compare(invalid, invalid, false);
        1: 1704:    cJSON_Compare(invalid, invalid, true);
        -: 1705://    TEST_ASSERT_FALSE(cJSON_Compare(invalid, invalid, false));
        -: 1706://    TEST_ASSERT_FALSE(cJSON_Compare(invalid, invalid, true));
        -: 1707:
        1: 1708:    compare_from_string("1", "1", true);
        1: 1709:    compare_from_string("1", "1", false);
        1: 1710:    compare_from_string("0.0001", "0.0001", true);
        1: 1711:    compare_from_string("0.0001", "0.0001", false);
        1: 1712:    compare_from_string("1", "2", true);
        1: 1713:    compare_from_string("1", "2", false);
        1: 1714:    compare_from_string("true", "true", true);
        1: 1715:    compare_from_string("true", "true", false);
        1: 1716:    compare_from_string("false", "false", true);
        1: 1717:    compare_from_string("false", "false", false);
        -: 1718://
        1: 1719:    compare_from_string("true", "true", true);
        1: 1720:    compare_from_string("true", "true", false);
        1: 1721:    compare_from_string("false", "false", true);
        1: 1722:    compare_from_string("false", "false", false);
        -: 1723:
        1: 1724:    compare_from_string("null", "null", true);
        1: 1725:    compare_from_string("null", "null", false);
        -: 1726:
        1: 1727:    compare_from_string("null", "true", true);
        1: 1728:    compare_from_string("null", "true", false);
        -: 1729://
        1: 1730:    reset(invalid);
        1: 1731:    memset(invalid, '\0', sizeof(invalid));
        -: 1732:
        1: 1733:    invalid->type = cJSON_Number | cJSON_String;
        -: 1734:
        1: 1735:    cJSON_Compare(invalid, invalid, true);
        1: 1736:    cJSON_Compare(invalid, invalid, false);
        -: 1737://
        1: 1738:    compare_from_string("\"abcdefg\"", "\"abcdefg\"", true);
        1: 1739:    compare_from_string("\"abcdefg\"", "\"abcdefg\"", false);
        -: 1740:
        1: 1741:    compare_from_string("\"ABCDEFG\"", "\"abcdefg\"", true);
        1: 1742:    compare_from_string("\"ABCDEFG\"", "\"abcdefg\"", false);
        -: 1743://
        1: 1744:    cJSON *raw1 = NULL;
        1: 1745:    cJSON *raw2 = NULL;
        -: 1746:
        1: 1747:    raw1 = cJSON_Parse("\"[true, false]\"");
        -: 1748://    TEST_ASSERT_NOT_NULL(raw1);
        1: 1749:    raw2 = cJSON_Parse("\"[true, false]\"");
        -: 1750://    TEST_ASSERT_NOT_NULL(raw2);
        -: 1751:
        1: 1752:    raw1->valuestring = NULL;
        -: 1753:
        1: 1754:    cJSON_Compare(raw1, raw2, true);
        1: 1755:    cJSON_Compare(raw1, raw2, false);
        1: 1756:    raw2->valuestring = NULL;
        1: 1757:    cJSON_Compare(raw1, raw2, true);
        1: 1758:    cJSON_Compare(raw1, raw2, false);
        -: 1759:
        1: 1760:    raw1->type = cJSON_Raw;
        1: 1761:    raw2->type = cJSON_Raw;
        1: 1762:    cJSON_Compare(raw1, raw2, true);
        1: 1763:    cJSON_Compare(raw1, raw2, false);
        -: 1764:
        1: 1765:    cJSON_Delete(raw1);
        1: 1766:    cJSON_Delete(raw2);
        -: 1767://
        1: 1768:    compare_from_string("[]", "[]", true);
        1: 1769:    compare_from_string("[]", "[]", false);
        1: 1770:    compare_from_string("[false,true,null,42,\"string\",[],{}]", "[false, true, null, 42, \"string\", [], {}]", true);
        1: 1771:    compare_from_string("[false,true,null,42,\"string\",[],{}]", "[false, true, null, 42, \"string\", [], {}]", false);
        1: 1772:    compare_from_string("[[[1], 2]]", "[[[1], 2]]", true);
        1: 1773:    compare_from_string("[[[1], 2]]", "[[[1], 2]]", false);
        -: 1774:
       1*: 1775:    ASSERT_FALSE(compare_from_string("[true,null,42,\"string\",[],{}]", "[false, true, null, 42, \"string\", [], {}]", true));
       1*: 1776:    ASSERT_FALSE(compare_from_string("[true,null,42,\"string\",[],{}]", "[false, true, null, 42, \"string\", [], {}]", false));
        -: 1777:
       1*: 1778:    ASSERT_FALSE(compare_from_string("[1,2,3]", "[1,2]", true));
       1*: 1779:    ASSERT_FALSE(compare_from_string("[1,2,3]", "[1,2]", false));
        -: 1780:
       1*: 1781:    ASSERT_TRUE(compare_from_string("{}", "{}", true));
       1*: 1782:    ASSERT_TRUE(compare_from_string("{}", "{}", false));
       1*: 1783:    ASSERT_TRUE(compare_from_string(
        -: 1784:            "{\"false\": false, \"true\": true, \"null\": null, \"number\": 42, \"string\": \"string\", \"array\": [], \"object\": {}}",
        -: 1785:            "{\"true\": true, \"false\": false, \"null\": null, \"number\": 42, \"string\": \"string\", \"array\": [], \"object\": {}}",
        -: 1786:            true));
       1*: 1787:    ASSERT_FALSE(compare_from_string(
        -: 1788:            "{\"False\": false, \"true\": true, \"null\": null, \"number\": 42, \"string\": \"string\", \"array\": [], \"object\": {}}",
        -: 1789:            "{\"true\": true, \"false\": false, \"null\": null, \"number\": 42, \"string\": \"string\", \"array\": [], \"object\": {}}",
        -: 1790:            true));
       1*: 1791:    ASSERT_TRUE(compare_from_string(
        -: 1792:            "{\"False\": false, \"true\": true, \"null\": null, \"number\": 42, \"string\": \"string\", \"array\": [], \"object\": {}}",
        -: 1793:            "{\"true\": true, \"false\": false, \"null\": null, \"number\": 42, \"string\": \"string\", \"array\": [], \"object\": {}}",
        -: 1794:            false));
       1*: 1795:    ASSERT_FALSE(compare_from_string(
        -: 1796:            "{\"Flse\": false, \"true\": true, \"null\": null, \"number\": 42, \"string\": \"string\", \"array\": [], \"object\": {}}",
        -: 1797:            "{\"true\": true, \"false\": false, \"null\": null, \"number\": 42, \"string\": \"string\", \"array\": [], \"object\": {}}",
        -: 1798:            false));
       1*: 1799:    ASSERT_FALSE(compare_from_string(
        -: 1800:            "{\"one\": 1, \"two\": 2}",
        -: 1801:            "{\"one\": 1, \"two\": 2, \"three\": 3}",
        -: 1802:            true));
       1*: 1803:    ASSERT_FALSE(compare_from_string(
        -: 1804:            "{\"one\": 1, \"two\": 2}",
        -: 1805:            "{\"one\": 1, \"two\": 2, \"three\": 3}",
        -: 1806:            false));
        -: 1807:}
------------------
_ZN31CjsonFixture_cJSON_Compare_Test8TestBodyEv:
        1: 1696:TEST(CjsonFixture, cJSON_Compare)
        -: 1697:{
        1: 1698:    cJSON_Compare(NULL, NULL, true);
        1: 1698-block  0
        1: 1699:    cJSON_Compare(NULL, NULL, false);
        1: 1699-block  0
        -: 1700:    cJSON invalid[1];
        1: 1701:    memset(invalid, '\0', sizeof(invalid));
        -: 1702:
        1: 1703:    cJSON_Compare(invalid, invalid, false);
        1: 1703-block  0
        1: 1704:    cJSON_Compare(invalid, invalid, true);
        1: 1704-block  0
        -: 1705://    TEST_ASSERT_FALSE(cJSON_Compare(invalid, invalid, false));
        -: 1706://    TEST_ASSERT_FALSE(cJSON_Compare(invalid, invalid, true));
        -: 1707:
        1: 1708:    compare_from_string("1", "1", true);
        1: 1708-block  0
        1: 1709:    compare_from_string("1", "1", false);
        1: 1709-block  0
        1: 1710:    compare_from_string("0.0001", "0.0001", true);
        1: 1710-block  0
        1: 1711:    compare_from_string("0.0001", "0.0001", false);
        1: 1711-block  0
        1: 1712:    compare_from_string("1", "2", true);
        1: 1712-block  0
        1: 1713:    compare_from_string("1", "2", false);
        1: 1713-block  0
        1: 1714:    compare_from_string("true", "true", true);
        1: 1714-block  0
        1: 1715:    compare_from_string("true", "true", false);
        1: 1715-block  0
        1: 1716:    compare_from_string("false", "false", true);
        1: 1716-block  0
        1: 1717:    compare_from_string("false", "false", false);
        1: 1717-block  0
        -: 1718://
        1: 1719:    compare_from_string("true", "true", true);
        1: 1719-block  0
        1: 1720:    compare_from_string("true", "true", false);
        1: 1720-block  0
        1: 1721:    compare_from_string("false", "false", true);
        1: 1721-block  0
        1: 1722:    compare_from_string("false", "false", false);
        1: 1722-block  0
        -: 1723:
        1: 1724:    compare_from_string("null", "null", true);
        1: 1724-block  0
        1: 1725:    compare_from_string("null", "null", false);
        1: 1725-block  0
        -: 1726:
        1: 1727:    compare_from_string("null", "true", true);
        1: 1727-block  0
        1: 1728:    compare_from_string("null", "true", false);
        1: 1728-block  0
        -: 1729://
        1: 1730:    reset(invalid);
        1: 1730-block  0
        1: 1731:    memset(invalid, '\0', sizeof(invalid));
        -: 1732:
        1: 1733:    invalid->type = cJSON_Number | cJSON_String;
        -: 1734:
        1: 1735:    cJSON_Compare(invalid, invalid, true);
        1: 1735-block  0
        1: 1736:    cJSON_Compare(invalid, invalid, false);
        1: 1736-block  0
        -: 1737://
        1: 1738:    compare_from_string("\"abcdefg\"", "\"abcdefg\"", true);
        1: 1738-block  0
        1: 1739:    compare_from_string("\"abcdefg\"", "\"abcdefg\"", false);
        1: 1739-block  0
        -: 1740:
        1: 1741:    compare_from_string("\"ABCDEFG\"", "\"abcdefg\"", true);
        1: 1741-block  0
        1: 1742:    compare_from_string("\"ABCDEFG\"", "\"abcdefg\"", false);
        1: 1742-block  0
        -: 1743://
        1: 1744:    cJSON *raw1 = NULL;
        1: 1745:    cJSON *raw2 = NULL;
        -: 1746:
        1: 1747:    raw1 = cJSON_Parse("\"[true, false]\"");
        1: 1747-block  0
        -: 1748://    TEST_ASSERT_NOT_NULL(raw1);
        1: 1749:    raw2 = cJSON_Parse("\"[true, false]\"");
        1: 1749-block  0
        -: 1750://    TEST_ASSERT_NOT_NULL(raw2);
        -: 1751:
        1: 1752:    raw1->valuestring = NULL;
        -: 1753:
        1: 1754:    cJSON_Compare(raw1, raw2, true);
        1: 1754-block  0
        1: 1755:    cJSON_Compare(raw1, raw2, false);
        1: 1755-block  0
        1: 1756:    raw2->valuestring = NULL;
        1: 1757:    cJSON_Compare(raw1, raw2, true);
        1: 1757-block  0
        1: 1758:    cJSON_Compare(raw1, raw2, false);
        1: 1758-block  0
        -: 1759:
        1: 1760:    raw1->type = cJSON_Raw;
        1: 1761:    raw2->type = cJSON_Raw;
        1: 1762:    cJSON_Compare(raw1, raw2, true);
        1: 1762-block  0
        1: 1763:    cJSON_Compare(raw1, raw2, false);
        1: 1763-block  0
        -: 1764:
        1: 1765:    cJSON_Delete(raw1);
        1: 1765-block  0
        1: 1766:    cJSON_Delete(raw2);
        1: 1766-block  0
        -: 1767://
        1: 1768:    compare_from_string("[]", "[]", true);
        1: 1768-block  0
        1: 1769:    compare_from_string("[]", "[]", false);
        1: 1769-block  0
        1: 1770:    compare_from_string("[false,true,null,42,\"string\",[],{}]", "[false, true, null, 42, \"string\", [], {}]", true);
        1: 1770-block  0
        1: 1771:    compare_from_string("[false,true,null,42,\"string\",[],{}]", "[false, true, null, 42, \"string\", [], {}]", false);
        1: 1771-block  0
        1: 1772:    compare_from_string("[[[1], 2]]", "[[[1], 2]]", true);
        1: 1772-block  0
        1: 1773:    compare_from_string("[[[1], 2]]", "[[[1], 2]]", false);
        1: 1773-block  0
        -: 1774:
       1*: 1775:    ASSERT_FALSE(compare_from_string("[true,null,42,\"string\",[],{}]", "[false, true, null, 42, \"string\", [], {}]", true));
        1: 1775-block  0
        1: 1775-block  1
    %%%%%: 1775-block  2
    %%%%%: 1775-block  3
    %%%%%: 1775-block  4
    %%%%%: 1775-block  5
    %%%%%: 1775-block  6
    $$$$$: 1775-block  7
    $$$$$: 1775-block  8
    $$$$$: 1775-block  9
    $$$$$: 1775-block 10
    $$$$$: 1775-block 11
    $$$$$: 1775-block 12
    $$$$$: 1775-block 13
       1*: 1776:    ASSERT_FALSE(compare_from_string("[true,null,42,\"string\",[],{}]", "[false, true, null, 42, \"string\", [], {}]", false));
        1: 1776-block  0
        1: 1776-block  1
    %%%%%: 1776-block  2
    %%%%%: 1776-block  3
    %%%%%: 1776-block  4
    %%%%%: 1776-block  5
    %%%%%: 1776-block  6
    $$$$$: 1776-block  7
    $$$$$: 1776-block  8
    $$$$$: 1776-block  9
    $$$$$: 1776-block 10
    $$$$$: 1776-block 11
    $$$$$: 1776-block 12
    $$$$$: 1776-block 13
        -: 1777:
       1*: 1778:    ASSERT_FALSE(compare_from_string("[1,2,3]", "[1,2]", true));
        1: 1778-block  0
        1: 1778-block  1
    %%%%%: 1778-block  2
    %%%%%: 1778-block  3
    %%%%%: 1778-block  4
    %%%%%: 1778-block  5
    %%%%%: 1778-block  6
    $$$$$: 1778-block  7
    $$$$$: 1778-block  8
    $$$$$: 1778-block  9
    $$$$$: 1778-block 10
    $$$$$: 1778-block 11
    $$$$$: 1778-block 12
    $$$$$: 1778-block 13
       1*: 1779:    ASSERT_FALSE(compare_from_string("[1,2,3]", "[1,2]", false));
        1: 1779-block  0
        1: 1779-block  1
    %%%%%: 1779-block  2
    %%%%%: 1779-block  3
    %%%%%: 1779-block  4
    %%%%%: 1779-block  5
    %%%%%: 1779-block  6
    $$$$$: 1779-block  7
    $$$$$: 1779-block  8
    $$$$$: 1779-block  9
    $$$$$: 1779-block 10
    $$$$$: 1779-block 11
    $$$$$: 1779-block 12
    $$$$$: 1779-block 13
        -: 1780:
       1*: 1781:    ASSERT_TRUE(compare_from_string("{}", "{}", true));
        1: 1781-block  0
        1: 1781-block  1
    %%%%%: 1781-block  2
    %%%%%: 1781-block  3
    %%%%%: 1781-block  4
    %%%%%: 1781-block  5
    %%%%%: 1781-block  6
    $$$$$: 1781-block  7
    $$$$$: 1781-block  8
    $$$$$: 1781-block  9
    $$$$$: 1781-block 10
    $$$$$: 1781-block 11
    $$$$$: 1781-block 12
    $$$$$: 1781-block 13
       1*: 1782:    ASSERT_TRUE(compare_from_string("{}", "{}", false));
        1: 1782-block  0
        1: 1782-block  1
    %%%%%: 1782-block  2
    %%%%%: 1782-block  3
    %%%%%: 1782-block  4
    %%%%%: 1782-block  5
    %%%%%: 1782-block  6
    $$$$$: 1782-block  7
    $$$$$: 1782-block  8
    $$$$$: 1782-block  9
    $$$$$: 1782-block 10
    $$$$$: 1782-block 11
    $$$$$: 1782-block 12
    $$$$$: 1782-block 13
       1*: 1783:    ASSERT_TRUE(compare_from_string(
        1: 1783-block  0
        1: 1783-block  1
    %%%%%: 1783-block  2
    %%%%%: 1783-block  3
    %%%%%: 1783-block  4
    %%%%%: 1783-block  5
    %%%%%: 1783-block  6
    $$$$$: 1783-block  7
    $$$$$: 1783-block  8
    $$$$$: 1783-block  9
    $$$$$: 1783-block 10
    $$$$$: 1783-block 11
    $$$$$: 1783-block 12
    $$$$$: 1783-block 13
        -: 1784:            "{\"false\": false, \"true\": true, \"null\": null, \"number\": 42, \"string\": \"string\", \"array\": [], \"object\": {}}",
        -: 1785:            "{\"true\": true, \"false\": false, \"null\": null, \"number\": 42, \"string\": \"string\", \"array\": [], \"object\": {}}",
        -: 1786:            true));
       1*: 1787:    ASSERT_FALSE(compare_from_string(
        1: 1787-block  0
        1: 1787-block  1
    %%%%%: 1787-block  2
    %%%%%: 1787-block  3
    %%%%%: 1787-block  4
    %%%%%: 1787-block  5
    %%%%%: 1787-block  6
    $$$$$: 1787-block  7
    $$$$$: 1787-block  8
    $$$$$: 1787-block  9
    $$$$$: 1787-block 10
    $$$$$: 1787-block 11
    $$$$$: 1787-block 12
    $$$$$: 1787-block 13
        -: 1788:            "{\"False\": false, \"true\": true, \"null\": null, \"number\": 42, \"string\": \"string\", \"array\": [], \"object\": {}}",
        -: 1789:            "{\"true\": true, \"false\": false, \"null\": null, \"number\": 42, \"string\": \"string\", \"array\": [], \"object\": {}}",
        -: 1790:            true));
       1*: 1791:    ASSERT_TRUE(compare_from_string(
        1: 1791-block  0
        1: 1791-block  1
    %%%%%: 1791-block  2
    %%%%%: 1791-block  3
    %%%%%: 1791-block  4
    %%%%%: 1791-block  5
    %%%%%: 1791-block  6
    $$$$$: 1791-block  7
    $$$$$: 1791-block  8
    $$$$$: 1791-block  9
    $$$$$: 1791-block 10
    $$$$$: 1791-block 11
    $$$$$: 1791-block 12
    $$$$$: 1791-block 13
        -: 1792:            "{\"False\": false, \"true\": true, \"null\": null, \"number\": 42, \"string\": \"string\", \"array\": [], \"object\": {}}",
        -: 1793:            "{\"true\": true, \"false\": false, \"null\": null, \"number\": 42, \"string\": \"string\", \"array\": [], \"object\": {}}",
        -: 1794:            false));
       1*: 1795:    ASSERT_FALSE(compare_from_string(
        1: 1795-block  0
        1: 1795-block  1
    %%%%%: 1795-block  2
    %%%%%: 1795-block  3
    %%%%%: 1795-block  4
    %%%%%: 1795-block  5
    %%%%%: 1795-block  6
    $$$$$: 1795-block  7
    $$$$$: 1795-block  8
    $$$$$: 1795-block  9
    $$$$$: 1795-block 10
    $$$$$: 1795-block 11
    $$$$$: 1795-block 12
    $$$$$: 1795-block 13
        -: 1796:            "{\"Flse\": false, \"true\": true, \"null\": null, \"number\": 42, \"string\": \"string\", \"array\": [], \"object\": {}}",
        -: 1797:            "{\"true\": true, \"false\": false, \"null\": null, \"number\": 42, \"string\": \"string\", \"array\": [], \"object\": {}}",
        -: 1798:            false));
       1*: 1799:    ASSERT_FALSE(compare_from_string(
        1: 1799-block  0
        1: 1799-block  1
    %%%%%: 1799-block  2
    %%%%%: 1799-block  3
    %%%%%: 1799-block  4
    %%%%%: 1799-block  5
    %%%%%: 1799-block  6
    $$$$$: 1799-block  7
    $$$$$: 1799-block  8
    $$$$$: 1799-block  9
    $$$$$: 1799-block 10
    $$$$$: 1799-block 11
    $$$$$: 1799-block 12
    $$$$$: 1799-block 13
        -: 1800:            "{\"one\": 1, \"two\": 2}",
        -: 1801:            "{\"one\": 1, \"two\": 2, \"three\": 3}",
        -: 1802:            true));
       1*: 1803:    ASSERT_FALSE(compare_from_string(
        1: 1803-block  0
        1: 1803-block  1
    %%%%%: 1803-block  2
    %%%%%: 1803-block  3
    %%%%%: 1803-block  4
    %%%%%: 1803-block  5
    %%%%%: 1803-block  6
    $$$$$: 1803-block  7
    $$$$$: 1803-block  8
    $$$$$: 1803-block  9
    $$$$$: 1803-block 10
    $$$$$: 1803-block 11
    $$$$$: 1803-block 12
    $$$$$: 1803-block 13
        -: 1804:            "{\"one\": 1, \"two\": 2}",
        -: 1805:            "{\"one\": 1, \"two\": 2, \"three\": 3}",
        -: 1806:            false));
        -: 1807:}
------------------
_ZN31CjsonFixture_cJSON_Compare_TestC1Ev:
        1: 1696:TEST(CjsonFixture, cJSON_Compare)
        1: 1696-block  0
------------------
        -: 1808:
        2: 1809:TEST(CjsonFixture2, assert_cJSON_free)
        -: 1810:{
        -: 1811://    cJSON *array = NULL;
        -: 1812://    array = cJSON_CreateArray();
        -: 1813://    cJSON_free(array);
        -: 1814:
        1: 1815:    parse_buffer buffer = { 0, 0, 0, 0, { 0, 0, 0 } };
        1: 1816:    buffer.content = (const unsigned char*)"[]";
        1: 1817:    buffer.length = strlen("[]") + sizeof("");
        1: 1818:    buffer.hooks = global_hooks;
        -: 1819:
        1: 1820:    cJSON *new_item =  cJSON_New_Item(&(buffer.hooks));
        -: 1821:
       1*: 1822:    ASSERT_TRUE(new_item!=NULL);
        -: 1823:
        1: 1824:    cJSON *raw1 = NULL;
        1: 1825:    cJSON *raw2 = NULL;
        -: 1826:
        1: 1827:    raw1 = cJSON_Parse("\"[true, false]\"");
        -: 1828:
       1*: 1829:    ASSERT_TRUE(raw1!=NULL);
        -: 1830:}
------------------
_ZN36CjsonFixture2_assert_cJSON_free_Test8TestBodyEv:
        1: 1809:TEST(CjsonFixture2, assert_cJSON_free)
        -: 1810:{
        -: 1811://    cJSON *array = NULL;
        -: 1812://    array = cJSON_CreateArray();
        -: 1813://    cJSON_free(array);
        -: 1814:
        1: 1815:    parse_buffer buffer = { 0, 0, 0, 0, { 0, 0, 0 } };
        1: 1816:    buffer.content = (const unsigned char*)"[]";
        1: 1817:    buffer.length = strlen("[]") + sizeof("");
        1: 1818:    buffer.hooks = global_hooks;
        -: 1819:
        1: 1820:    cJSON *new_item =  cJSON_New_Item(&(buffer.hooks));
        1: 1820-block  0
        -: 1821:
       1*: 1822:    ASSERT_TRUE(new_item!=NULL);
        1: 1822-block  0
    %%%%%: 1822-block  1
    %%%%%: 1822-block  2
    %%%%%: 1822-block  3
    %%%%%: 1822-block  4
    %%%%%: 1822-block  5
    $$$$$: 1822-block  6
    $$$$$: 1822-block  7
    $$$$$: 1822-block  8
    $$$$$: 1822-block  9
    $$$$$: 1822-block 10
    $$$$$: 1822-block 11
    $$$$$: 1822-block 12
        -: 1823:
        1: 1824:    cJSON *raw1 = NULL;
        1: 1825:    cJSON *raw2 = NULL;
        -: 1826:
        1: 1827:    raw1 = cJSON_Parse("\"[true, false]\"");
        1: 1827-block  0
        -: 1828:
       1*: 1829:    ASSERT_TRUE(raw1!=NULL);
        1: 1829-block  0
    %%%%%: 1829-block  1
    %%%%%: 1829-block  2
    %%%%%: 1829-block  3
    %%%%%: 1829-block  4
    %%%%%: 1829-block  5
    $$$$$: 1829-block  6
    $$$$$: 1829-block  7
    $$$$$: 1829-block  8
    $$$$$: 1829-block  9
    $$$$$: 1829-block 10
    $$$$$: 1829-block 11
    $$$$$: 1829-block 12
        -: 1830:}
------------------
_ZN36CjsonFixture2_assert_cJSON_free_TestC1Ev:
        1: 1809:TEST(CjsonFixture2, assert_cJSON_free)
        1: 1809-block  0
------------------
        -: 1831:
    #####: 1832:static void * CJSON_CDECL failing_malloc(size_t size)
        -: 1833:{
        -: 1834:    (void)size;
    #####: 1835:    return NULL;
    %%%%%: 1835-block  0
        -: 1836:}
        -: 1837://
        -: 1838:///* work around MSVC error C2322: '...' address of dillimport '...' is not static */
    #####: 1839:static void CJSON_CDECL normal_free(void *pointer)
        -: 1840:{
    #####: 1841:    free(pointer);
    #####: 1842:}
        -: 1843:static cJSON_Hooks failing_hooks={
        -: 1844:        failing_malloc,
        -: 1845:        normal_free
        -: 1846:};
        -: 1847://
        -: 1848:
        2: 1849:TEST(CjsonFixture, assert_cJSON_InitHooks)
        -: 1850:{
        1: 1851:    cJSON_InitHooks(&failing_hooks);
        1: 1852:    cJSON_InitHooks(NULL);
        -: 1853:
        1: 1854:    failing_hooks.malloc_fn=NULL;
        1: 1855:    cJSON_InitHooks(&failing_hooks);
        1: 1856:    failing_hooks.free_fn =NULL;
        1: 1857:    global_hooks.deallocate=NULL;
        1: 1858:    cJSON_InitHooks(&failing_hooks);
        1: 1859:    failing_hooks.free_fn =NULL;
        1: 1860:    global_hooks.allocate=NULL;
        1: 1861:    cJSON_InitHooks(&failing_hooks);
        -: 1862:
        1: 1863:    global_hooks.deallocate=free;
        1: 1864:    cJSON_InitHooks(&failing_hooks);
        1: 1865:    global_hooks.allocate=malloc;
        1: 1866:}
------------------
_ZN40CjsonFixture_assert_cJSON_InitHooks_Test8TestBodyEv:
        1: 1849:TEST(CjsonFixture, assert_cJSON_InitHooks)
        -: 1850:{
        1: 1851:    cJSON_InitHooks(&failing_hooks);
        1: 1851-block  0
        1: 1852:    cJSON_InitHooks(NULL);
        -: 1853:
        1: 1854:    failing_hooks.malloc_fn=NULL;
        1: 1855:    cJSON_InitHooks(&failing_hooks);
        1: 1856:    failing_hooks.free_fn =NULL;
        1: 1857:    global_hooks.deallocate=NULL;
        1: 1858:    cJSON_InitHooks(&failing_hooks);
        1: 1859:    failing_hooks.free_fn =NULL;
        1: 1860:    global_hooks.allocate=NULL;
        1: 1861:    cJSON_InitHooks(&failing_hooks);
        -: 1862:
        1: 1863:    global_hooks.deallocate=free;
        1: 1864:    cJSON_InitHooks(&failing_hooks);
        1: 1865:    global_hooks.allocate=malloc;
        1: 1866:}
------------------
_ZN40CjsonFixture_assert_cJSON_InitHooks_TestC1Ev:
        1: 1849:TEST(CjsonFixture, assert_cJSON_InitHooks)
        1: 1849-block  0
------------------
        -: 1867:
        5: 1868:static void assert_parse_string(const char *string, const char *expected)
        -: 1869:{
        5: 1870:    parse_buffer buffer = { 0, 0, 0, 0, { 0, 0, 0 } };
        5: 1871:    buffer.content = (const unsigned char*)string;
        5: 1872:    buffer.length = strlen(string) + sizeof("");
        5: 1873:    buffer.hooks = global_hooks;
        -: 1874:
       5*: 1875:    ASSERT_TRUE(parse_string(item, &buffer));
        5: 1875-block  0
        5: 1875-block  1
    %%%%%: 1875-block  2
    %%%%%: 1875-block  3
    %%%%%: 1875-block  4
    %%%%%: 1875-block  5
    %%%%%: 1875-block  6
    $$$$$: 1875-block  7
    $$$$$: 1875-block  8
    $$$$$: 1875-block  9
    $$$$$: 1875-block 10
    $$$$$: 1875-block 11
    $$$$$: 1875-block 12
    $$$$$: 1875-block 13
        5: 1876:    global_hooks.deallocate(item->valuestring);
        5: 1876-block  0
        5: 1877:    item->valuestring = NULL;
        5: 1877-block  0
        -: 1878:}
        -: 1879:
        5: 1880:static void assert_not_parse_string(const char * const string)
        -: 1881:{
        5: 1882:    parse_buffer buffer = { 0, 0, 0, 0, { 0, 0, 0 } };
        5: 1883:    buffer.content = (const unsigned char*)string;
        5: 1884:    buffer.length = strlen(string) + sizeof("");
        5: 1885:    buffer.hooks = global_hooks;
        -: 1886:
        5: 1887:    parse_string(item, &buffer);
        5: 1887-block  0
        5: 1888:}
        5: 1888-block  0
        -: 1889:
        2: 1890:TEST(CjsonFixture, parse_string){
        1: 1891:    assert_not_parse_string("this\" is not a string\"");
        1: 1892:    reset(item);
        1: 1893:    assert_not_parse_string("");
        1: 1894:    reset(item);
        1: 1895:    assert_not_parse_string("Abcdef\\123");
        1: 1896:    reset(item);
        1: 1897:    assert_not_parse_string("Abcdef\\e23");
        1: 1898:    reset(item);
        1: 1899:    assert_not_parse_string("\"000000000000000000\\");
        1: 1900:    reset(item);
        -: 1901:
        1: 1902:    assert_parse_string("\"\"", "");
        1: 1903:    assert_parse_string(
        -: 1904:            "\" !\\\"#$%&'()*+,-./\\/0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\\\]^_'abcdefghijklmnopqrstuvwxyz{|}~\"",
        -: 1905:            " !\"#$%&'()*+,-.//0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_'abcdefghijklmnopqrstuvwxyz{|}~");
        1: 1906:    assert_parse_string(
        -: 1907:            "\"\\\"\\\\\\/\\b\\f\\n\\r\\t\\u20AC\\u732b\"",
        -: 1908:            "\"\\/\b\f\n\r\t€猫");
        1: 1909:    reset(item);
        1: 1910:    assert_parse_string("\"\b\f\n\r\t\"", "\b\f\n\r\t");
        1: 1911:    reset(item);
        -: 1912:
        1: 1913:    assert_parse_string("\"\\uD83D\\udc31\"", "🐱");
        1: 1914:    reset(item);
        1: 1915:}
------------------
_ZN30CjsonFixture_parse_string_Test8TestBodyEv:
        1: 1890:TEST(CjsonFixture, parse_string){
        1: 1891:    assert_not_parse_string("this\" is not a string\"");
        1: 1891-block  0
        1: 1892:    reset(item);
        1: 1893:    assert_not_parse_string("");
        1: 1894:    reset(item);
        1: 1895:    assert_not_parse_string("Abcdef\\123");
        1: 1896:    reset(item);
        1: 1897:    assert_not_parse_string("Abcdef\\e23");
        1: 1898:    reset(item);
        1: 1899:    assert_not_parse_string("\"000000000000000000\\");
        1: 1900:    reset(item);
        -: 1901:
        1: 1902:    assert_parse_string("\"\"", "");
        1: 1903:    assert_parse_string(
        -: 1904:            "\" !\\\"#$%&'()*+,-./\\/0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\\\]^_'abcdefghijklmnopqrstuvwxyz{|}~\"",
        -: 1905:            " !\"#$%&'()*+,-.//0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_'abcdefghijklmnopqrstuvwxyz{|}~");
        1: 1906:    assert_parse_string(
        -: 1907:            "\"\\\"\\\\\\/\\b\\f\\n\\r\\t\\u20AC\\u732b\"",
        -: 1908:            "\"\\/\b\f\n\r\t€猫");
        1: 1909:    reset(item);
        1: 1910:    assert_parse_string("\"\b\f\n\r\t\"", "\b\f\n\r\t");
        1: 1911:    reset(item);
        -: 1912:
        1: 1913:    assert_parse_string("\"\\uD83D\\udc31\"", "🐱");
        1: 1914:    reset(item);
        1: 1915:}
------------------
_ZN30CjsonFixture_parse_string_TestC1Ev:
        1: 1890:TEST(CjsonFixture, parse_string){
        1: 1890-block  0
------------------
        2: 1916:TEST(CjsonFixture, parse_hex4){
        1: 1917:    unsigned int number = 0;
        -: 1918:    unsigned char digits_lower[6];
        -: 1919:    unsigned char digits_upper[6];
        -: 1920:    /* test all combinations */
    65537: 1921:    for (number = 0; number <= 0xFFFF; number++)
        -: 1922:    {
    65536: 1923:        sprintf((char*)digits_lower, "%.4x", number);
    65536: 1924:        sprintf((char*)digits_upper, "%.4X", number);
        -: 1925:
   65536*: 1926:        ASSERT_EQ(parse_hex4(digits_lower),number);
   65536*: 1927:        ASSERT_EQ(parse_hex4(digits_upper),number);
        -: 1928:    }
        -: 1929:
        1: 1930:    parse_hex4((const unsigned char*)"beef");
        1: 1931:    parse_hex4((const unsigned char*)"wbeef");
        1: 1932:    cJSON_malloc(1);
        -: 1933:}
------------------
_ZN28CjsonFixture_parse_hex4_Test8TestBodyEv:
        1: 1916:TEST(CjsonFixture, parse_hex4){
        1: 1917:    unsigned int number = 0;
        -: 1918:    unsigned char digits_lower[6];
        -: 1919:    unsigned char digits_upper[6];
        -: 1920:    /* test all combinations */
    65537: 1921:    for (number = 0; number <= 0xFFFF; number++)
        1: 1921-block  0
    65537: 1921-block  1
    65536: 1921-block  2
        -: 1922:    {
    65536: 1923:        sprintf((char*)digits_lower, "%.4x", number);
    65536: 1923-block  0
    65536: 1924:        sprintf((char*)digits_upper, "%.4X", number);
        -: 1925:
   65536*: 1926:        ASSERT_EQ(parse_hex4(digits_lower),number);
    65536: 1926-block  0
    %%%%%: 1926-block  1
    %%%%%: 1926-block  2
    %%%%%: 1926-block  3
    %%%%%: 1926-block  4
    $$$$$: 1926-block  5
    $$$$$: 1926-block  6
    $$$$$: 1926-block  7
    $$$$$: 1926-block  8
    $$$$$: 1926-block  9
    $$$$$: 1926-block 10
   65536*: 1927:        ASSERT_EQ(parse_hex4(digits_upper),number);
    65536: 1927-block  0
    65536: 1927-block  1
    %%%%%: 1927-block  2
    %%%%%: 1927-block  3
    %%%%%: 1927-block  4
    %%%%%: 1927-block  5
    $$$$$: 1927-block  6
    $$$$$: 1927-block  7
    $$$$$: 1927-block  8
    $$$$$: 1927-block  9
    $$$$$: 1927-block 10
    $$$$$: 1927-block 11
        -: 1928:    }
        -: 1929:
        1: 1930:    parse_hex4((const unsigned char*)"beef");
        1: 1930-block  0
        1: 1931:    parse_hex4((const unsigned char*)"wbeef");
        1: 1932:    cJSON_malloc(1);
        -: 1933:}
------------------
_ZN28CjsonFixture_parse_hex4_TestC1Ev:
        1: 1916:TEST(CjsonFixture, parse_hex4){
        1: 1916-block  0
------------------
        4: 1934:char* read_file(const char *filename) {
        4: 1935:    FILE *file = NULL;
        4: 1936:    long length = 0;
        4: 1937:    char *content = NULL;
        4: 1938:    size_t read_chars = 0;
        -: 1939:
        -: 1940:    /* open in read binary mode */
        4: 1941:    file = fopen(filename, "rb");
        4: 1941-block  0
        4: 1942:    if (file == NULL)
        -: 1943:    {
        2: 1944:        goto cleanup;
        2: 1944-block  0
        -: 1945:    }
        -: 1946:
        -: 1947:    /* get the length */
        2: 1948:    if (fseek(file, 0, SEEK_END) != 0)
        2: 1948-block  0
        -: 1949:    {
    #####: 1950:        goto cleanup;
    %%%%%: 1950-block  0
        -: 1951:    }
        2: 1952:    length = ftell(file);
        2: 1952-block  0
        2: 1953:    if (length < 0)
        -: 1954:    {
    #####: 1955:        goto cleanup;
    %%%%%: 1955-block  0
        -: 1956:    }
        2: 1957:    if (fseek(file, 0, SEEK_SET) != 0)
        2: 1957-block  0
        -: 1958:    {
    #####: 1959:        goto cleanup;
    %%%%%: 1959-block  0
        -: 1960:    }
        -: 1961:
        -: 1962:    /* allocate content buffer */
        2: 1963:    content = (char*)malloc((size_t)length + sizeof(""));
        2: 1964:    if (content == NULL)
        2: 1964-block  0
        -: 1965:    {
    #####: 1966:        goto cleanup;
    %%%%%: 1966-block  0
        -: 1967:    }
        -: 1968:
        -: 1969:    /* read the file into memory */
        2: 1970:    read_chars = fread(content, sizeof(char), (size_t)length, file);
        2: 1970-block  0
        2: 1971:    if ((long)read_chars != length)
        -: 1972:    {
    #####: 1973:        free(content);
    #####: 1974:        content = NULL;
    #####: 1975:        goto cleanup;
    %%%%%: 1975-block  0
        -: 1976:    }
        2: 1977:    content[read_chars] = '\0';
        2: 1977-block  0
        -: 1978:
        -: 1979:
        4: 1980:    cleanup:
        4: 1981:    if (file != NULL)
        4: 1981-block  0
        -: 1982:    {
        2: 1983:        fclose(file);
        2: 1983-block  0
        -: 1984:    }
        -: 1985:
        4: 1986:    return content;
        4: 1986-block  0
        -: 1987:}
        -: 1988:
        -: 1989:
        2: 1990:static cJSON *parse_test_file(const char * const filename)
        -: 1991:{
        2: 1992:    char *file = NULL;
        2: 1993:    cJSON *json = NULL;
        -: 1994:
        2: 1995:    file = read_file(filename);
        2: 1995-block  0
        2: 1996:    json = cJSON_Parse(file);
        -: 1997:
        2: 1998:    free(file);
        -: 1999:
        2: 2000:    return json;
        -: 2001:}
        -: 2002:
    #####: 2003:static cJSON_bool test_apply_patch(const cJSON * const test)
        -: 2004:{
    #####: 2005:    cJSON *doc = NULL;
    #####: 2006:    cJSON *patch = NULL;
    #####: 2007:    cJSON *expected = NULL;
    #####: 2008:    cJSON *error_element = NULL;
    #####: 2009:    cJSON *comment = NULL;
    #####: 2010:    cJSON *disabled = NULL;
        -: 2011:
    #####: 2012:    cJSON *object = NULL;
    #####: 2013:    cJSON_bool successful = false;
        -: 2014:
        -: 2015:    /* extract all the data out of the test */
    #####: 2016:    comment = cJSON_GetObjectItemCaseSensitive(test, "comment");
    %%%%%: 2016-block  0
    #####: 2017:    if (cJSON_IsString(comment))
        -: 2018:    {
    #####: 2019:        printf("Testing \"%s\"\n", comment->valuestring);
    %%%%%: 2019-block  0
        -: 2020:    }
        -: 2021:    else
        -: 2022:    {
    #####: 2023:        printf("Testing unkown\n");
    %%%%%: 2023-block  0
        -: 2024:    }
        -: 2025:
    #####: 2026:    disabled = cJSON_GetObjectItemCaseSensitive(test, "disabled");
    %%%%%: 2026-block  0
    #####: 2027:    if (cJSON_IsTrue(disabled))
        -: 2028:    {
    #####: 2029:        printf("SKIPPED\n");
    %%%%%: 2029-block  0
    #####: 2030:        return true;
        -: 2031:    }
        -: 2032:
    #####: 2033:    doc = cJSON_GetObjectItemCaseSensitive(test, "doc");
    %%%%%: 2033-block  0
    #####: 2034:    patch = cJSON_GetObjectItemCaseSensitive(test, "patch");
        -: 2035:    /* Make a working copy of 'doc' */
    #####: 2036:    object = cJSON_Duplicate(doc, true);
        -: 2037:
    #####: 2038:    expected = cJSON_GetObjectItemCaseSensitive(test, "expected");
    #####: 2039:    error_element = cJSON_GetObjectItemCaseSensitive(test, "error");
    #####: 2040:    if (error_element != NULL)
        -: 2041:    {
        -: 2042:        /* excepting an error */
    #####: 2043:        successful = true;
    %%%%%: 2043-block  0
        -: 2044:    }
        -: 2045:    else
        -: 2046:    {
        -: 2047:        /* apply the patch */
    #####: 2048:        successful = true;
        -: 2049:
    #####: 2050:        if (expected != NULL)
    %%%%%: 2050-block  0
        -: 2051:        {
    #####: 2052:            successful = cJSON_Compare(object, expected, true);
    %%%%%: 2052-block  0
        -: 2053:        }
        -: 2054:    }
        -: 2055:
    #####: 2056:    cJSON_Delete(object);
    %%%%%: 2056-block  0
        -: 2057:
    #####: 2058:    if (successful)
        -: 2059:    {
    #####: 2060:        printf("OK\n");
    %%%%%: 2060-block  0
        -: 2061:    }
        -: 2062:    else
        -: 2063:    {
    #####: 2064:        printf("FAILED\n");
    %%%%%: 2064-block  0
        -: 2065:    }
        -: 2066:
    #####: 2067:    return successful;
    %%%%%: 2067-block  0
        -: 2068:}
        -: 2069:
        -: 2070:
        2: 2071:TEST(CjsonFixture, cJSON_Duplicate)
        -: 2072://static void cjson_utils_should_pass_json_patch_test_tests(void)
        -: 2073:{
        1: 2074:    cJSON *tests = parse_test_file("../tests.json");
        1: 2075:    cJSON *test = NULL;
        -: 2076:
        1: 2077:    char *file = NULL;
        1: 2078:    file = read_file("tests.json");
        1: 2079:    ASSERT_TRUE(file!=NULL);
    #####: 2080:    free(file);
        -: 2081:
    #####: 2082:    cJSON_bool failed = false;
    #####: 2083:    cJSON_ArrayForEach(test, tests)
        -: 2084:    {
    #####: 2085:        failed |= !test_apply_patch(test);
        -: 2086:    }
        -: 2087://
    #####: 2088:    cJSON_Delete(tests);
        -: 2089:
        -: 2090:}
------------------
_ZN33CjsonFixture_cJSON_Duplicate_Test8TestBodyEv:
        1: 2071:TEST(CjsonFixture, cJSON_Duplicate)
        -: 2072://static void cjson_utils_should_pass_json_patch_test_tests(void)
        -: 2073:{
        1: 2074:    cJSON *tests = parse_test_file("../tests.json");
        1: 2074-block  0
        1: 2075:    cJSON *test = NULL;
        -: 2076:
        1: 2077:    char *file = NULL;
        1: 2078:    file = read_file("tests.json");
        1: 2078-block  0
        1: 2079:    ASSERT_TRUE(file!=NULL);
        1: 2079-block  0
        1: 2079-block  1
        1: 2079-block  2
        1: 2079-block  3
        1: 2079-block  4
        1: 2079-block  5
    $$$$$: 2079-block  6
    $$$$$: 2079-block  7
    $$$$$: 2079-block  8
    $$$$$: 2079-block  9
    $$$$$: 2079-block 10
    $$$$$: 2079-block 11
    $$$$$: 2079-block 12
    #####: 2080:    free(file);
        -: 2081:
    #####: 2082:    cJSON_bool failed = false;
    #####: 2083:    cJSON_ArrayForEach(test, tests)
    %%%%%: 2083-block  0
    %%%%%: 2083-block  1
    %%%%%: 2083-block  2
    %%%%%: 2083-block  3
    %%%%%: 2083-block  4
        -: 2084:    {
    #####: 2085:        failed |= !test_apply_patch(test);
    %%%%%: 2085-block  0
    %%%%%: 2085-block  1
        -: 2086:    }
        -: 2087://
    #####: 2088:    cJSON_Delete(tests);
    %%%%%: 2088-block  0
        -: 2089:
        -: 2090:}
------------------
_ZN33CjsonFixture_cJSON_Duplicate_TestC1Ev:
        1: 2071:TEST(CjsonFixture, cJSON_Duplicate)
        1: 2071-block  0
------------------
        2: 2091:TEST(CjsonFixture, cJSON_Duplicate2)
        -: 2092:{
        1: 2093:    cJSON *tests = parse_test_file("../spec_tests.json");
        1: 2094:    cJSON *test = NULL;
        -: 2095:
        1: 2096:    char *file = NULL;
        1: 2097:    file = read_file("spec_tests.json");
        1: 2098:    ASSERT_TRUE(file!=NULL);
    #####: 2099:    free(file);
        -: 2100:
    #####: 2101:    cJSON_bool failed = false;
    #####: 2102:    cJSON_ArrayForEach(test, tests)
        -: 2103:    {
    #####: 2104:        failed |= !test_apply_patch(test);
        -: 2105:    }
        -: 2106:
    #####: 2107:    cJSON_Delete(tests);
        -: 2108:
        -: 2109:}
